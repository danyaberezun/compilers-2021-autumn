name: Regression

on: # [push]
  # pull_request:
  pull_request_target:
    types: [opened, reopened, edited]

jobs:
  job1:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - uses: actions/checkout@v2
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/head
      - id: step1
        run: |
          login=${{ github.event.pull_request.user.login }}
          echo "$login"
          if [ "${{ github.base_ref }}" != "${{ github.head_ref }}" ]; then
             echo "base and head branch names differs: stop"
             exit 1
          fi
          wget -q --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1grnb60AaZBCwhBqETeKOGh3tW7ggEWDJ' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1grnb60AaZBCwhBqETeKOGh3tW7ggEWDJ" -O cw-20201.tar.gz && rm -rf /tmp/cookies.txt
          rm -rf /tmp/cookies.txt
          docker load < cw-20201.tar.gz
          docker run -d -it --name cw-2021 -v $(pwd):/usr/share/compiler-workout berezun/cw-2021
          docker exec -t cw-2021 sh test.sh
          
          echo "$login" > gitid.txt
          echo ${{ github.base_ref }} > base.txt
          echo ${branch:1:2} > assignment_number.txt

      - uses: actions/upload-artifact@v2
        with:
          name: share_info
          path: |
            gitid.txt
            base.txt
            assignment_number.txt

#   job2:
#     runs-on: ubuntu-latest
#     needs: job1
#     outputs:
#       output_id_number: ${{ steps.step1.outputs.id }}
#     steps:
#       - id: 'get_worksheet'
#         uses: jroehl/gsheet.action@v1.0.0
#         with:
#           spreadsheetId: ${{secrets.SPREADSHEET_ID}}
#           commands: | # list of commands, specified as a valid JSON string
#             [
#               { "command": "getData", "args": { "worksheetTitle": "Sheet1", "minCol": 1, "maxCol": 1 } }
#             ]
#         env:
#           GSHEET_CLIENT_EMAIL: ${{ secrets.SERVICE_EMAIL }}
#           GSHEET_PRIVATE_KEY: ${{ secrets.SERVICE_KEY }}
#       - id: step1
#         name: dump results
#         env:
#           #  the output of the action can be found in ${{ steps.update_worksheet.outputs.results }}
#           RESULTS: ${{ steps.get_worksheet.outputs.results }}
#         run: |
#           cmd=$(echo "${RESULTS}" | jq ".results[0].result.rawData")
#           echo ${{ needs.job1.steps.extract_branch.outputs.branch }}
          
#           branch=${{ github.base_ref }}
#           assignment=${branch:1:2}
#           echo "assignment $assignment"

#           branch=\"${{needs.job1.outputs.output_branch}}\"
#           echo $branch
#           echo ${branch:0:3}
#           gitid=\"${{needs.job1.outputs.output_id}}\"
#           result=\"${{needs.job1.outputs.output_result}}\"
#           j=0
#           for i in {1..60}
#           do
#             t=$(echo "${cmd}" | jq ".[$i][0]")
#             echo "$t"
#             echo "$gitid"
#             if [ "$t" = "$gitid" ]; then
#               echo "FOUND"
#               echo "$i"
#               j="[{ \"command\": \"updateData\", \"args\": {\"worksheetTitle\": \"Sheet1\", \"data\": [["$result", "$result"]], \"minCol\": $((assignment*2)), \"minRow\": $((i+1)) }} ]"
#               echo "$j"
#               echo "::set-output name=id::$j"
#             else
#               echo "Strings are not equal."
#             fi
#           done
#           if [[ $j -eq 0 ]]
#           then
#             j="[{ \"command\": \"appendData\", \"args\": {\"worksheetTitle\": \"Sheet1\", \"data\": [["$gitid", "$result", "$result"]], \"minCol\": 1 }} ]"
#             echo "::set-output name=id::$j"
#           fi
#           echo $j
#           echo "$gitid"
# #        echo "::set-output name=id::$i"
#   job3:
#     runs-on: ubuntu-latest
#     needs: job2
#     steps:
#       - id: 'update_worksheet'
#         uses: jroehl/gsheet.action@v1.0.0
#         with:
#           spreadsheetId: ${{secrets.SPREADSHEET_ID}}
#           commands: ${{needs.job2.outputs.output_id_number}}
#         env:
#           GSHEET_CLIENT_EMAIL: ${{ secrets.SERVICE_EMAIL }}
#           GSHEET_PRIVATE_KEY: ${{ secrets.SERVICE_KEY }}
