-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | a       -> error (sprintf ("the name ""%s"" does not designate a variable. Got: %s\n", name, a.string), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  -- printf("in addNames. Adding: %s\n", names.string);
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (cfg@[state, world], expr) {
  -- printf("In eval, expr: %s, world: %s\n", expr.string, world.string);
  case expr of
    Read (x) -> case eval(cfg, x) of [[state, world], x] -> case readWorld(world) of [res, world] -> 
                -- printf("In read got: %s\n", res.string);
                [[state <-[x, Var(res)], world], Unit]
      esac esac
  | Write (x) -> case eval(cfg, x) of [[state, world], x] -> 
        -- printf("In write got %s\n", x.string);
        [[state, writeWorld(x, world)], Unit]
      esac
  | Seq (left, right) -> case evalList(cfg, {left, right}) of [cfg, {_, r}] ->
        [cfg, r]
      esac
  | Ref (x) -> checkVar(state, x); [cfg, x]
  | Var (x) -> checkVar(state, x); case lookup(state, x) of 
        Var(v) -> [cfg, v]
      esac
  | Ignore (e) -> case eval(cfg, e) of [cfg, _] -> [cfg, Unit] esac
  | Assn (x, e) -> case eval(cfg, x) of [cfg, x] -> 
        case eval(cfg, e) of [[state, world], v] -> 
          [[state <- [x, Var(v)], world], v]
      esac esac
  | Const (n) -> [cfg, n]
  | Binop (op, l, r) -> case evalList(cfg, {l, r}) of [cfg, {l, r}] -> 
        [cfg, evalOp(op, l, r)]
      esac
  | While (e, s) -> case eval(cfg, e) of [cfg, v] -> 
        if v then 
          case eval(cfg, s) of [cfg, _] -> eval(cfg, expr) esac
        else
          [cfg, Unit]
        fi
      esac
  | DoWhile(e, s) -> case evalList(cfg, {s, While(e, s)}) of [cfg, _] ->
        [cfg, Unit]
      esac
  | If (e, s1, s2) -> case eval(cfg, e) of [cfg, v] -> 
        if v then 
          eval(cfg, s1)
        else 
          eval(cfg, s2)
        fi
      esac
  | Skip -> [cfg, Unit]

  | Scope ( {Var (vars)}, body) -> 
        case eval([addNames(enterScope(state), vars), world], body) 
          of [[state, world], _] -> [[leaveScope(state), world], Unit]
        esac
    
  | expr -> failure ("evalExpr is unimplemented for %s\n", expr.string)
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}