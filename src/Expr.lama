-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    --values
      Const (n)  -> [c, Val (n)] 
    | Var (name) -> [c, Val (s(name))]
    | Ref (x)    -> [c, Ref (x)]
    
    | Binop (op, l, r) -> case evalList(c, {l, r}) of 
        [c, {Val (lval), Val (rval)}] -> [c, Val(evalOp(op, lval, rval))]
      esac
    | Skip -> [c, Void]
    | Ignore (e) -> case eval(c, e) of
        [c, _]  -> [c, Void]
      esac
    | Assn (l, r) -> case evalList(c, {l, r}) of
        [[ns, nw], {Ref (x), Val (v)}] -> [[ns <- [x, v], nw], Val (v)]
      esac
    | Read (st) -> case readWorld(w) of
        [v, nw] -> [[s <- [st, v], nw], Void]
      esac
    | Write (e) -> case eval(c, e) of 
        [[ns, nw], Val(v)] -> [[ns, writeWorld(v, nw)], Void]
      esac
    | Seq (fst, snd) -> case eval(c, fst) of
        [c, _] -> eval(c, snd)
      esac
    | If (cond, th, els) -> case eval(c, cond) of
          [c, Val (0)] -> eval(c, els)
        | [c, _]       -> eval(c, th)
      esac
    | While (cond, body) -> case eval(c, cond) of
          [c, Val (0)] -> [c, Void]
        | [c, _]       -> case eval(c, body) of
            [c, _] -> eval(c, While (cond, body))
          esac  
      esac
    | DoWhile (body, cond) -> eval(c, Seq(body, While(cond, body))) 
  esac
  -- failure ("evalExpr not implemented\n")
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
