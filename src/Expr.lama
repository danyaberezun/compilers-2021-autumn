-- Expression evaluator.
import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some(f) -> f(l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration(if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList(c, exprs) {
  case foldl(
    fun([c, vals], e) {
      case eval(c, e) of
        [c, v] -> [c, v : vals]
      esac
    },
    [c, {}],
    exprs
  ) of
    [c, vals] -> [c, reverse(vals)]
  esac
}

-- TODO
fun eval(configuration@[state, world], expr) {
  case expr of
  Var(name) -> [configuration, state(name)]
  | Ref(name) -> [configuration, name]
  | Const(n) -> [configuration, n]
  | Skip -> [configuration, {}]
  | Ignore(e) -> [eval(configuration, e)[0], Void]
  | Assn(ref, expr) ->
    case evalList(configuration, { expr, ref }) of
      [[state, world], { value, name }] -> [[state <- [name, value], world], value]
    esac
  | Seq(left, right) ->
    case evalList(configuration, { left, right }) of
      [configuration, { _, v }] -> [configuration, v]
    esac
  | Binop(name, l, r) ->
    case evalList(configuration, { l, r }) of
      [configuration, { left, right }] -> [configuration, evalOp(name, left, right)]
    esac
  | Read(name) ->
    case readWorld(world) of
      [v, newWorld] -> [[state <- [name, v], newWorld], Void]
    esac
  | Write(expr) ->
    case eval(configuration, expr) of
      [[state, world], value] -> [[state, writeWorld(value, world)], Void]
    esac
  | If(condition, thenBody, elseBody) ->
    case eval(configuration, condition) of
      [configuration, 0] -> eval(configuration, elseBody)
      | [configuration, _] -> eval(configuration, thenBody)
    esac
  | While(condition, body) ->
    var currenctConfiguration = configuration;
    while
      case eval(currenctConfiguration, condition) of
        [configuration, v] -> currenctConfiguration := configuration; v
      esac
    do
      currenctConfiguration := eval(currenctConfiguration, body)[0]
    od;
    [currenctConfiguration, Void]
  | DoWhile(body, condition) ->
    var currenctConfiguration = configuration;
    do
      currenctConfiguration := eval(currenctConfiguration, body)[0]
    while
      case eval(currenctConfiguration, condition) of
        [configuration, v] -> currenctConfiguration := configuration; v
      esac
    od;
    [currenctConfiguration, Void]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr(input, expr) {
  case eval([emptyState(), createWorld(input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
