-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval(c@[s, w], expr) {
  case expr of 
    Skip -> [c, 0]
  | Assn (x, e) -> case eval(c, x) of 
      [c@[s, w], x] -> case eval(c, e) of 
        [c@[s, w], e] -> [[s <- [x, e], w], e]
      esac
    esac
  | Seq (s1, s2) -> case eval(c, s1) of 
      [c@[s, w], _] -> case eval(c, s2) of 
        [c@[s, w], e] -> [c, e]
      esac
    esac
  | Write (e) -> case eval(c, e) of 
      [c@[s, w], e] -> [[s, writeWorld(e, w)], 0]
    esac 
  | Read (x) -> case readWorld(w) of 
      [v, w] -> [[s <- [x, v], w], 0]
    esac 
  | If (cond, thenExpr, elseExpr) -> case eval(c, cond) of 
      [c@[s, w], e] -> if e != 0 then eval(c, thenExpr) else eval(c, elseExpr) fi
    esac 
  | While (cond, body) -> case eval(c, cond) of 
      [c@[s, w], e] -> if e != 0 then case eval(c, body) of 
        [c@[s, w], _] -> eval(c, While (cond, body))
      esac else 
        [c, 0]
      fi
    esac 
  | DoWhile (body, cond) -> case eval(c, body) of 
      [c@[s, w], _] -> eval(c, While (cond, body))
    esac 
  | Binop (op, s1, s2) -> case eval(c, s1) of 
      [c@[s, w], r1] -> case eval(c, s2) of 
        [c@[s, w], r2] -> [c, evalOp(op, r1, r2)]
      esac 
    esac 
  | Ref (x) -> [c, x] 
  | Ignore (e) -> case eval(c, e) of [c@[s, w], _] -> [c, 0] esac
  | Var (x) -> [c, s(x)]
  | Const (n) -> [c, n]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
