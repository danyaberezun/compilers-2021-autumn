-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun helper (op, expr1, expr2) {
  case op of
      "+" -> expr1 + expr2
    | "-" -> expr1 - expr2
    | "*" -> expr1 * expr2
    | "/" -> expr1 / expr2
    | "%" -> expr1 % expr2
    | "==" -> expr1 == expr2
    | "!=" -> expr1 != expr2
    | "<"  -> expr1 < expr2
    | ">"  -> expr1 > expr2
    | ">=" -> expr1 >= expr2
    | "<=" -> expr1 <= expr2
    | "&&" -> expr1 && expr2
    | "!!" -> expr1 !! expr2
  esac
}

public fun evalExpr (st, expr) {
  case expr of
      Var   (x) -> st(x)
    | Const (n) -> n
    | Binop (op, expr1, expr2) -> helper(op, evalExpr(st, expr1), evalExpr(st, expr2))
  esac
}
