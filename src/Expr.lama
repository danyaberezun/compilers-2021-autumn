-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalBinop(op, lhs, rhs) {
    case op of 
      "+" -> lhs + rhs
    | "-" -> lhs - rhs
    | "*" -> lhs * rhs
    | "/" -> lhs / rhs
    | "%" -> lhs % rhs
    | "<" -> lhs < rhs
    | ">" -> lhs > rhs
    | "<=" -> lhs <= rhs
    | ">=" -> lhs >= rhs
    | "==" -> lhs == rhs
    | "!=" -> lhs != rhs
    | "&&" -> lhs && rhs
    | "||" -> lhs !! rhs
    | "!!" -> lhs !! rhs
    esac  
}

public fun evalExpr (st, expr) {
  case expr of 
    Var (x) -> st (x)
  | Const (n) -> n 
  | Binop (op, x, y) -> evalBinop(op, evalExpr(st, x), evalExpr(st, y))
  esac
}
