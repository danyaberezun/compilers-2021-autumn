-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun helpAddNames (s, expr) {
  case expr of
    Var (name) -> addNames (s, name)
    | Fun (name, args, body) -> addFunction (s, name, args, body)
  esac
}

fun helpFunxtionForXip (s, [arg, value]) {
  s.addName (arg, value) 
}

fun eval (c@[s, w], expr) {
  case expr of
    Var (name) -> [c, lookup(s, name)]
    | Const (n) -> [c, n]
    | Binop (operation, first, second) ->
      case evalList (c, {first, second}) of
        [c, {first, second}] -> [c, evalOp (operation, first, second)]
      esac
    | Ref (exp) -> [c, Ref(exp)]
    | Ignore (exp) ->
      case eval (c, exp) of
        [c, _] -> [c, {}]
      esac
    | Skip -> [c, {}]
    | Assn (x, exp) ->
      case evalList (c, {x, exp}) of
        [[s, w], {Ref(x), exp}] -> [[s <- [x, exp], w], exp] 
        | [c, {ElemRef (arr, i), exp}] -> [c, arr[i] := exp]
      esac
    | Read (x) ->
      case readWorld (w) of
        [tmp, w] -> [ [s <- [x, tmp], w], {}]
      esac
    | Write (expr1) ->
      case eval (c, expr1) of
        [[s, w], tmp] -> [[s, writeWorld (tmp, w)], {}]
      esac
    | Seq (exp1, exp2) ->
      case evalList (c, {exp1, exp2}) of
        [c, {exp1, exp2}] -> [c, exp2]
      esac
    | DoWhile (cond, body) -> eval (c, Seq (cond, While (body, cond)))
    | While (cond, body) ->
      case eval (c, cond) of [c, res] ->
        if res
        then 
          eval (c, Seq (body, While (cond, body)))
        else 
          [c, {}]
        fi
      esac
    | If (cond, body1, body2) ->
      case eval (c, cond) of [c, res] ->
        if res
        then 
          eval (c, body1)
        else 
          eval (c, body2)
        fi
      esac
    | Scope (defs, expr) ->
      case foldl (helpAddNames, enterScope(s), defs) of 
      s -> 
        case eval ([s, w], expr) of
          [[s, w], result] -> [[leaveScope(s), w], result]
        esac
      esac
    | Call (name, exprs) ->
      case evalList (c, exprs) of 
        [c, list] ->
          case lookup (s, name) of
            Fun (args, External) ->
              case evalBuiltin (name, list, w) of
                [result, w] -> [[s, w], result]
              esac
            | Fun (args, body) ->
              case foldl (helpFunxtionForXip, s.enterFunction, zip (args, list)) of inner_s ->
                case eval ([inner_s, w], body) of 
                  [[inner_s, w], result] -> [[s.leaveFunction (inner_s.getGlobal), w], result]
                esac
              esac
          esac
      esac
    | Set (name, expr) ->
      case eval (c, expr) of
        [[s, w], v] -> [[s <- [name, v], w], v]
      esac
    | String (string) -> [c, string]
    | Array (elems) ->
      case evalList(c, elems) of
        [c, elems] -> 
          [c, listArray(elems)]
      esac
    | Sexp (s, elems) ->
      case evalList(c, elems) of
        [c, elems] ->
          [c, Sexp(s, listArray(elems))]
      esac
    | Elem (expr1, expr2) ->
      case evalList(c, {expr1, expr2}) of
        [c, expr1 : i : _] -> [
          c, 
          case expr1 of
            Sexp(_, expr1) -> expr1[i]
            | _ -> expr1[i]
          esac
        ]
      esac
    | ElemRef (expr1, expr2) ->
      case evalList(c, {expr1, expr2}) of
        [c, expr1 : i : _] -> [
          c,
          case expr1 of
            Sexp(_, expr1) -> ElemRef(expr1, i)
            | _ -> ElemRef(expr1, i)
          esac
        ]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
