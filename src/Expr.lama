-- Expression evaluator 

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

<<<<<<< HEAD
fun eval (c@[s, w], expr) {
  failure ("evalExpr not implemented\n")
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
=======
public fun evalOp(op, v1, v2)
{
  case op of
    "+"  -> v1 +  v2 |
    "-"  -> v1 -  v2 |
    "*"  -> v1 *  v2 |
    "/"  -> v1 /  v2 |
    "%"  -> v1 %  v2 |
    "==" -> v1 == v2 |
    "!=" -> v1 != v2 |
    "<"  -> v1 <  v2 |
    "<=" -> v1 <= v2 |
    ">"  -> v1 >  v2 |
    ">=" -> v1 >= v2 |
    "&&" -> v1 && v2 |
    "!!" -> v1 !! v2 |
    _ -> failure("Can not evaluate binary operation '" ++ string(op) ++ "'\n")
  esac
}


public fun evalExpr(st, expr)
{
  case expr of 
    Var (variableName) -> st(variableName) |
    Const (value) -> value |
    Binop (op, e1, e2) -> evalOp(op, evalExpr(st, e1), evalExpr(st, e2)) |
    _ -> failure("Can not evaluate expression '" ++ string(expr) ++ "'\n")
  esac
}

--printf("%s\n", evalExpr(emptyState, Const(3)).string)
--printf("%s\n", evalExpr(emptyState, Binop("+", Const(3), Const(5))).string)
>>>>>>> origin/A05-control-flow-sm-x86
