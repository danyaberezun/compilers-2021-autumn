-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}


fun processDefs(state, defs) {
  case defs of
    {} -> state
   | h:tail -> case h of
         Fun (name, args, body) -> processDefs(state.addFunction(name, args, body), tail)
        | Var (names) -> processDefs(state.addNames(names), tail)
        esac
  esac
}


fun eval (c@[s, w], expr) {
  case expr of
   Assn (lhs, rhs) -> (
     case evalList(c, {lhs, rhs}) of
       [c@[s, w], { Ref (lhs), rhs} ] -> (
            var newConf = [s <- [lhs, rhs], w];
            [newConf, rhs]
       )
     esac
   )
  | Seq (st, stR) -> case eval(c, st) of
        [newConf, v] -> eval (newConf, stR)
        esac
  | Skip -> [c, Void]
  | Read (str_) -> case readWorld(w) of
        [v, newW] -> (
            var newConf = [s <- [str_, v], newW];
            [newConf, Void]
        )
        esac
  | Write (ex) -> case eval(c, ex) of
        [newConf@[s, w], v] -> (
            var conf = [s, writeWorld(v, w)];
            [conf, Void]
        )
        esac
  | If (cond, tb, fb) ->  case eval(c, cond) of
        [newConf, condR] -> if condR then eval(newConf, tb)
                            else eval(newConf, fb)
                            fi
        esac
  | While (cond, stt) -> case eval(c, cond) of
        [newConf, condR] -> if condR then (
                                var blockR = eval(newConf, stt);
                                eval(blockR.fst, While (cond, stt))
                            ) else [newConf, Void]
                            fi
        esac
  | DoWhile (stt, cond) -> case eval(c, stt) of
        [newConf, blockR] -> case eval(newConf, cond) of
                [newConf, condR] -> if condR then (
                                    eval(newConf, While (cond, stt))
                                    ) else [newConf, Void]
                                    fi
                esac
        esac
  | Ref (x) -> [c, Ref (x)]
--  | Var (x) -> case s.lookup(x) of
  | Var (x) -> [c, s.lookup(x)]
--         Var (x) -> [c, x]
--        esac
  | Const (x) -> [c, x]
  | Binop (op, x, y) -> (
     case evalList(c, {x, y}) of
        [newConf, {l, r}] -> [newConf, evalOp(op, l, r)]
      esac
  )
  | Ignore (ex) -> [eval(c, ex).fst, Void]
  | Scope(defs, ex) ->
    case processDefs(enterScope(s), defs) of newState ->
          case eval([newState, w], ex) of
                [[newState, w], res] -> (
                    var newConf = [leaveScope(newState), w];
                    [newConf, res]
                )
          esac
    esac
  | Call (func, args) -> case s.lookup(func) of
     Fun (fArgs, body) -> case evalList(c, args) of
            [c@[st, w], evaluatedArgs] -> (
                var updState = enterFunction(st);
                var newState = foldl(fun (s, [arg, v]) { addName(s, arg, v) }, updState, zip(args, evaluatedArgs));
--                printf("%s ", updState);
                case eval([newState, w], body) of
                    [c@[newSt, w], res] -> (
                        var newConf = [st.leaveFunction(getGlobal(newSt)), w];
                        [newConf, res]
                    )
                esac
            )
            esac
    esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}