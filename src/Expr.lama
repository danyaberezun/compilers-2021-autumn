-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (v)          -> st (v)
  | Const (n)        -> n
  | Binop (op, x, y) ->
    var a = evalExpr (st, x),
        b = evalExpr (st, y);
    evalBinop (op, a, b)
  esac
}

public fun evalBinop (op, a, b) {
  case op of
    "+"  -> a + b
  | "-"  -> a - b
  | "*"  -> a * b
  | "/"  -> a / b
  | "%"  -> a % b
  | "<"  -> a < b
  | ">"  -> a > b
  | "<=" -> a <= b
  | ">=" -> a >= b
  | "==" -> a == b
  | "!=" -> a != b
  | "&&" -> a && b
  | "!!" -> a !! b
  esac
}
