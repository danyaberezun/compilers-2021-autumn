-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c, expr) {
  case expr of
    Var   (_)       -> [c, c[0] (expr[0])] |
    Ref   (_)       -> [c, expr[0]] |
    Const (_)       -> [c, expr[0]] |
    If (_, _, _)    -> (case eval (c, expr[0]) of
						[c, 0] -> eval (c, expr[2]) |
						[c, _] -> eval (c, expr[1])
					  esac) |
    Assn (_, _)     -> (case eval (c, expr[0]) of
							[c, ref] ->
							case eval (c, expr[1]) of
							  [c@[st, y], value] -> [[st <- [ref, value], y], value]
							esac
						esac) |
    Seq (_, _)      -> (case eval (c, expr[0]) of
							[c, i] -> eval (c, expr[1])
						esac) |
    Skip            -> [c, Void]                  |
    While (_, _)    -> (case eval (c, expr[0]) of
						[c, 0] -> [c, Void] |
						[c, _] ->
						case eval (c, expr[1]) of
						  [c, _] -> funcWhile (c, While (expr[0], expr[1]))
						esac
					  esac) |
    DoWhile (_, _)  -> (case eval (c, expr[0]) of
						[c, _] -> funcWhile (c, While (expr[1], expr[0]))
					  esac) |
    Read (_)        -> (case eval (c, expr[0]) of
						[c, ref] ->
						case readWorld (c[1]) of
						  [value, k] -> [[c[0] <- [ref, value], k], Void]
						esac
					  esac) |
    Write (_)       -> (case eval (c, expr[0]) of
						[c@[st, w], value] -> [[st, writeWorld (value, w)], Void]
					  esac) |
    Binop (_, _, _) -> (
			case eval (c, expr[1]) of
    				[c, l] ->
    				case eval (c, expr[2]) of
      					[c, r] -> [c,
     						case expr[0] of
        					"+"  -> l + r |
        					"-"  -> l -  r |
        					"*"  -> l *  r |
        					"/"  -> l /  r |
        					"%"  -> l %  r |
        					"==" -> l == r |
        					"!=" -> l != r |
        					"<"  -> l <  r |
        					"<=" -> l <= r |
        					">"  -> l >  r |
        					">=" -> l >= r |
        					"&&" -> l && r |
        					"!!" -> l !! r |
        					_    -> failure  ("Failure in eval - no such binop \n")
      					esac]
    				esac
  			esac) |

    _       -> (  case eval (c, expr[0]) of
							[c, _] -> [c, Void]
						  esac)
  esac
}

fun funcWhile (c, expr) {
  case eval (c, expr[0]) of
	[c, 0] -> [c, Void] |
	[c, _] ->
  case eval (c, expr[1]) of
        [c, _] -> funcWhile (c, While (expr[0], expr[1]))
  esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
