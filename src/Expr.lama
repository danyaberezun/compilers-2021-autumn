-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addFuncNames (state, defs) {
  foldl (fun (state, def) {
    case def of
      Var (name) -> state.addNames (name)
      | Fun (name, args, body) -> state.addFunction (name, args, body)
    esac
  }, state, defs)
}

fun addArguments (state, names, values) {
  foldl (fun (s, [name, value]) { s.addName (name, value)}, state, zip (names, values))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of
    Const (n) -> [c, n]
  | Var (x) -> [c, lookup (s, x)]
  | Binop (op, l, r) ->
      case evalList (c, {l, r}) of
        [c, {x, y}] -> [c, evalOp (op, x, y)]
      esac
  | Ref (x) -> [c, Ref (x)]
  | Skip -> [c, None]
  | Assn (l, r) -> 
      case evalList (c, {l, r}) of
        [[newS, newW], {Ref (x), value}] -> [[newS <- [x, value], newW], value]
      esac
  | Write (e) ->
      case eval (c, e) of
        [[newS, newW], v] -> [[newS, writeWorld (v, newW)], None]
      esac
  | Read (x) -> 
      case readWorld (w) of
        [z, newW] -> [[s <- [x, z], newW], z]
      esac
  | Seq (e1, e2) -> eval (eval (c, e1).fst, e2)
  | Ignore (e) -> [eval (c, e).fst, None]
  | If (e, branchT, branchF) ->
      case eval (c, e) of
        [c, resE] -> eval (c, if resE then branchT else branchF fi)
      esac
  | While (e, body) ->
      case eval (c, e) of
        [c, resE] -> if resE then eval (c, Seq (body, expr)) else [c, None] fi
      esac
  | DoWhile (body, e) ->
      case eval (c, body) of
        [c, _] -> eval (c, While (e, body))
      esac
  | Scope (defs, expr) -> case enterScope (s) of
      s1 -> case addFuncNames (s1, defs) of
        s2 -> case eval ([s2, w], expr) of
          [[s3, w1], res] -> [[leaveScope (s3), w1], res]
        esac
      esac
    esac
  | Call (name, args) -> case evalList (c, args) of
      [[s1, w1], argVals] -> case lookup (s1, name) of
        Fun (argNames, body) -> case enterFunction (s1) of
          sFun -> case addArguments (sFun, argNames, argVals) of
            sFun1 -> case eval ([sFun1, w1], body) of
              [[sFun2, w2], res] -> [[leaveFunction (s1, getGlobal (sFun2)), w2], res]
            esac
          esac
        esac
      esac
    esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
