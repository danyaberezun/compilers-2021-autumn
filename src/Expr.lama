-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDef (state, def) {
  case def of
    Var (names)            -> addNames (state, names)
  | Fun (name, args, body) -> addFunction (state, name, args, body)
  esac
}

fun addDefs (state, defs) {
  foldl (addDef, state, defs)
}

(* Assignment *)
fun eval (c@[st, w], expr) {
  case expr of
    Var   (name)         -> [c, st.lookup (name)]
  | Const (value)        -> [c, value]
  | Binop (op, e1, e2)   -> case evalList (c, {e1, e2}) of
                              [c, left:right:_] -> [c, evalOp (op, left, right)]
                            esac
  | Assn  (e1, e2)       -> case evalList (c, {e1, e2}) of 
                              [[st, w], Ref (name):value:_] -> [[st <- [name, value], w], value]
                            esac
  | Seq   (e1, e2)       -> case evalList (c, {e1, e2}) of
                              [c, _:value:_] -> [c, value]
                            esac
  | Skip                 -> [c, Void]
  | Read  (name)         -> case readWorld (w) of [value, w] -> [[st <- [name, value], w], Void] esac
  | Write (expr)         -> case eval (c, expr) of [[st, w], value] -> 
                              case writeWorld (value, w) of w -> [[st, w], Void] esac
                            esac
  | If    (cond, e1, e2) -> case eval (c, cond) of [c, value] ->
                              if value != 0 then eval (c, e1) else eval (c, e2) fi
                            esac
  | While (cond, expr)   -> case eval (c, cond) of [c, value] ->
                              if value != 0 then eval (c, Seq (expr, While (cond, expr))) else [c, Void] fi
                            esac
  | DoWhile (expr, cond) -> eval (c, Seq (expr, While (cond, expr)))
  | Ref     (name)       -> [c, Ref (name)]
  | Ignore  (expr)       -> case eval (c, expr) of [c, _] -> [c, Void] esac
  | Scope   (defs, expr) -> case st.enterScope of st -> 
                              case addDefs (st, defs) of st -> 
                                case eval ([st, w], expr) of [[st, w], v] ->
                                  [[st.leaveScope, w], v]
                                esac
                              esac
                            esac
  | Call    (name, args) -> checkFun (st, name);
                            case st.lookup (name) of Fun (argsNames, body) -> 
                              case evalList (c, args) of [[st_, w], argsValues] ->
                                case st_.enterFunction of st_ ->
                                  case foldl (fun (state, [name, value]) { 
                                                  state.addName (name, value)
                                              }, st_, zip (argsNames, argsValues)) of st_ ->
                                    case eval ([st_, w], body) of [[st_, w], v] ->
                                      [[st.leaveFunction (st_.getGlobal), w], v]
                                    esac
                                  esac
                                esac
                              esac
                            esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}