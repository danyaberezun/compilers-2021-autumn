-- Expression evaluator

import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  
  fun applyOperator(op, lhs, rhs) {
    -- printf("Opearator `%s` called on operands %d, %d\n", op, lhs, rhs);
    case op of 
        "+" -> lhs + rhs
      | "-" -> lhs - rhs
      | "*" -> lhs * rhs
      | "/" -> lhs / rhs
      | "%" -> lhs % rhs
      | "==" -> lhs == rhs
      | "!=" -> lhs != rhs
      | "<" -> lhs < rhs
      | "<=" -> lhs <= rhs
      | ">" -> lhs > rhs
      | ">=" -> lhs >= rhs
      | "&&" -> lhs && rhs
      | "!!" -> lhs !! rhs
    esac    
  }

  case expr of 
      Var (name) -> st(name)
    | Const (value) -> value 
    | Binop (op, lhs, rhs) -> applyOperator(op, evalExpr(st, lhs), evalExpr(st, rhs))
  esac
}
