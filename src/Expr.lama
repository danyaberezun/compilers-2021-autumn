-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (v) -> st (v)
  | Const (v) -> v
  | Binop (op, l, r) ->
    var le = evalExpr (st, l);
    var re = evalExpr (st, r);
    case op of
      "*" ->  le * re
    | "+" ->  le + re
    | "-" ->  le - re
    | "/" ->  le / re
    | "%" ->  le % re
    | "<" ->  le < re
    | "<=" ->  le <= re
    | "==" ->  le == re
    | "!=" ->  le != re
    | ">=" ->  le >= re
    | ">" ->  le > re
    | _ -> failure ("Operator %s not implemented\n", op)
    esac
  esac
}
