-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addNamesAndFunctions(state, ds) {
  foldl(fun (state, d) {
    case d of
      Var(name) -> state.addNames(name)
    | Fun(name, args, body) -> state.addFunction(name, args, body)
    esac
  }, state, ds)
}

fun addArgs(state, names, values) {
  foldl (fun (s, [name, value]) { s.addName (name, value)}, state, zip (names, values))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn(lhs, rhs) ->
      case evalList(c, {lhs, rhs}) of
        [[s, w], {Ref(x), Val(e)}] -> [[s <- [x, Val(e)], w], Val(e)]
      esac
  | Seq(e1, e2) ->
      case eval(c, e1) of
        [c, _] -> eval(c, e2)
      esac
  | Skip -> [c, Void]
  | Read(x) ->
      case readWorld(w) of
        [z, w] -> [[s <- [x, Val(z)], w], Void]
      esac
  | Write(e) ->
      case eval(c, e) of
        [[s, w], Val(value)] -> [[s, writeWorld(value, w)], Void]
      esac
  | If(e, st1, st2) ->
      case eval(c, e) of
        [c, Val(0)] -> eval(c, st2)
      | [c, Val(_)] -> eval(c, st1)
      esac
  | While(e, st) ->
      case eval(c, e) of
        [c, Val(0)] -> [c, Void]
      | [c, Val(_)] -> case eval(c, st) of
          [c, Void] -> eval(c, expr)
        esac
      esac
  | DoWhile(st, e) ->
      case eval(c, st) of
        [c, Void] -> case eval(c, e) of
          [c, Val(0)] -> [c, Void]
        | [c, Val(_)] -> eval(c, expr)
        esac
      esac
  | Var(x) -> [c, s.lookup(x)]
  | Ref(x) -> [c, Ref(x)]
  | Const(n) -> [c, Val(n)]
  | Binop(op, e1, e2) ->
      case evalList(c, {e1, e2}) of
        [c, {Val(lhs), Val(rhs)}] -> [c, Val(evalOp(op, lhs, rhs))]
      esac
  | Ignore(e) ->
      case eval(c, e) of
        [c, _] -> [c, Void]
      esac
  | Scope(ds, e) ->
      case eval([s.enterScope.addNamesAndFunctions(ds), w], e) of
        [[s, w], v] -> [[s.leaveScope, w], v]
      esac
  | Call(x, args) ->
      case evalList(c, args) of
        [[s1, w], values] ->
          case s1.lookup(x) of
            Fun(args, body) ->
              case eval([s1.enterFunction.addArgs(args, values), w], body) of
                [[s2, w], v] -> [[s1.leaveFunction(s2.getGlobal), w], v]
              esac
          esac
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
