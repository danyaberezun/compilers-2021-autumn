-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+", infix +],
  ["-", infix -],
  ["*", infix *],
  ["/", infix /],
  ["%", infix %],
  ["==", infix ==],
  ["!=", infix !=],
  ["<", infix <],
  ["<=", infix <=],
  [">", infix >],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some (f) -> f(l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList(c, exprs) {
  case foldl(fun ([c, vals], e) {
    case eval(c, e) of
      [c, v] -> [c, v:vals]
    esac
  },
    [c, { }],
    exprs) of
    [c, vals] -> [c, reverse(vals)]
  esac
}

fun eval(c@[s, w], expr) {
  case expr of
      Assn(e1, e2)        ->
        case evalList(c, { e1, e2 }) of
          [c@[s, w], { lft, rgt }] -> [[s <- [lft, rgt], w], rgt]
        esac
    | Seq(e1, e2)         ->
        case evalList(c, { e1, e2 }) of
          [c, { _, snd }] -> [c, snd]
        esac
    | Skip                -> [c, None]
    | Read(x)             -> case readWorld(w) of
      [v, w] -> [[s <- [x, v], w], None]
    esac
    | Write(e)            -> case eval(c, e) of
      [c@[s, w], variable] -> [[s, writeWorld(variable, w)], None]
    esac
    | If(cond, tE, fE)    -> case eval(c, cond) of
      [c, condRes] -> eval(c, if condRes then tE else fE fi)
    esac
    | w@While(cond, body) -> case eval(c, cond) of
      [c, condRes] -> if condRes then evalList(c, {body, w}) else [c, None] fi
    esac
    | DoWhile(body, cond) -> case eval(c, body) of
      [c, _] -> eval(c, While(cond, body))
    esac
    | Var(x)              -> [c, s(x)]
    | Ref(x)              -> [c, x]
    | Const(n)            -> [c, n]
    | Binop(op, l, r)     -> case evalList(c, { l, r }) of
      [c, { eL, eR }] -> [c, evalOp(op, eL, eR)]
    esac
    | Ignore(e)           -> case eval(c, e) of
      [c, _] -> [c, None]
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr(input, expr) {
--   failure("%s\n", expr.string);
  case eval([emptyState, createWorld(input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
