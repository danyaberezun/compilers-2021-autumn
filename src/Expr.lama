-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
  Var (x) -> [c, s(x)]
  | Const (x) -> [c, x]
  | Binop (binop, x1, x2) -> case evalList (c, {x1, x2}) of [c, {x1, x2}] -> [c, evalOp(binop, x1, x2)] esac
  | Assn (name, value) -> case evalList (c, {name, value}) of [[s, w], {name, value}] -> [[s <- [name, value], w], value] esac
  | Seq (first, second) -> case evalList (c, {first, second}) of [c, {first, second}] -> [c, second] esac
  | Skip -> [c, {}]
  | Read (name) -> case readWorld (w) of [value, w] -> [[s <- [name, value], w], {}] esac
  | Write (value) -> case eval (c, value) of [[s, w], value] -> [[s, writeWorld(value, w)], {}] esac
  | If (cond, body1, body2) -> case eval (c, cond) of [c, cond] -> if cond then eval(c, body1) else eval(c, body2) fi esac
  | While (cond, body) -> case eval (c, cond) of [c, new_cond] -> if new_cond then eval (c, Seq (body, While (cond, body))) else [c, {}] fi esac
  | DoWhile (body, cond) -> eval (c, Seq (body, While (cond, body)))
  | Ref (name) -> [c, name]
  | Ignore (name) -> case eval (c, name) of [c, _] -> [c, {}] esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
