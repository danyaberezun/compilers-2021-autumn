-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (name) -> st(name)
    | Const (value) -> value 
    | Binop (name, e1, e2) -> 
      var res1 = evalExpr(st, e1);
      var res2 = evalExpr(st, e2);
      -- printf("evaalExpr binop %s of (%d, %d)\n", name, res1,  res2);
      case name of
        "+" -> res1 + res2 
      | "-" -> res1 - res2 
      | "*" -> res1 * res2 
      | "/" -> res1 / res2 
      | "%" -> res1 % res2 
      | "==" -> res1 == res2 
      | "!=" -> res1 != res2 
      | "<" -> res1 < res2 
      | ">" -> res1 > res2 
      | "<=" -> res1 <= res2 
      | ">=" -> res1 >= res2 
      | "&&" -> res1 && res2 
      | "!!" -> res1 !! res2 
      esac
  esac
}
