-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun calculateBinaryOperation(operator) {
  case operator of
    "+" -> fun (x, y){x + y}
  | "-" -> fun (x, y){x - y}
  | "*" -> fun (x, y){x * y}
  | "/" -> fun (x, y){x / y}
  | "%" -> fun (x, y){x % y}
  | "==" -> fun (x, y){x == y}
  | "!=" -> fun (x, y){x != y}
  | "<" -> fun (x, y){x < y}
  | "<=" -> fun (x, y){x <= y}
  | ">" -> fun (x, y){x > y}
  | ">=" -> fun (x, y){x >= y}
  | "&&" -> fun (x, y){x && y}
  | "!!" -> fun (x, y){x !! y}
  | _ -> failure("Operator %s not implemented\n", operator)
  esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var (v) -> st (v) |
    Const (c) -> c |
    Binop (operator, expr1, expr2) -> calculateBinaryOperation(operator)(evalExpr(st, expr1), evalExpr(st, expr2)) |
    _ -> failure("Expr %s not implemented\n", expr)
  esac
}
