-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
    case expr of
      Var (v) -> [c, Val (s (v))]
    | Const (v) -> [c, Val (v)]
    | Ref (x) -> [c, Ref (x)]
    | Seq (e1, e2) ->
      case eval (c, e1) of
        [cn, _] -> eval (cn, e2)
      esac
    | Ignore (e) ->
      case eval (c, e) of
        [cn, _] -> [cn, Void]
      esac
    | Skip -> [c, Void]
    | Read (e) ->
      case eval (c, e) of
        [[sn, wn], Ref (x)] ->
          case readWorld (wn) of
	    [v, wnn] -> [[sn <- [x, v], wnn], Void]
	  esac
      esac
    | Write (e) ->
      case eval (c, e) of
        [[sn, wn], Val (v)] -> [[sn, writeWorld (v, wn)], Void]
      esac
    | Assn (ex, ev) ->
      case eval (c, ex) of
        [cn, Ref (x)] ->
	  case eval (cn, ev) of
	    [[sn, wn], Val (v)] -> [[sn <- [x, v], wn], Val (v)]
	  esac
      esac
    | Binop (op, el, er) ->
      case eval (c, el) of
        [cn, Val (vl)] ->
	  case eval (cn, er) of
	    [cnn, Val (vr)] -> [cnn, Val (evalOp (op, vl, vr))]
	  esac
      esac
    | While (e,  s) ->
      while case eval (c, e) of [cn, Val (v)] -> c := cn; v esac do
      	    c := eval (c, s).fst
      od;
      [c, Void]
    | DoWhile (s, e) ->
      do
        c := eval (c, s).fst
      while case eval (c, e) of [cn, Val (v)] -> c := cn; v esac od;
      [c, Void]
    | If (e, s1, s2) ->
      if case eval (c, e) of [cn, Val (v)] -> c := cn; v esac then
         eval (c, s1)
      else
         eval (c, s2)
      fi
    | _ -> failure ("evalExpr not implemented: %s\n", expr.string)
    esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
