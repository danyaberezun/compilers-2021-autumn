-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  fun applyAssign(c, lvalue, rvalue) {
    case evalList(c, {lvalue, rvalue}) of 
        [c, {to, from}] -> case to of
            Ref(name) -> case c of 
                [s, w] -> [[s <- [name, from], w], from]
            esac
        esac 
    esac
  }

  fun applySeq(c, first, second) {
    case evalList(c, {first, second}) of 
        [c, {_, result}] -> [c, result]
    esac
  }

  fun applyBinop(c, op, lhs, rhs) {
    case evalList(c, {lhs, rhs}) of 
        [c, {lhsRes, rhsRes}] -> [c, evalOp(op, lhsRes, rhsRes)]
    esac 
  }

  fun applyRead([s, w], name) {
    case readWorld(w) of 
      [value, newWorld] ->  [[s <- [name, value], newWorld], None]
    esac 
  }

  fun applyWrite(c, expr) {
    case eval(c, expr) of 
        [c, result] -> case c of
            [s, w] -> [[s, writeWorld(result, w)], None]
        esac
    esac
  }

  fun applyIf(c, condition, thenExpr, elseExpr) {
    case eval(c, condition) of 
        [c, flag] -> if flag then 
                         eval(c, thenExpr)
                     else
                         eval(c, elseExpr)
                     fi
    esac
  }

  fun applyWhile(c@[st, world], condition, body) {
    case eval(c, condition) of 
        [c, flag] -> if flag then 
                         case eval(c, body) of
                              [c, _] -> applyWhile(c, condition, body)
                         esac
                     else
                         [c, None]
                     fi
    esac
  }

  fun applyDoWhile(c, condition, body) {
    case eval(c, body) of
        [c, _] -> applyWhile(c, condition, body)
    esac
  }

  fun applyIgnore(c, expr) {
    case eval(c, expr) of 
        [c, _] -> [c, None]
    esac
  }

  fun evalInScope(c@[s, w], defs, expr) {

    fun constructScope(s, defs) {
      foldr (fun(s, def) {
        case def of 
            Var(names)      -> addNames(s, names)
          | Fun(name, args, body) -> addFunction(s, name, args, body)  
        esac
      }, enterScope(s), defs)
    }

    case defs of 
        {} -> eval(c, expr)
      | _  -> case eval([constructScope(s, defs), w], expr) of 
                  [[s, w], v] -> [[leaveScope(s), w], v] 
              esac
    esac
  } 

  fun applyCall(c@[s, w], name, args) {

    fun addArgs(s, args, vals) {
      foldr ( fun (s, [arg, value]) {
        addName(s, arg, value)
      }, s, zip(args, vals))
    }

    case lookup(s, name) of 
        Fun(formalArgs, body) -> case evalList(c, args) of 
            [[s1, w1], vals] -> case eval([addArgs(enterFunction(s), formalArgs, vals), w], body) of 
                [[s2, w2], res] -> [[leaveFunction(s1, getGlobal(s2)), w2], res]
            esac    
        esac 
    esac
  } 

  --  printf("`%s`\n", expr.string);

  case expr of
      Const(value)                       -> [c, value]
    | Var(name)                          -> [c, lookup(s, name)]
    | Ref(name)                          -> [c, Ref(name)]
    | Binop(op, lhs, rhs)                -> applyBinop(c, op, lhs, rhs)
    | Skip                               -> [c, None]
    | Assn(lvalue, rvalue)               -> applyAssign(c, lvalue, rvalue)
    | Seq(first, second)                 -> applySeq(c, first, second)
    | Read(name)                         -> applyRead(c, name)
    | Write (expr)                       -> applyWrite(c, expr)
    | If (condition, thenExpr, elseExpr) -> applyIf(c, condition, thenExpr, elseExpr)
    | While (condition, body)            -> applyWhile(c, condition, body)
    | DoWhile (body, condition)          -> applyDoWhile(c, condition, body)
    | Ignore (expr)                      -> applyIgnore(c, expr)
    | Scope (defs, expr)                 -> evalInScope(c, defs, expr)
    | Call (name, args)                  -> applyCall(c, name, args)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}