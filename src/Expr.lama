-- Expression evaluator

import List;
import State;
import World;
import InterpretUtils;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

-- returns state and value 
-- value = V
--         I (value)
--         R (name)
fun eval (c@[s, w], expr) {
  case expr of
    Var (name) -> [c, I (s (name))]
  | Const (value) -> [c, I (value)]
  | Binop (op, l, r) -> 
    case eval (c, l) of [c, I (l)] ->
      case eval (c, r) of [c, I (r)] ->
        [c, I (opValue (op) (l, r))]
      esac
    esac
  | Assn (eName, eValue) -> 
    case eval (c, eName) of [c, R (name)] ->
      case eval (c, eValue) of [[s, w], v@I (value)] -> 
        [[s <- [name, value], w], v]
      esac
    esac
  | Seq (e1, e2) -> 
    case eval (c, e1) of [c, V] ->
      eval (c, e2)
    esac
  | Skip -> [c, V]
  | Read (eName) ->
    case eval (c, eName) of [[s, w], R (name)] ->
      case readWorld (w) of [value, w] -> 
        [[s <- [name, value], w], V]
      esac
    esac
  | Write (eValue) -> 
    case eval (c, eValue) of [[s, w], I (value)] ->
      case writeWorld (value, w) of w -> 
        [[s, w], V]
      esac
    esac
  | If (eCond, eThen, eElse) -> 
   case eval (c, eCond) of [c, I (value)] ->
    if value
    then eval (c, eThen)
    else eval (c, eElse) 
    fi
   esac
  | While (eCond, eLoop) -> eval (c, Ignore (If (eCond, Seq (eLoop, expr), Skip)))
  | DoWhile (eLoop, eCond) -> eval (c, Seq (eLoop, While (eCond, eLoop)))
  | Var (name) -> [c, I (s (name))]
  | Ref (name) -> [c, R (name)]
  | Ignore (e) -> 
    case eval (c, e) of [c, _] ->
      [c, V]
    esac
  esac
}
