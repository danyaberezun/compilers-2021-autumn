-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
      Assn (e1, e2) -> 
        case evalList (c, {e1, e2}) of
          [[st, w], Ref (x) : v : _] -> [[st <- [x, v], w], v]
        esac
    | Seq (e1, e2) -> eval(eval(c, e1)[0], e2)
    | Skip -> [c, T]
    | Read (x) -> 
        case readWorld(w) of 
          [v, w] -> [[st <- [x, v], w], T]
        esac
    | Write (e) -> 
        case eval(c, e) of
          [[st, w], v] -> [[st, writeWorld(v, w)], T]
        esac
    | If (e, s1, s2) -> 
        case eval(c, e) of 
          [c, v] -> if v 
                    then eval (c, s1)
                    else eval (c, s2)
                    fi
        esac
    | While (e, s1) -> 
        case eval(c, e) of
          [c, v] -> if v 
                    then eval (c, Seq (s1, expr))
                    else [c, T]
                    fi
        esac 
    | DoWhile (s1, e) -> eval(eval(c, s1)[0], While(e, s1))
    | Var (x) -> [c, st(x)]
    | Ref (x) -> [c, Ref (x)]
    | Const (n) -> [c, n]
    | Binop (op, l, r) -> 
        case evalList(c, {l, r}) of
          [c, l : r : _] -> [c, evalOp(op, l, r)]
        esac
    | Ignore (e) -> [eval(c, e)[0], T]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
