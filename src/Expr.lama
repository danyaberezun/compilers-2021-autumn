-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (x) -> st (x)
  | Const (n) -> n
  | Binop (op, l, r) ->
    (var a = evalExpr (st, l);
    var b = evalExpr (st, r);
    case op of
      "+" -> a + b
    | "-" -> a - b
    | "/" -> a / b
    | "%" -> a % b
    | "*" -> a * b
    | "<" -> a < b
    | ">" -> a > b
    | "<=" -> a <= b
    | ">=" -> a >= b
    | "==" -> a == b
    | "!=" -> a != b
    --| "&&" -> a && b
    --| "|" -> a | b
    esac)
  esac
}

--printf ("%d", evalExpr (0, Binop ("/", Const (5), Const (2))))