-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

fun eval (c@[st, w], expr) {
  case expr of
    Assn (v, e) -> [st <- [v, eval (st, e)], w]
  | Seq (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
  | Skip -> c
  | Read (v) -> [st <- [v, readWorld (w).fst], readWorld (w).snd]
  | Write (e) -> [st, writeWorld (eval (st, e), w)]
  | If (p, pb, nb) -> if eval (st, p) != 0 then eval (c, pb) else eval (c, nb) fi
  | While (p, b) -> if eval (st, p) == 0 then c else eval (eval (c, b), While (p, b)) fi
  | DoWhile (b, p) -> eval (eval (c, b), While (p, b))
  | Var (s) -> st(s)
  -- | Ref (s) -> TODO
  | Const (x) -> x
  | Binop (op, e1, e2) -> evalOp(op, eval(st, e1), eval(st, e2))
  -- | Ignore (e) -> TODO
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
