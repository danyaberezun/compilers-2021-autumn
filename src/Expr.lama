-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

public fun binop (op) {
  case ops.assoc (op) of
    Some (f) -> f
  | _        -> failure ("unknown operator") 
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[state, world], expr) {
  case expr of
    Assn    (l, r) ->
      case evalList (c, {l, r}) of
        [[st1, w1], {Ref (x), v}] -> [[st1 <- [x, v], w1], v]
      esac
  | Seq     (e1, e2) ->
      case eval (c, e1) of
        [cc, _] -> eval (cc, e2)
      esac
  | Skip             -> [c, Bot]
  | Read    (x)      -> var zw = readWorld (world), z = zw.fst, w = zw.snd; [[state <- [x, z], w], Bot]
  | Write   (e)      ->
      case eval (c, e) of
        [[st1, w1], v] -> [[st1, writeWorld (v, world)], Bot]
      esac
  | If      (e, s1, s2) ->
      case eval (c, e) of
        [cc, v] -> if v == 0 then eval (cc, s2) else eval (cc, s1) fi
      esac
  | While   (e, s) ->
      case eval (c, e) of
        [cc, v] -> if v == 0
                   then [cc, Bot]
                   else case eval (cc, s) of
                          [cc, _] -> eval (cc, While (e, s))
                        esac
                   fi
      esac
  | DoWhile (s, e) -> eval (c, Seq (s, While (e, s)))
  | Var     (v) -> [c, state (v)]
  | Ref     (r) -> [c, Ref (r)]
  | Const   (n) -> [c, n]
  | Binop   (op, l, r) ->
      case evalList (c, {l, r}) of
        [c0, {w, v}] -> [c0, evalOp (op, w, v)]
      esac
  | Ignore  (e) ->
      case eval (c, e) of
        [cc, _] -> [cc, Bot]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
