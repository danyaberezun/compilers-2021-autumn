-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

fun evalOp (op, l, r) {
  case op of
    "+" -> l + r
  | "-" -> l - r 
  | "*" -> l * r 
  | "/" -> l / r 
  | "%" -> l % r 
  | ">" -> l > r 
  | "<" -> l < r 
  | "<=" -> l <= r 
  | "==" -> l == r 
  | "!=" -> l != r
  | ">=" -> l >= r  
  | _   -> failure("undefined operator ""%s""\n", op)
  esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var (s) -> st (s)
  | Const (n) -> n
  | Binop (op, l, r) -> evalOp (op, evalExpr (st, l), evalExpr (st, r))
  esac
}
