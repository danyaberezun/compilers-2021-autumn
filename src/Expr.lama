-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (s1, s2) ->
      case evalList (c, {s1, s2}) of
        [[s, w], { Ref (x), n }] ->
          [[s <- [x, n], w], n]
      esac
  | Seq (s1, s2) ->
      case evalList(c, {s1, s2}) of
        [c, {_, r}] -> [c, r]
      esac
  | Skip -> [c, Bottom]
  | Read (x) ->
      case readWorld (w) of
        [n, w] -> [[s <- [x, n], w], Bottom]
      esac
  | Write (e) ->
      case eval(c, e) of
        [[s, w], n] ->  [[s, writeWorld (n, w)], Bottom]
      esac
  | If (e, s1, s2) ->
      case eval(c, e) of
        [c, n] -> if n then eval (c, s1) else eval (c, s2) fi
      esac
  | While (e, s) ->
      while case eval (c, e) of [newC, b] -> c := newC; b esac do
        c := fst (eval (c, s))
      od;
      [c, Bottom]
  | DoWhile (s, e) ->
      do
        c := fst (eval (c, s))
      while case eval (c, e) of [newC, b] -> c := newC; b esac od;
      [c, Bottom]
  | Var (x) ->
      [c, lookup (s, x)]
  | r@Ref (x) ->
      [c, r]
  | Const (x) -> [c, x]
  | Binop (op, s1, s2) ->
      case evalList (c, { s1, s2 }) of
        [c, {l, r}] ->
          [c, evalOp (op, l, r)]
      esac
  | Call (f, args) ->
      checkFun (s, f);
      case evalList (c, args) of
        [[s, w], args] ->
          case lookup (s, f) of
            Fun (argNames, body) ->
              var funS = foldl(fun (s, [name, v]) { addName(s, name, v) }, enterFunction (s), zip (argNames, args));
              case eval ([funS, w], body) of
                [[funS, w], v] -> [[leaveFunction (s, getGlobal (funS)), w], v]
              esac
          esac
      esac
  | Scope (defs, es) ->
      case enterScope (s) of
        s ->
          s := foldl (fun(s, e) {
            case e of
              Var (names) -> addNames (s, names)
            | Fun (name, args, body) -> addFunction(s, name, args, body)
            esac
          }, s, defs);
          case eval ([s, w], es) of
            [[s, w], v] -> [[leaveScope(s), w], v]
          esac
      esac
  | Ignore (e) ->
    case eval (c, e) of
      [c, _] -> [c, Bottom]
    esac
  | e -> failure("unknown expr: " ++ string (e))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}