-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

--fun eval (c@[s, w], expr) {
--  failure ("evalExpr not implemented\n")

fun prisv (a, x, [st, w]) {
	[st <- [a, x], w]
}

fun read (a, [st, w]) {
	var res = readWorld(w);
	[st <- [a, res[0]], res[1]] 
}

fun while_func(expr, stmt, c) {
	while evalExpr(c[0], expr) do 
		c:=eval(c, stmt) 
	od;
	c
}

fun do_while_func(expr, stmt, c) {
	do 
		c:=eval(c, stmt) 
	while evalExpr(c[0], expr) 
	od;
	c
}

fun eval (c, expr) {
	case expr of
		Skip -> c |
		Assn(a, expr1) -> prisv(a, evalExpr(c[0], expr1), c) |
		Seq(expr1, expr2) -> eval(eval(c, expr1), expr2) |
		Read(a) -> read(a, c) |
		Write(expr1) -> [c[0], writeWorld(evalExpr(c[0], expr1), c[1])] |
		If(expr1, expr2, expr3) -> if evalExpr(c[0],expr1) then eval(c, expr2) else eval(c, expr3) fi |
		While(expr1, expr2) -> while_func(expr1, expr2, c) |
		DoWhile(expr2, expr1) -> do_while_func(expr1, expr2, c) |  
		Const(a) -> a |
		Var(a) -> c[0](a) |
		Binop(a, expr1, expr2) ->
			case a of
				"+" -> eval(c[0], expr1) + eval(c[0], expr2) |
				"-" -> eval(c[0], expr1) - eval(c[0], expr2) |
				"*" -> eval(c[0], expr1) * eval(c[0], expr2) |
				"/" -> eval(c[0], expr1) / eval(c[0], expr2) |
				"%" -> eval(c[0], expr1) % eval(c[0], expr2) |
				"<" -> eval(c[0], expr1) < eval(c[0], expr2) |
				">" -> eval(c[0], expr1) > eval(c[0], expr2) |
				"<=" -> eval(c[0], expr1) <= eval(c[0], expr2) |
				">=" -> eval(c[0], expr1) >= eval(c[0], expr2) |
				"==" -> eval(c[0], expr1) == eval(c[0], expr2) |
				"!=" -> eval(c[0], expr1) != eval(c[0], expr2) |
				"&&" -> eval(c[0], expr1) && eval(c[0], expr2) |
				"!!" -> eval(c[0], expr1) !! eval(c[0], expr2)
			esac |
		_ -> failure("The expression is not recognized!")

	esac
}


public fun evalExprOld (st, expr) {
	case expr of
		Const(a) -> a |
		Var(a) -> st(a) |
		Binop(a, expr1, expr2) ->
			case a of
				"+" -> evalExpr(st, expr1) + evalExpr(st, expr2) |
				"-" -> evalExpr(st, expr1) - evalExpr(st, expr2) |
				"*" -> evalExpr(st, expr1) * evalExpr(st, expr2) |
				"/" -> evalExpr(st, expr1) / evalExpr(st, expr2) |
				"%" -> evalExpr(st, expr1) % evalExpr(st, expr2) |
				"<" -> evalExpr(st, expr1) < evalExpr(st, expr2) |
				">" -> evalExpr(st, expr1) > evalExpr(st, expr2) |
				"<=" -> evalExpr(st, expr1) <= evalExpr(st, expr2) |
				">=" -> evalExpr(st, expr1) >= evalExpr(st, expr2) |
				"==" -> evalExpr(st, expr1) == evalExpr(st, expr2) |
				"!=" -> evalExpr(st, expr1) != evalExpr(st, expr2) |
				"&&" -> evalExpr(st, expr1) && evalExpr(st, expr2) |
				"!!" -> evalExpr(st, expr1) !! evalExpr(st, expr2)
			esac |
		_ -> failure("The expression is not recognized!")
	esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
