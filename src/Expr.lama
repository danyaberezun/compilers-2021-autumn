-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

fun doBinop(op, l, r) {
  if compare(op, "+") == 0 then l + r
  elif compare(op, "-") == 0 then l - r
  elif compare(op, "*") == 0 then l * r
  elif compare(op, "/") == 0 then l / r
  elif compare(op, "%") == 0 then l % r
  elif compare(op, "==") == 0 then l == r
  elif compare(op, "!=") == 0 then l != r
  elif compare(op, "<") == 0 then l < r
  elif compare(op, "<=") == 0 then l <= r
  elif compare(op, ">") == 0 then l > r
  elif compare(op, ">=") == 0 then l >= r
  elif compare(op, "&&") == 0 then l && r
  elif compare(op, "!!") == 0 then l !! r
  fi
}

public fun evalExpr (st, expr) {
  case expr of
    Var (ident) -> st(ident)
    | Const (i) -> i
    | Binop (op, lexpr, rexpr) -> doBinop(op, evalExpr(st, lexpr), evalExpr(st, rexpr))
  esac
}
