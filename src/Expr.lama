-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any) and a value
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)
fun eval(c@[s, w], expr) {
  case expr of
      Var(x)                -> [c, s(x)]
    | Const(x)              -> [c, x]
    | Ref(x)                -> [c, Ref(x)]
    | Binop (op, e1, e2)    -> case evalList(c, { e1, e2 }) of [c, { x, y }] -> [c, evalOp(op, x, y)] esac
    | Skip                  -> [c, None]
    | Assn(l, r)            -> case evalList(c, { l, r }) of [[s, w], { Ref(l), r }] -> [[s <- [l, r], w], r] esac
    | Read(x)               -> (
      var readRes = readWorld(w);
      [[s <- [x, readRes.fst], readRes.snd], None]
    )
    | Write(e)              -> case eval(c, e) of [[s, w], e] -> [[s, writeWorld(e, w)], None] esac
    | Seq(e1, e2)           -> case eval(c, e1) of [c, _] -> eval(c, e2) esac
    | If(e, e1, e2)         -> case eval(c, e) of [c, e] -> if e then eval(c, e1) else eval(c, e2) fi esac
    | loop@While(e, stmt)   -> case eval(c, e) of
      [c, e] -> if e
        then case eval(c, stmt) of [c, _] -> eval(c, loop) esac
        else [c, None]
      fi
    esac
    | loop@DoWhile(stmt, e) -> eval(c, Seq(stmt, While(e, stmt)))
    | Ignore(e)             -> case eval(c, e) of [c, e] -> [c, None] esac
  esac
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
