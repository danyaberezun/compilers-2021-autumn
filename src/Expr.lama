-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun unwrapVal (x) {
  case x of Val (x) -> x esac
}

fun lookupUnwrapVal (state, name) {
  unwrapVal (lookupVal (state, name))
}

fun eval (c@[s, w], expr) {
  -- printf ("Eval %s\n", string (expr));
  case expr of
    Skip -> [c, Z]
  | Scope (defs, expr) ->
      var s1 = foldl (fun (s, def) {
        case def of
          Var (names) -> addNames (s, names)
        | Fun (name, args, body) -> addFunction (s, name, args, body)
        | _ -> failure (sprintf ("%s unimplemented", def.string))
        esac
      }, enterScope (s), defs);
      case eval ([s1, w], expr) of
        [[s, w], x] -> [[leaveScope (s), w], x]
      esac
  | Ignore (expr) ->
      case eval (c, expr) of
        [c, _] -> [c, Z]
      esac
  | Seq (lhs, rhs) ->
      case evalList (c, {lhs, rhs}) of
        [c, {lhs, rhs}] -> [c, rhs]
      esac
  | Assn (lhs, rhs) ->
      case evalList (c, {lhs, rhs}) of
        [[s, w], {lhs, rhs}] -> [ [s <- [lhs, Val (rhs)], w], rhs ]
      esac
  | Set (name, expr) ->
      case eval (c, expr) of
        [[s, w], x] -> [ [s <- [name, Val (x)], w], x ]
      esac
  | Var (name) -> [c, lookupUnwrapVal (s, name)]
  | Ref (name) -> [c, name]
  | Const (x) -> [c, x]
  | Binop (op, lhs, rhs) ->
      case evalList (c, {lhs, rhs}) of
        [c, {lhs, rhs}] -> [c, evalOp (op, lhs, rhs)]
      esac
  | If (cond, bodyThen, bodyElse) ->
      case eval (c, cond) of [c, condVal] ->
        if condVal
        then eval (c, bodyThen)
        else eval (c, bodyElse)
        fi
      esac
  | lp@While (cond, body) ->
      case eval (c, cond) of [c, condVal] ->
        if condVal
        then eval (c, Seq (body, lp))
        else [c, Z]
        fi
      esac
  | DoWhile (cond, body) -> eval (c, Seq (body, While (cond, body)))
  | Call (name, argExprs) ->
      case evalList (c, argExprs) of [c@[s, w], argVals] ->
        case lookupFun (s, name) of
          Fun (argNames, External) ->
            case evalBuiltin (name, argVals, w) of
              [x, w] -> [[s, w], x]
            esac
        | Fun (argNames, body) ->
            var s1 = foldl (
              fun (s, [name, x]) { s <- [name, Val (x)] }
            , addNames (enterFunction (s), argNames)
            , zip (argNames, argVals)
            );
            case eval ([s1, w], body) of [[s1, w], x] ->
              [[leaveFunction (s, getGlobal (s1)), w], x]
            esac
        esac
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
