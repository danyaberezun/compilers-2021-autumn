-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (variable) -> st(variable)
    | Const (const) -> const
    | Binop (op, expr1, expr2) -> evalBinOp(op, evalExpr(st, expr1), evalExpr(st, expr2))
  esac
}

public fun evalBinOp (op, var1, var2) {
  case op of
    "+" -> var1 + var2
    | "-" -> var1 - var2
    | "*" -> var1 * var2
    | "/" -> var1 / var2
    | "%" -> var1 % var2
    | "<" -> var1 < var2
    | ">" -> var1 > var2
    | "<=" -> var1 <= var2
    | ">=" -> var1 >= var2
    | "==" -> var1 == var2
    | "!=" -> var1 != var2
    | "&&" -> var1 && var2
    | "!!" -> var1 !! var2
    | _ -> failure("operation is not supported")
  esac
}

--failure("%s\n\n\n", evalExpr(emptyState, Const (2)).string)