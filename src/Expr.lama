-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalOp(re1, re2, type) {
  case type of
      "+"  ->  re1 + re2
    | "-"  ->  re1 - re2
    | "*"  ->  re1 * re2
    | "/"  ->  re1 / re2
    | "%"  ->  re1 % re2
    | "<"  ->  re1 < re2
    | "<=" ->  re1 <= re2
    | ">"  ->  re1 > re2
    | ">=" ->  re1 >= re2
    | "==" ->  re1 == re2
    | "!=" ->  re1 != re2
    | "!!" ->  re1 !! re2
    | "&&" ->  re1 && re2
  esac
}

public fun evalExpr (st, expr) {
  case expr of
      Const (value)        -> value
    | Var   (name)         -> st(name)
    | Binop (type, e1, e2) -> (
      var re1 = evalExpr(st, e1);
      var re2 = evalExpr(st, e2);
      evalOp(re1, re2, type)
    )
  esac
}