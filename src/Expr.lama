-- Expression evaluator

import List;
import State;

public fun evalOp(op, val1, val2) {
  case op of
      "+" -> val1 + val2
    | "-" -> val1 - val2
    | "*" -> val1 * val2
    | "/" -> val1 / val2
    | "%" -> val1 % val2
    | ">" -> val1 > val2
    | "<" -> val1 < val2
    | "<=" -> val1 <= val2
    | ">=" -> val1 >= val2
    | "==" -> val1 == val2
    | "!=" -> val1 != val2
    | _ -> failure("No such op %s", op)
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
      Var (s) -> st(s)
    | Const (i) -> i
    | Binop (op, arg1, arg2) -> evalOp(op, evalExpr(st, arg1), evalExpr(st, arg2))
  esac
}
