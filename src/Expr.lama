-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  -- printf("Called evalBinop %s (%d, %d)\n", op, l, r);
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         | +
--        Seq     (expr, expr)         | +
--        Skip                         | +
--        Read    (string)             | +   
--        Write   (expr)               | +
--        If      (expr, expr, expr)   | +
--        While   (expr, expr)         | +
--        DoWhile (expr, expr)         | +
--        Var     (string)             | +
--        Ref     (string)             | +
--        Const   (int)                |
--        Binop   (string, expr, expr) | 
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

-- Seq (Read ("x"), Write (If (Var ("x"), Const (3), Const (5))))
-- return [c, value]
fun eval (c@[s, w], expr) {
  -- var printExpr = case expr of
    -- 1 -> 2
    -- esac;
  case expr of
    Ignore(subExpr) -> 
      case eval(c, subExpr) of
        [c, value] -> [c, {}]
      esac
    | 
    Assn (varExpr, valueExpr) ->
      -- printf("Evaled assn\n");
      case eval(c, varExpr) of
        [c, variable] -> 
        -- printf("about to eval rExpr\n");
        case eval(c, valueExpr) of 
          [[s, w], value] -> 
            -- printf("evaled rExpr\n");
            [[s <-[variable, value], w], value]
        esac
      esac
    | Seq(expr1, expr2) ->
      case eval(c, expr1) of
        [c, _] -> 
          -- printf("Evaled first expr in seq\n");
          eval(c, expr2)
      esac
    | Skip -> [c, {}] -- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    | Read(string) -> case readWorld(w) of
      [readValue, newWorld] ->
        [[s <- [string, readValue], newWorld], {}]
      esac
    | Write(expr) ->
      -- printf("eval Write\n");
      case eval(c, expr) of
        [[s, w], value] -> [[s,  writeWorld(value, w)], {}]
      esac
    | If(condExpr, bodyExpr, elseBodyExpr) -> 
        case eval(c, condExpr) of 
          [c, cond] -> if cond then eval(c, bodyExpr) else eval(c, elseBodyExpr) fi
        esac
    | While(condExpr, bodyExpr) -> 
        case eval(c, condExpr) of
          [c, cond] -> case cond of
            0 -> [c, {}]
          | _ -> case eval(c, bodyExpr) of
              [c, _] -> eval(c, While(condExpr, bodyExpr))
            esac
        esac
          -- [c, cond] -> if cond then [c, {}] else eval(c, While(condExpr, bodyExpr)) fi
        esac
    | DoWhile(condExpr, bodyExpr) -> 
      var nextC = eval(c, bodyExpr)[0];
      eval(nextC, While(condExpr, bodyExpr))
    | Var(variable) -> 
      -- printf("eval Var\n");
      [c, s(variable)]
    | Ref(variable) -> 
      -- printf("Evaled Ref\n");
      [c, variable]
    | Const(value) -> 
      -- printf("Evaled const!\n");
      [c, value]
    | Binop(binop, lExpr, rExpr) ->
      -- printf("Evaled binop\n"); 
      case eval(c, lExpr) of
        [c, lValue] -> 
        -- printf("Evaled lValue\n");
        case eval(c, rExpr) of
          [c, rValue] -> [c, evalOp(binop, lValue, rValue)]
        esac
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
