-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

public fun calcBinop(op, l, r) {
  case op of
     "+" -> l + r 
  |  "-" -> l - r 
  |  "*" -> l * r 
  |  "/" -> l / r 
  |  "%" -> l % r 
  |  "==" -> l == r 
  |  "!=" -> l != r 
  |  "<" -> l < r 
  |  "<=" -> l <= r 
  |  ">" -> l > r 
  |  ">=" -> l >= r 
  |  "&&" -> l && r 
  |  "!!" -> l !! r
  esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var (s) -> s.st 
  | Const(v) -> v  
  |  Binop(op, l, r) -> calcBinop(op,evalExpr(st,l),evalExpr(st,r))
  esac
}