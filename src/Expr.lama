-- Expression evaluator

import List;
import State;

public fun evalBinop (op, lhsVal, rhsVal) {
  case op of
    "+"  -> lhsVal +  rhsVal
  | "-"  -> lhsVal -  rhsVal
  | "*"  -> lhsVal *  rhsVal
  | "/"  -> lhsVal /  rhsVal
  | "%"  -> lhsVal %  rhsVal
  | "<"  -> lhsVal <  rhsVal
  | ">"  -> lhsVal >  rhsVal
  | "<=" -> lhsVal <= rhsVal
  | ">=" -> lhsVal >= rhsVal
  | "==" -> lhsVal == rhsVal
  | "!=" -> lhsVal != rhsVal
  | "&&" -> lhsVal && rhsVal
  | "!!" -> lhsVal !! rhsVal
  | _    -> failure ("Unknown binop: %s", op) 
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (x)              -> st (x)
  | Const (x)            -> x
  | Binop (op, lhs, rhs) -> evalBinop (op, evalExpr (st, lhs), evalExpr (st, rhs))
  esac
}
