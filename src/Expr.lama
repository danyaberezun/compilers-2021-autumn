-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
    case expr of
      Var(x) -> st(x)
    | Const(c) -> c
    | Binop(oper, x, y) ->
        var left = evalExpr(st, x);
        var right = evalExpr(st, y);
        case oper of
             "+" -> left + right
           | "-" -> left - right
           | "*" -> left * right
           | "/" -> left / right
           | "%" -> left % right
           | "==" -> left == right
           | "!=" -> left != right
           | "<" -> left < right
           | ">" -> left > right
           | "<=" -> left <= right
           | ">=" -> left >= right
           | "&&" -> left && right
           | "!!" -> left !! right
      esac
    esac
}
