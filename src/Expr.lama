-- Expression evaluator

import List;
import State;
import World;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
      Var   (name)      -> st (name)
    | Const (value)     -> value
    | Binop (op, l, r)  -> opValue (op) (evalExpr (st, l), evalExpr (st, r))
    esac
}

public fun opValue (op) {
  case op of
      "+"  -> infix +
	| "-"  -> infix -
	| "*"  -> infix *
	| "/"  -> infix /
	| "%"  -> infix %
	| "==" -> infix ==
	| "!=" -> infix !=
	| "<"  -> infix <
	| "<=" -> infix <=
	| ">"  -> infix >
	| ">=" -> infix >=
	| "&&" -> infix &&
	| "!!" -> infix !!
  esac
}
