-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of 
    Var (s) -> st (s)
  | Const (x) -> x
  | Binop (op, lexpr, rexpr) -> 
      var lhs = evalExpr(st, lexpr);
      var rhs = evalExpr(st, rexpr);
      case op of 
        "+"  -> lhs +  rhs
      | "-"  -> lhs -  rhs
      | "*"  -> lhs *  rhs
      | "/"  -> lhs /  rhs
      | "%"  -> lhs %  rhs
      | "==" -> lhs == rhs
      | "!=" -> lhs != rhs
      | "<"  -> lhs <  rhs
      | "<=" -> lhs <= rhs
      | ">"  -> lhs >  rhs
      | ">=" -> lhs >= rhs
      | "&&" -> lhs && rhs
      | "!!" -> lhs !! rhs
      esac
  esac 
}
