-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
      Assn (Ref (r), e) ->
        case eval (c, e) of [[st, w], e] -> [[st <- [r, e], w], e] esac
    | Assn (r, e)       ->
        case eval (c, r) of 
          [c, Ref (r)] -> case eval (c, e) of [[st, w], e] -> [[st <- [r, e], w], e] esac
        esac
    | Seq (f, s)        ->
        case eval (c, f) of [c, _] -> eval (c, s) esac
    | Skip              -> [c, 0]
    | Read (v)          ->
        case readWorld (w) of [x, w] -> [[st <- [v, x], w], 0] esac
    | Write (e)         ->
        case eval (c, e) of [[st, w], v] -> [[st, writeWorld (v, w)], 0] esac
    | If (e, t, f)      ->
        case eval (c, e) of [c, v] -> eval (c, if v then t else f fi) esac
    | While (e, b)      ->
        case eval (c, e) of
          [c, v] -> if v then eval (eval (c, b)[0], While (e, b)) else [c, 0] fi
        esac
    | DoWhile (b, e)    ->
        case eval (c, b) of
          [c, _] ->
            case eval (c, e) of
              [c, v] -> if v then eval (c, DoWhile (b, e)) else [c, 0] fi
            esac
        esac
    | Var (v)           -> [c, st (v)]
    | Ref (r)           -> [c, Ref (r)]
    | Const (x)         -> [c, x]
    | Binop (op, x, y)  ->
        case eval (c, x) of
          [c, x] -> case eval (c, y) of [c, y] -> [c, evalOp (op, x, y)] esac
        esac
    | Ignore (e)        -> eval (c, e)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
