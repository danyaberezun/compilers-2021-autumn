-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun getOp(op) {
	fun (l, r) {
	  if compare(op, "+") == 0 then l + r
	  elif compare(op, "*") == 0 then l * r
	  elif compare(op, "-") == 0 then l - r
	  elif compare(op, "/") == 0 then l / r
	  elif compare(op, "%") == 0 then l % r
	  elif compare(op, "<") == 0 then l < r
	  elif compare(op, "<=") == 0 then l <= r
	  elif compare(op, "==") == 0 then l == r
	  elif compare(op, "!=") == 0 then l != r
	  elif compare(op, ">=") == 0 then l >= r
	  elif compare(op, ">") == 0 then l > r
	  else failure("unknown op ""%s""\n", op)
	  fi
	} 
}

public fun evalExpr (st, expr) {
  case expr of 
    Var (varName) -> st (varName)
  | Const (x) -> x
  | Binop (op, l, r) -> getOp(op) (evalExpr (st, l), evalExpr (st, r))

  esac
}
