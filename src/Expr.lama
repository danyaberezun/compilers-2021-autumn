-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Var (x) -> [c, lookup(s, x)]
    | Const (x) -> [c, x]
    | Binop (binop, x1, x2) -> case evalList (c, {x1, x2}) of [c, {x1New, x2New}] -> [c, evalOp(binop, x1New, x2New)] esac
    | Assn (name, value) -> case evalList(c, {name, value}) of [[s, w], {nameNew, valueNew}] -> case nameNew of 
      ElemRef(arr, index) -> [[s, w], arr[index] := valueNew]
      | Ref(nameNew) -> [[s <- [nameNew, valueNew], w], valueNew] esac esac
    | Seq (first, second) -> eval(eval(c, first).fst, second)
    | Skip -> [c, None]
    | Read (name) -> case readWorld (w) of [value, wNew] -> [[s <- [name, value], wNew], value] esac
    | Write (value) -> case eval (c, value) of [[sNew, wNew], valueNew] -> [[sNew, writeWorld(valueNew, wNew)], None] esac
    | If (cond, body1, body2) -> case eval (c, cond) of [c, cond] -> if cond then eval(c, body1) else eval(c, body2) fi esac
    | While (cond, body) -> case eval (c, cond) of [c, new_cond] -> if new_cond then eval (c, Seq (body, While (cond, body))) else [c, {}] fi esac
    | DoWhile (body, cond) -> eval (c, Seq (body, While (cond, body)))
    | Ref (name) -> [c, Ref(name)]
    | Ignore (name) -> [eval (c, name).fst, None]
    | Scope (scope, x) -> case enterScope (s) of scopeNew -> 
      var scopeNewNew =  foldl (fun (state, def) {case def of
        Var (name) -> addNames (state, name)
        | Fun (name, args, body) -> addFunction (state, name, args, body) esac}, scopeNew, scope); 
      case eval ([scopeNewNew, w], x) of [[scopeNewNewNew, wNew], res] -> [[leaveScope (scopeNewNewNew), wNew], res] esac esac
    | Call (name, args) -> case evalList(c, args) of [[sNew, wNew], argVals] -> case lookup(sNew, name) of
      Fun (argNames, External) -> case evalBuiltin(name, argVals, wNew) of [result, wNewNew] -> [[sNew, wNewNew], result] esac
      | Fun(argNames, body) -> case enterFunction(sNew) of fName -> case foldl (fun (s, [argNames, argVals]) { addName(s, argNames, argVals)}, fName, zip (argNames, argVals)) of fNameNew -> case eval([fNameNew, wNew], body) of [[fNameNewNew, wNewNew], res] -> [[leaveFunction(sNew, getGlobal(fNameNewNew)), wNewNew], res] esac esac esac esac esac
    | Set (name, expr) -> case eval (c, expr) of [[s, w], value] -> [[s <- [name, value], w], Void] esac
    | String (strg) -> [c, strg]
    | Array (list) -> case evalList (c, list) of [c, elems] -> [c, listArray (elems)] esac
    | Sexp (strg, list) -> case evalList (c, list) of [c, elems] -> [c, Sexp(strg, listArray (elems))] esac
    | Elem (arr, index) -> case eval (c, arr) of 
      [c, Sexp (name, args)] -> case eval (c, index) of [c, indexNew] -> [c, args[indexNew]] esac 
      | [c, arrNew] -> case eval (c, index) of [c, indexNew] -> [c, arrNew[indexNew]] esac esac
    | ElemRef (arr, index) -> case eval (c, arr) of
        [c, arrNew] -> case eval (c, index) of [c, indexNew] -> [c, ElemRef (arrNew, indexNew)] esac
        | [c, Sexp (name, args)] -> case eval (c, index) of [c, indexNew] -> [c, ElemRef (args, indexNew)] esac esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
