-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (x, e) ->
      case evalList (c, {x, e}) of
        [[s, w], {Ref (x), e}] -> [[s <- [x, e], w], e]
      | [[s, w], {ElemRef (a, i), e}] -> a[i] := e; [[s, w], e]
      esac
  | Seq (lhs, rhs) ->
      case eval (c, lhs) of
        [c, _] -> eval (c, rhs)
      esac
  | Skip -> [c, Void]
  | Array (elems) ->
      case evalList (c, elems) of
        [c, elems] -> [c, listArray (elems)]
      esac
  | String (s) ->
      [c, s]
  | Sexp (co, args) ->
      case evalList (c, args) of
        [c, args] -> [c, Sexp (co, listArray(args))]
      esac
  | Subscript (a, i) ->
      case evalList (c, {a, i}) of
        [c, {Sexp (co, args), i}] -> [c, args[i]]
      | [c, {a, i}] -> [c, a[i]]
      esac
  | If (e, t, f) ->
      case eval (c, e) of
        [c, 0] -> eval (c, f)
      | [c, _] -> eval (c, t)
      esac
  | While (e, s) ->
      case eval (c, e) of
        [c, 0] -> [c, Void]
      | [c, _] ->
          case eval (c, s) of
            [c, _] -> eval (c, While (e, s))
          esac
      esac
  | DoWhile (s, e) ->
      case evalList (c, {s, e}) of
        [c, {_, 0}] -> [c, Void]
      | [c, _]      -> eval (c, DoWhile (s, e))
      esac
  | Var (x) -> [c, s.lookup (x)]
  | Ref (Var (x)) -> [c, Ref (x)]
  | ElemRef (Subscript (a, i)) ->
      case evalList (c, {a, i}) of
        [c, {a, i}] -> [c, ElemRef (a, i)]
      esac
  | Const (n) -> [c, n]
  | Binop (op, lhs, rhs) ->
      case evalList (c, {lhs, rhs}) of
        [c, {lhs, rhs}] ->
          [c, evalOp (op, lhs, rhs)]
      esac
  | Ignore (x) -> eval (c, x)
  | Call (f, xs) ->
      case evalList (c, xs) of
        [c, xs] ->
          case s.lookup (f) of
            Fun (args, External) ->
              case evalBuiltin (f, xs, w) of
                [ret, w] ->
                  [[s, w], ret]
              esac
          | Fun (args, body) ->
              var ns = foldl (fun (s, [x, e]) { s.addName(x, e) }, s.enterFunction, zip(args, xs));
              case eval ([ns, w], body) of
                [[ns, w], v] -> [[s.leaveFunction (ns.getGlobal), w], v]
              esac
          esac
      esac
  | Scope (defs, e) ->
      fun f(s, x) {
        case x of
          VDefn (x) -> s.addName(x, 0)
        | FunDefn (f, args, body) -> s.addFunction (f, args, body)
        esac
      }

      var ns = foldl (f, s.enterScope, defs);
      case eval ([ns, w], e) of
        [[s, w], v] -> [[s.leaveScope, w], v]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
