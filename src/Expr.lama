-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  failure ("evalExpr not implemented\n")
}

public fun evalExpr (st, expr) {
  case expr of
    Var   (varName) -> st (varName)       |
    Const (valName) -> valName            |
    Binop (operation, lExpr, rExpr) ->
      evalBinOp(operation,
                evalExpr(st, lExpr),
                evalExpr(st, rExpr))
  esac
}


-- Binary operation evaluator: takes operation, left value and
-- right value, returns result of the operation.

public fun evalBinOp(op, l, r) {
  case op of
    "+" ->  l + r                           |
    "-" ->  l - r                           |
    "*" ->  l * r                           |
    "/" ->  l / r                           |
    "%" ->  l % r                           |
    ">" ->  l > r                           |
    "<" ->  l < r                           |
    "<=" -> l <= r                          |
    ">=" -> l >= r                          |
    "==" -> l == r                          |
    "!=" -> l != r                          |
    "&&" -> l && r                          |
    "!!" -> l !! r                          |
    x -> failure ("Operation"
                  + op
                  + " is not implemented.")
  esac
}
