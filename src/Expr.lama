-- Expression evaluator

import List;
import Collection;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

var m =
 foldl (fun (m, [op, fop]) {addMap (m, op, fop)},
        emptyMap (compare),        
        {["+" , infix + ],
         ["-" , infix - ],
         ["*" , infix * ],
         ["/" , infix / ],
         ["%" , infix % ],
         ["==", infix ==],
         ["!=", infix !=],
         ["<" , infix < ],
         ["<=", infix <=],
         [">" , infix > ],
         [">=", infix >=],
         ["&&", infix &&],
         ["!!", infix !!]}
        );

fun evalOp (op, x, y) {
  case findMap (m, op) of Some (f) -> f (x, y) esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var (value)        -> st (value)
  |	Const (x)          -> x
  |	Binop (fStr, l, r) -> parseBinop (fStr) (evalExpr (st, l), evalExpr (st, r))
  esac
}

public fun parseBinop (op) {
  case op of
    "+" -> fun (l, r) { l + r }
  | "-" -> fun (l, r) { l - r }
  | "*" -> fun (l, r) { l * r }
  | "/" -> fun (l, r) { l / r }
  | "%" -> fun (l, r) { l % r }
  | "<" -> fun (l, r) { l < r }
  | ">" -> fun (l, r) { l > r }
  | "<=" -> fun (l, r) { l <= r }
  | ">=" -> fun (l, r) { l >= r }
  | "==" -> fun (l, r) { l == r }
  | "!=" -> fun (l, r) { l != r }
  | "&&" -> fun (l, r) { l && r }
  | "!!" -> fun (l, r) { l !! r }
  esac
}

