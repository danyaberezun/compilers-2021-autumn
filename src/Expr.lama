-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading the configuration.
-- Returns the final configuration and the list of values.
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalCond (condVal) {
  case condVal of
    Nat (n) -> n
  | _ -> failure ("Cannot have a non-number as a condition\n")
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (lhs, rhs) ->
      case evalList (c, {lhs, rhs}) of
        [[s, w], {Ref (varName), value@(Nat (n))}] ->
          var c = [s <- [varName, n], w];
          [c, value]
      | _ -> failure ("AST ain't well-formed\n")
      esac
  | Seq (e1, e2) ->
      case evalList (c, {e1, e2}) of [c, {_, v2}] ->
        [c, v2]
      esac
  | Skip -> [c, Bot]
  | Read (varName) ->
      case readWorld (w) of [value, w] ->
        [[s <- [varName, value], w], Bot]
      esac
  | Write (expr) ->
      case eval (c, expr) of [c, value] ->
        case value of
          Nat (n) ->
            [[s, writeWorld (n, w)], Bot]
        | _ -> failure ("Cannot write a non-number\n")
        esac
      esac
  | If (condE, thenE, elseE) ->
      case eval (c, condE) of [c, condV] ->
        if evalCond (condV)
          then eval (c, thenE)
          else eval (c, elseE)
        fi
      esac
  | While (condE, bodyE) ->
      var currentC = c;
      while (
        case eval (currentC, condE) of [newC, value] ->
          currentC := newC;
          evalCond (value)
        esac
      ) do
        case eval (currentC, bodyE) of
          [newC, Bot] -> currentC := newC
        | _ -> failure ("While body must be Void")
        esac
      od;
      [currentC, Bot]
  | DoWhile (bodyE, condE) ->
      var currentC = c;
      do
        case eval (currentC, bodyE) of
          [newC, Bot] -> currentC := newC
        | _ -> failure ("DoWhile body must be Void")
        esac
      while (
        case eval (currentC, condE) of [newC, value] ->
          currentC := newC;
          evalCond (value)
        esac
      ) od;
      [currentC, Bot]
  | Var (v) -> [c, Nat (s (v))]
  | Ref (v) -> [c, Ref (v)]
  | Const (n) -> [c, Nat (n)]
  | Binop (op, lhsE, rhsE) ->
      case evalList (c, {lhsE, rhsE}) of [c, {Nat (l), Nat (r)}] ->
        [c, Nat (evalOp (op, l, r))]
      esac
  | Ignore (e) ->
      case eval (c, e) of [c, _] ->
        [c, Bot]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  --printf ("ITS A TV PROGRUM: %s\n", string (expr));
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
