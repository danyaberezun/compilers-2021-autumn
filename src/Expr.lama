-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a bunch of regular variables current scope
fun addArgsValues (state, args, vals) {
  foldl (fun (s, [arg, v]) {s.addName (arg, Var(v))}, state, zip(args, vals))
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun addDefinitions(s, defList) {
  case defList of
    Var(names):defListEnd            -> addNames(addDefinitions(s, defListEnd), names)
  | Fun(name, args, exp):defListEnd  -> addFunction(addDefinitions(s, defListEnd), name, args, exp)
  | _                                -> s
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Var(x)                      -> [c, lookup(s, x).fst]
  | Const(n)                    -> [c, n]
  | Ref(x)                      -> [c, Ref(x)]
  | Ignore(exp)                 -> case eval(c, exp) of
                                    [c, _] -> [c, Void]
                                    esac
  | Skip                        -> [c, Void]
  | Binop(op, exp1, exp2)       -> case evalList(c, {exp1, exp2}) of
                                    [c, val1:val2:_] -> [c, evalOp(op, val1, val2)]
                                    esac
  | Assn(lexp, rexp)            -> case evalList(c, {lexp, rexp}) of
                                    [[s, w], Ref(lval):rval:_ ] -> [[s <- [lval, Var(rval)], w], rval]
                                    esac
  | Seq(exp1, exp2)             -> eval(eval(c, exp1).fst, exp2)
  | Read(x)                     -> case readWorld(w) of 
                                    [n, wr] -> [[s <- [x, Var(n)], wr], Void]
                                    esac
  | Write(exp)                  -> case eval(c, exp) of
                                    [c, v] -> [[c.fst, writeWorld(v, c.snd)], Void]
                                    esac
  | If(exp, expTrue, expFalse)  -> case eval(c, exp) of
                                      [c, 0] -> eval(c, expFalse)
                                    | [c, _] -> eval(c, expTrue)
                                    esac
  | While(exp, expTrue)         -> case eval(c, exp) of
                                      [c, 0] -> [c, Void]
                                    | [c, _] -> eval(eval(c, expTrue).fst, expr)
                                    esac
  | DoWhile(expTrue, exp)       -> case eval(eval(c, expTrue).fst, exp) of
                                      [c, 0] -> [c, Void]
                                    | [c, _] -> eval(c, expr)
                                    esac
  | Scope(defList, exp)         -> case eval([addDefinitions(enterScope(s), defList), w], exp) of
                                      [c, v] -> [[leaveScope(c.fst), c.snd], v] 
                                    esac
  | Call(f, expList)            -> case lookup(s, f) of
                                      Fun(args, exp) ->
                                      case evalList(c, expList) of
                                        [[s1, w], vals] -> 
                                        case eval([addArgsValues(enterFunction(s1), args, vals), w], exp) of
                                          [[s2, w], v] -> [[leaveFunction(s1, getGlobal(s2)), w], v]
                                        esac
                                      esac
                                    esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}