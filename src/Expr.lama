-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDefs (st, defs) {
  foldl (fun (st, d) {
    case d of
      Fun (name, args, body) -> addFunction (st, name, args, body)
    | Var (names) -> addNames (st, names)
    | Val (names) -> addNames (st, names)
    esac
  }, st, defs)
}

fun addArgs (st, names, vals) {
  case [names, vals] of
    [n:ns, v:vs] -> addArgs (addName (st, n, v), ns, vs)
  | _ -> st
  esac
}

fun listMatch(xs, ys) {
  if xs.size != ys.size then
  false 
  else foldl (fun (acc, [x, y]) {
                if acc
                then matches (x, y)
                else false 
                fi
              }, true, zip (xs, ys)
       )
  fi
}

fun matches (scr, x) {
  case x of
    Wildcard      -> 1
  | Named  (_, x) -> matches (scr, x)
  | Const  (n)    -> 
      case scr of
        #val -> scr == n
      | _    -> 0
      esac
  | String (s)    ->
      case scr of
        #str -> compare (scr, s) == 0
      | _    -> false
      esac
  | Array (vals)  -> 
      case scr of
        Array (scr)  -> listMatch (arrayList (scr), arrayList (vals))
      | _            -> false
      esac
  | Sexp (name, vals) ->
      case scr of 
        Sexp (s, xs) -> (compare (s, name) == 0) && listMatch (arrayList (xs), vals)
      | _            -> false
      esac
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Assn  (e1, e2) -> 
      case eval (c, e1) of
        [c, s] ->
          case eval (c, e2) of
            [[st, w], v] ->
              case s of
                ElemRef (arr, i) -> [[st, w], arr[i] := v]
              | _                -> [[st <- [s, v], w], v]
              esac
          esac
      esac
  | Set   (s, e)   -> eval (c, Assn (Ref (s), e))
  | Seq   (e1, e2) ->
      case eval (c, e1) of
        [c, _] -> eval (c, e2)
      esac
  | Skip      -> [c, Void]
  | If    (e, s1, s2) ->
      case eval (c, e) of
        [c, v] -> if v then eval (c, s1) else eval (c, s2) fi
      esac
  | While (e, s) ->
      case eval (c, e) of
        [c, v] -> if v then eval (c, Seq (s, expr)) else [c, Void] fi
      esac
  | DoWhile (s, e) -> eval (c, Seq (s, While (e, s)))
  | Var   (s) -> [c, lookup (st, s)]
  | Ref   (s) -> [c, s]
  | Const (n) -> [c, n]
  | Binop (op, e1, e2) ->
      case eval (c, e1) of
        [c, v1] ->
          case eval (c, e2) of
            [c, v2] -> [c, evalOp (op, v1, v2)]
          esac
      esac
  | Scope (defs, e) ->
      case addDefs (enterScope (st), defs) of
        st -> 
          case eval ([st, w], e) of
            [[st, w], v] -> [[leaveScope (st), w], v]
          esac
      esac
  | Call (s, es) ->
      case evalList (c, es) of
        [[st, w], vals] ->
          case lookup (st, s) of
            Fun (args, body) ->
              case body of
                External -> case evalBuiltin (s, vals, w) of
                              [v, w] -> [[st, w], v]
                            esac
              | _        -> var stF = addArgs (enterFunction (st), args, vals);
                            case eval ([stF, w], body) of
                              [[stF, w], ret] -> [[leaveFunction (st, stF.getGlobal), w], ret]
                            esac
              esac
          esac
      esac
  | Ignore  (e)  -> eval (c, e)
  | String  (s)  -> [c, s]
  | Array   (es) ->
      case evalList (c, es) of
        [c, vals] -> [c, listArray (vals)]
      esac
  | Elem    (e1, e2) ->
      case evalList (c, {e1, e2}) of
        [c, {e, i}] ->
          case e of
            Sexp (s, arr) -> [c, arr[i]]
          | _             -> [c, e[i]]
          esac
      esac
  | ElemRef (e1, e2) ->
      case evalList (c, {e1, e2}) of
        [c, {e, i}] ->
          case e of
            Sexp (s, arr) -> [c, ElemRef (arr, i)]
          | _             -> [c, ElemRef (e, i)]
          esac
      esac
  | Sexp    (s,  es) ->
      case evalList (c, es) of
        [c, vals] -> [c, Sexp (s, listArray (vals))]
      esac
  | Case    (s, brs) ->
      case brs of
        [x, b]:bs -> if   matches (lookup (st, s), x)
                     then eval (c, b)
                     else eval (c, Case (s, bs))
                     fi
      esac      
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
