-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun applyBinop (op, a, b) {
  case op of
      "+" -> a + b
    | "-" -> a - b
    | "*" -> a * b
    | "/" -> a / b
    | "%" -> a % b
    | "==" -> a == b
    | "!=" -> a != b
    | ">" -> a > b
    | "<" -> a < b
    | ">=" -> a >= b
    | "<=" -> a <= b
    | "&&" -> a && b
    | "!!" -> a !! b
    | _ -> failure ("binop ""%s"" is not implemented yet\n", op)
  esac
}

public fun evalExpr (st, expr) {
  case expr of
      Var (s) -> st(s)
    | Const (x) -> x
    | Binop (s, e1, e2) -> applyBinop(s, evalExpr(st, e1), evalExpr(st, e2))
  esac
}
