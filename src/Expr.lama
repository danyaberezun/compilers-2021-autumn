-- Expression evaluator.
import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some(f) -> f(l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration(if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList(c, exprs) {
  case foldl(
    fun([c, vals], e) {
      case eval(c, e) of
        [c, v] -> [c, v : vals]
      esac
    },
    [c, {}],
    exprs
  ) of
    [c, vals] -> [c, reverse(vals)]
  esac
}

fun addDefenitions(state, defs) {
  foldl(
    fun(state, def) {
      case def of
        Fun(name, args, body) -> addFunction(state, name, args, body)
      | Var(names) -> addNames(state, names)
      esac
    },
    state,
    defs
  )
}

fun eval(configuration@[state, world], expr) {
  case expr of
  Var(name) -> [configuration, lookup(state, name)]
  | Ref(name) -> [configuration, Ref(name)]
  | Const(n) -> [configuration, n]
  | Skip -> [configuration, Void]
  | Ignore(e) -> [eval(configuration, e)[0], Void]
  | Assn(l, r) ->
    case eval(configuration, l) of [c1, Ref(x)] ->
      case eval(c1, r) of [c2@[st2, w2], value] ->
        [[st2 <- [x, value], w2], value]
      esac
    esac
  | Seq(left, right) ->
    case eval(configuration, left) of
      [c1, Void] -> eval(c1, right)
    esac
  | Binop(name, l, r) ->
    case eval (configuration, l) of [c1, lRes] ->
      case eval (c1, r) of [c2, rRes] ->
        [c2, evalOp (name, lRes, rRes)]
      esac
    esac
  | Read(e) ->
    case eval(configuration, e) of [c1@[st1, w1], Ref(varName)] ->
      case readWorld(w1) of [varValue, w2] ->
        [[st1 <- [varName, varValue], w2], Void]
      esac
    esac
  | Write(expr) ->
    case eval(configuration, expr) of
      [[state, world], value] -> [[state, writeWorld(value, world)], Void]
    esac
  | If(condition, thenBody, elseBody) ->
    case eval(configuration, condition) of
      [configuration, 0] -> eval(configuration, elseBody)
      | [configuration, _] -> eval(configuration, thenBody)
    esac
  | While(cond, body) ->
    case eval (configuration, cond) of
      [c1, 0] -> [c1, Void]
    | [c1, _] -> case eval(c1, body) of
        [c2, Void] -> eval(c2, While(cond, body))
      esac
    esac
  | DoWhile(body, cond) ->
    case eval(configuration, body) of
     [c1, Void] -> eval(c1, While(cond, body))
    esac
  | Scope(defs, e) -> (
    case eval([addDefenitions(enterScope(state), defs), world], e) of [[st3, w3], eRes] ->
      [[leaveScope (st3), w3], eRes]
    esac
  )
  | Call(funName, argExprs) ->

    fun addArgs(state, argNames, argValues) {
      case [argNames, argValues] of
        [{}, {}] -> state
      | [name:namesTail, value:valuesTail] ->
          addArgs(addName(state, name, value), namesTail, valuesTail)
      esac
    }

    case lookup(state, funName) of Fun(argNames, body) ->
      case evalList(configuration, argExprs) of [[st1, w1], argValues] ->
        var st2 = enterFunction(st1);
        var st3 = addArgs(st2, argNames, argValues);
        case eval([st3, w1], body) of [[st4, w4], funcRes] ->
          var newGlobalScope = getGlobal(st4);
          [[leaveFunction(state, newGlobalScope), w4], funcRes]
        esac
      esac
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr(input, expr) {
  case eval([emptyState(), createWorld(input)], expr) of
    [[_, world], Void] -> getOutput(world)
  | _ -> failure("Non void return")
  esac
}
