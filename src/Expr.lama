-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Var (v)            -> [c, s (v)]
  | Const (n)          -> [c, n]
  | Ref (r)            -> [c, Ref (r)]
  | Binop (op, e1, e2) -> 
      case evalList(c, {e1, e2}) of
        [c, {res1, res2}] -> [c, evalOp(op, res1, res2)]
      esac
  | Assn (ref, e)      ->
      case eval (c, ref) of
        [c, Ref (name)] -> 
          case eval (c, e) of
            [[s, w], res] -> [[s <- [name, res], w], res]
          esac
      esac
  | Seq (e1, e2)       ->
      case evalList(c, {e1, e2}) of
        [c, {_, res}] -> [c, res]
      esac
  | Skip               -> [c, Bottom]
  | Read (name)        ->
      case w of
        [v : tail, out] -> [[s <- [name, v], [tail, out]], Bottom]
      esac
  | Write (e)          ->
      case eval(c, e) of
        [[s, w], res] -> [[s, writeWorld(res, w)], Bottom]
      esac
  | Ignore (e)         ->
      case eval(c, e) of
        [c, _] -> [c, Bottom]
      esac
  | If (e, e_t, e_f)   ->
      case eval(c, e) of
        [c, 0] -> eval(c, e_f)
      | [c, _] -> eval(c, e_t)
      esac
  | While (e, body)    ->
      case eval(c, e) of
        [c, 0] -> [c, Bottom]
      | [c, _] ->
          case eval(c, body) of
            [c, _] -> eval(c, expr)
          esac
      esac
  | DoWhile (body, e)  ->
      case eval(c, body) of
        [c, _] -> eval(c, While (e, body))
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
