-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
     Assn (l, r) -> 
       case evalList(c, {l, r}) of
           [[s, nW], {Ref (n), v}] -> [[s <- [n, v], nW], v]
       esac
    | Var (v) -> [c, s(v)]
    | Const (x) -> [c, x]
    | Binop (op, x, y) -> 
        case evalList(c, {x, y}) of
          [c, {a, b}] -> [c, evalOp(op, a, b)]
        esac
    | Ref (x) -> [c, Ref(x)]
    | Seq (x, y) -> 
      case eval(c, x) of
        [c, _] -> eval(c, y)
      esac
    | Skip -> [c, Bottom]
    | Ignore (x) -> 
        case eval(c, x) of
          [c, v] -> [c, Bottom]
        esac
    | Read (x) -> 
        case readWorld(w) of
          [v, nW] -> [[s <- [x, v], nW], Bottom]
        esac
    | Write (e) -> 
        case eval(c, e) of
          [[s, w], v] -> [[s, writeWorld(v, w)], Bottom]
        esac
    | If (cond, a, b) -> 
      case eval(c, cond) of
        [c, v] -> 
          if v
          then
            eval(c, a)
          else
            eval(c, b)
          fi
      esac
    | While (cond, b) -> 
      case eval(c, cond) of
        [c, 0] -> [c, Bottom]
        | [c, _] -> 
            case eval(c, b) of
              [c, _] -> eval(c, expr)
            esac
      esac
    | DoWhile (b, cond) -> 
      case eval(c, b) of
        [c, _] -> 
          case eval(c, cond) of
            [c, 0] -> [c, Bottom]
            | [c, _] -> eval(c, expr)
          esac
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
