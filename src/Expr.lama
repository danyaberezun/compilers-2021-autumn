-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval(c@[state, world], expr) {
  case expr of
      Assn  (expr1, expr2)            ->
        case evalList(c, { expr1, expr2 }) of
          [[state, world], { x, v }] -> [[state <- [x, v], world], v]
        esac
    | Seq   (expr1, expr2)            ->
        case eval(c, expr1) of
          [c, _] -> eval(c, expr2)
        esac
    | Skip                            -> [c, Void]
    | Read (x)                        ->
        case readWorld(world) of
          [v, newWorld] -> [[state <- [x, v], newWorld], Void]
        esac
    | Write (expr)                    ->
        case eval(c, expr) of
          [[state, world], v] -> [[state, writeWorld(v, world)], Void]
        esac
    | If (ifExpr, thenExpr, elseExpr) ->
        case eval(c, ifExpr) of
            [c, 0] -> eval(c, elseExpr)
          | [c, _] -> eval(c, thenExpr)
        esac
    | While (expr1, expr2)            ->
        case eval(c, expr1) of
            [c, 0] -> [c, Void]
          | [c, _] -> eval(c, Seq (expr2, expr))
        esac
    | DoWhile (expr1, expr2)          -> eval(c, Seq(expr1, While(expr2, expr1)))
    | Var (x)                         -> [c, state(x)]
    | Ref (x)                         -> [c, x]
    | Const (v)                       -> [c, v]
    | Binop (o, e1, e2) ->
        case eval(c, e1) of
          [c, v1] ->
            case eval(c, e2) of
              [c, v2] -> [c, evalOp(o, v1, v2)]
            esac
        esac
    | Ignore (expr)                   ->
        case eval(c, expr) of
          [c, _] -> [c, Void]
        esac
    | _                               -> failure("Unexcepted expression %s\n", expr.string)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}