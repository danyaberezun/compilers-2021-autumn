-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of
      Var (lable) -> 
        [c, lookup (s,  lable)]
    | Const (n) ->
        [c, n]
    | Binop (op, l, r) ->
        case evalList (c, {l, r}) of
          [c, {l, r}] -> [c, evalOp (op, l, r)]
        esac
    | Assn (x, e) ->
        case evalList (c, {x, e}) of
          [[s, w], {x, e}] -> [[s <- [x, e], w], e]
        esac
    | Seq (fst_stmt, snd_stmt) ->
        case evalList (c, {fst_stmt, snd_stmt}) of
          [c, {fst_stmt, snd_stmt}] -> [c, snd_stmt]
        esac
    | Skip -> 
        [c, {}]
    | Read (lable) ->
        case readWorld (w) of
          [data, w] -> [[s <- [lable, data], w], {}]
        esac
    | Write (expr) ->
        case eval (c, expr) of
          [[s, w], data] -> [[s, writeWorld (data, w)], {}]
        esac
    | If (expr, is_stmt, else_stmt) ->
        case eval (c, expr) of [c, data] ->
          if data then eval (c, is_stmt) else eval (c, else_stmt) fi
        esac
    | While (stmt, expr) ->
        case eval (c, stmt) of [c, data] ->
          if data then eval (c, Seq (expr, While (stmt, expr))) else [c, {}] fi
        esac
    | DoWhile (stmt, expr) ->
        eval (c, Seq (stmt, While (expr, stmt)))
    | Ref (expr) -> 
        [c, expr]
    | Ignore (expr) ->
        case eval (c, expr) of
          [c, _] -> [c, {}]
        esac
    | Scope (defs, expr) ->
      case foldl (fun (s, expr_in) {
        case expr_in of
          Var (lables) -> addNames (s, lables)
        | Fun (name, args, body) -> addFunction (s, name, args, body)
        esac
      }, s.enterScope, defs) of
        s -> case eval ([s, w], expr) of
          [[s, w], value] -> [[s.leaveScope, w], value]
        esac 
      esac
    | Call (name, exprs) ->
      case lookup (s, name) of
        Fun (args, body) -> 
          case evalList (c, exprs) of
            [c@[s, w], data] ->
              case foldl (fun (s, [arg, elem]) {
                s.addName (arg, elem) 
              }, enterFunction (s), zip (args, data)) of
                x ->
                  case eval ([x, w], body) of 
                    [[x, w], elem] -> [[leaveFunction (s, getGlobal (x)), w], elem]
                  esac
              esac
            esac
      esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
