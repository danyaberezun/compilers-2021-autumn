-- Expression evaluator

import List;
import State;
import Collection;
import World;

public fun showDbg (x) {
  var f = fopen("/proc/self/fd/2", "a");
  fprintf(f, "%s\n", string(x));
  fclose(f)
}

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  | None -> showDbg(op); failure ("match failed")
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Var (v) -> [c, st(v)]
  | Ref (v) -> [c, v]
  | Ignore (e) -> eval(c, e)
  | Const (i) -> [c, i]
  | Seq (l, r) -> eval(eval (c, l)[0], r)
  | Binop (s, l, r) ->
    case eval (c, l) of [c, l] ->
      case eval (c, r) of [c, r] ->
        [c, evalOp(s, l, r)]
      esac
    esac
  | Assn (s, e) ->
      case eval(c, s) of [c, s] ->
        case eval(c, e) of [c, e] ->
          [[updState(s, e, c[0]), c[1]], e]
        esac
      esac
  | While (e, s) ->
      case eval(c, e) of [c, v] ->
        if v
        then eval(eval(c, s)[0], expr)
        else [c, 0]
        fi
      esac
  | DoWhile (s, e) ->
      eval(eval(c, s)[0], While (e, s))
  | If (e, t, f) ->
      case eval(c, e) of [c, e] ->
        if e
        then eval(c, t)
        else eval(c, f)
        fi
      esac
  | Skip -> [c, 0]
  | Read (s) ->
      var
        rd_nw = readWorld(w);
      [[updState(s, rd_nw[0], st), rd_nw[1]], 0]
  | Write (e) ->
    case eval(c, e) of [c, e] ->
      [[c[0], writeWorld(e, c[1])], 0]
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
