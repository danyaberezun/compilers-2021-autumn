-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)

-- A expression is represented by a data structure of the following shape:
--
-- Expr = Assn (Expr, Expr)         
--      | Set (String, Expr)       
--      | Seq (Expr, Expr)         
--      | Skip                         
--      | If (Expr, Expr, Expr)   
--      | While (Expr, Expr)         
--      | DoWhile (Expr, Expr)         
--      | Var (String)             
--      | Ref (String)             
--      | Const (Int)                
--      | Binop (String, Expr, Expr) 
--      | Scope ([Def], Expr)    
--      | Call (String, [Expr])  
--      | Ignore (Expr)               
--      | String (String)             
--      | Array ([Expr])          
--      | Sexp (String, [Expr])  
--      | Elem (Expr, Expr)         
--      | ElemRef (Expr, Expr)      
--      | Case (Expr, [Pattern, Expr])
--
-- Def = Var ([String])                
--     | Val ([String])
--     | Fun (String, [String], Expr)
--
-- Pattern = Int
--         | Wildcard
--         | Array [Pattern]
--         | Sexp (String, [Pattern]) -- S-expression
--         | Named (String, Pattern) -- named pattern

-- Interpretator:

-- Value = Int
--       | String
--       | Value[]
--       | Sexp (Uident, Value[])
--       | Fun (params, body)

-- Ref = VarRef (identifier)
--     | ElemRef (array, index)

fun lookupVar (state, identifier) {
  case lookup (state, identifier) of
    x@Var (_) -> x
  | _ -> failure ("""%s"" does not refer to a variable\n", identifier)
  esac
}

fun lookupValue (state, identifier) {
  case lookup (state, identifier) of
    Var (v) -> v
  | Val (v) -> v
  | _ -> failure ("""%s"" does not refer to a var or val\n", identifier)
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of vars or vals in current scope
fun addNames (state, names, constructor) {
  foldl (
    fun (s, name) {
      s.addName (name, constructor (0))
    },
    state,
    names
  )
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

-- Adds a definition to the current state.
-- \param state : State -- state before the definitions
-- \param def : Def -- the definiton to add
-- \return State -- new state
fun addDef (state, def) {
  case def of
    Var (names) ->
      addNames (state, names, fun (x) { Var (x) })
  | Val (names) ->
      addNames (state, names, fun (x) { Val (x) })
  | Fun (name, parameterNames, bodyE) ->
      addFunction (state, name, parameterNames, bodyE)
  esac
}

-- Adds a list of definition to the current state.
-- \param state state before the definitions
-- \param defs a list of definitions to add
-- \return new state
fun addDefs (state, defs) {
  foldl (addDef, state, defs)
}

-- Helper function: adds a bunch of vals
-- and initialize them with corresponding values in the current scope.
fun initializeVals (state, pairs) {
  foldl (
    fun (s, [name, value]) {
      --printf ("Expr.initializeVals %s -> Val %s\n", name, value.string);
      addName (s, name, Val (value))
    },
    state,
    pairs
  )
}

fun evalCond (condVal) {
  case condVal of
    n@#val -> n
  | _ -> failure ("Cannot have a non-number as a condition\n")
  esac
}

-- \return Bool
fun matchArray (patterns, values@#array) {
  var patternsArray = listArray (patterns);
  if length (patternsArray) != length (values) then
    false
  else
    var matched = true;
    for var i; i := 0, i < length (patternsArray), i := i + 1 do
      matched := matched && match1 (values [i], patternsArray [i])
    od;
    matched
  fi
}

-- \return Bool
fun match1 (argumentValue, pattern) {
  case pattern of
    patternInt@#val -> argumentValue == patternInt
  | Wildcard -> true
  | Array (patterns) ->
      case argumentValue of
        argumentArray@#array ->
          matchArray (patterns, argumentArray)
      | _ -> false
      esac
  | Sexp (patternUident, patterns) -> 
      case argumentValue of
        Sexp (argumentUident, argumentValues@#array) ->
          if compare(argumentUident, patternUident) != 0 then
            false
          else
            matchArray (patterns, argumentValues)
          fi
      | _ -> false
      esac
  | Named (identifier, pattern) ->
      match1 (argumentValue, pattern)
esac
}

fun match (argumentValue, branches) {
  case branches of
    {} -> Fail
  | [pattern, resultExpr] : branches -> 
      if match1 (argumentValue, pattern) then
        Ok (resultExpr)
      else
        match (argumentValue, branches)
      fi
  esac
}

fun eval (c@[s, w], expr) {
  --printf ("Expr.eval %s\n", expr.string);
  case expr of
    Assn (lhs, rhs) ->
      case evalList (c, {lhs, rhs}) of
        [c@[s, w], {ref, value}] ->
          case ref of
            VarRef (identifier) ->
              var check = lookupVar (s, identifier);
              var c = [s <- [identifier, Var (value)], w];
              [c, value]
          | ElemRef (arr, index) ->
              arr [index] := value;
              [c, value]
          esac
      | _ -> failure ("AST ain't well-formed\n")
      esac
  | Set (identifier, eValue) ->
      case eval (c, eValue) of [[s, w], value] ->
        [[s <- [identifier, Var (value)], w], 0]
      esac
  | Seq (e1, e2) ->
      case evalList (c, {e1, e2}) of [c, {_, v2}] ->
        [c, v2]
      esac
  | Skip -> [c, 0]
  | If (condE, thenE, elseE) ->
      case eval (c, condE) of [c, condV] ->
        if evalCond (condV)
          then eval (c, thenE)
          else eval (c, elseE)
        fi
      esac
  | While (condE, bodyE) ->
      var currentC = c;
      while (
        case eval (currentC, condE) of [newC, value] ->
          currentC := newC;
          evalCond (value)
        esac
      ) do
        case eval (currentC, bodyE) of
          [newC, 0] -> currentC := newC
        | _ -> failure ("While body must be Void")
        esac
      od;
      [currentC, 0]
  | DoWhile (bodyE, condE) ->
      var currentC = c;
      do
        case eval (currentC, bodyE) of
          [newC, 0] -> currentC := newC
        | _ -> failure ("DoWhile body must be Void")
        esac
      while (
        case eval (currentC, condE) of [newC, value] ->
          currentC := newC;
          evalCond (value)
        esac
      ) od;
      [currentC, 0]
  | Var (identifier) ->
      [c, lookupValue (s, identifier)]
  | Ref (v) -> [c, VarRef (v)]
  | Const (n) -> [c, n]
  | Binop (op, lhsE, rhsE) ->
      case evalList (c, {lhsE, rhsE}) of [c, {l@#val, r@#val}] ->
        [c, evalOp (op, l, r)]
      esac
  | Scope (defs, bodyE) ->
      case addDefs (enterScope (s), defs) of s ->
        case eval ([s, w], bodyE) of [[s, w], value] ->
          [[leaveScope (s), w], value]
        esac
      esac
  | Call (name, e_args) ->
      case evalList (c, e_args) of [[s, w], v_args] ->
        case lookup (s, name) of 
          Fun (params, External) ->
            case evalBuiltin (name, v_args, w) of [result, w] ->
              [[s, w], result]
            esac
        | Fun (params, e_body) ->
            var inFuncSt = initializeVals (enterFunction (s), zip (params, v_args));
            case eval ([inFuncSt, w], e_body) of [[inFuncSt, w], w_result] ->
              [[leaveFunction (s, getGlobal (inFuncSt)), w], w_result]
            esac
        esac
      esac
  | Ignore (e) ->
      case eval (c, e) of [c, _] ->
        [c, 0]
      esac
  | String (s) -> [c, s]
  | Array (exprList) ->
      case evalList (c, exprList) of [c, values] ->
        [c, listArray (values)]
      esac
  | Sexp (uident, exprList) ->
      case evalList (c, exprList) of [c, values] ->
        [c, Sexp (uident, listArray (values))]
      esac
  | Elem (e_container, e_index) ->
      case evalList (c, {e_container, e_index}) of [c, {container, index@#val}] ->
        var result = case container of
          arr@#array -> arr [index]
        | s@#str -> s [index]
        | Sexp (_, elements) -> elements [index]
        esac;
        [c, result]
      esac
  | ElemRef (e_container, e_index) ->
      case evalList (c, {e_container, e_index}) of [c, {container, index@#val}] ->
        var arrayRef = case container of
          Sexp (_, elements) -> elements
        | r -> r
        esac;
        [c, ElemRef (arrayRef, index)]
      esac
  | Case (argumentExpr, branches) ->
    case eval (c, argumentExpr) of [c, argumentValue] ->
      case match (argumentValue, branches) of
        Ok (resultExpr) -> eval (c, resultExpr)
      | Fail -> failure ("Pattern-matching fail")
      esac
    esac
  | _ -> failure ("AST ain't well-formed\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  --printf ("Expr.evalExpr progrum: %s\n", expr.string);
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

