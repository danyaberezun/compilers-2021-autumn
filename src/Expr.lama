-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Var   (name)         -> [c, st (name)]
  | Const (value)        -> [c, value]
  | Binop (op, e1, e2)   -> case evalList (c, {e1, e2}) of
                              [c, left:right:_] -> [c, binop (op) (left, right)]
                            esac
  | Assn  (e1, e2)       -> case evalList (c, {e1, e2}) of 
                              [[st, w], Ref (name):value:_] -> [[st <- [name, value], w], value]
                            esac
  | Seq   (e1, e2)       -> case evalList (c, {e1, e2}) of
                              [c, _:value:_] -> [c, value]
                            esac
  | Skip                 -> [c, Void]
  | Read  (name)         -> case readWorld (w) of [value, w] -> [[st <- [name, value], w], Void] esac
  | Write (expr)         -> case eval (c, expr) of [[st, w], value] -> 
                              case writeWorld (value, w) of w -> [[st, w], Void] esac
                            esac
  | If    (cond, e1, e2) -> case eval (c, cond) of [c, value] ->
                              if value != 0 then eval (c, e1) else eval (c, e2) fi
                            esac
  | While (cond, expr)   -> case eval (c, cond) of [c, value] ->
                              if value != 0 then eval (c, Seq (expr, While (cond, expr))) else [c, Void] fi
                            esac
  | DoWhile (expr, cond) -> eval (c, Seq (expr, While (cond, expr)))
  | Ref   (name)         -> [c, Ref (name)]
  | Ignore (expr)        -> case eval (c, expr) of [c, _] -> [c, Void] esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

public fun binop(name) {
  case name of
    "+"  -> infix +
  | "-"  -> infix -
  | "*"  -> infix *
  | "/"  -> infix /
  | "%"  -> infix %
  | "==" -> infix ==
  | "<"  -> infix <
  | ">"  -> infix >
  | "!=" -> infix !=
  | "<=" -> infix <=
  | ">=" -> infix >=
  | "&&" -> infix &&
  | "!!" -> infix !!
  esac
}