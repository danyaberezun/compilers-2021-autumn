-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addDefs (st, v) {
  case v of
	  {}    -> st
	| h : t ->
      st := case h of 
              Var (name)             -> st.addNames (name)
            | Fun (name, args, body) -> st.addFunction (name, args, body)
            esac;
      
      addDefs (st, t)
	esac  
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Assn (Ref (r), e) ->
       case eval (c, e) of [[st, w], e] -> [[st <- [r, Var (e)], w], e] esac
  | Assn (r, e)       ->
      case eval (c, r) of 
        [c, Ref (r)] -> case eval (c, e) of [[st, w], e] -> [[st <- [r, Var (e)], w], e] esac
      esac
  | Seq (f, s)        ->
      case eval (c, f) of [c, _] -> eval (c, s) esac
  | Skip              -> [c, 0]
  | Read (v)          ->
      case readWorld (w) of [x, w] -> [[st <- [v, Var (x)], w], 0] esac
  | Write (e)         ->
      case eval (c, e) of [[st, w], v] -> [[st, writeWorld (v, w)], 0] esac
  | If (e, t, f)      ->
      case eval (c, e) of [c, v] -> eval (c, if v then t else f fi) esac
  | While (e, b)      ->
      case eval (c, e) of
        [c, v] -> if v then eval (eval (c, b)[0], While (e, b)) else [c, 0] fi
      esac
  | DoWhile (b, e)    ->
      case eval (c, b) of
        [c, _] ->
          case eval (c, e) of
            [c, v] -> if v then eval (c, DoWhile (b, e)) else [c, 0] fi
          esac
      esac
  | Var (v)           -> [c, case st.lookup (v) of Var (v) -> v esac]
  | Ref (r)           -> [c, Ref (r)]
  | Const (x)         -> [c, x]
  | Binop (op, x, y)  ->
      case eval (c, x) of
        [c, x] -> case eval (c, y) of [c, y] -> [c, evalOp (op, x, y)] esac
      esac
  | Scope (v, ss)     ->
      st := addDefs (st.enterScope, v);
      case eval([st, w], ss) of 
        [[st, w], v] -> [[st.leaveScope, w], v]
      esac
  | Call (n, eas)     ->
      checkFun (st, n);
      case st.lookup (n) of
        Fun (as, b) -> 
          case evalList (c, eas) of
            [[nst, w], eas] -> 
              var nc = [foldl (fun (st, [a, ea]) { st.addName (a, Var (ea)) }, 
                               st.enterFunction, 
                               as.zip (eas)
                              ), w];
              case eval (nc, b) of
                [[st, w], v] -> [[nst.leaveFunction (st.getGlobal), w], v]
              esac
          esac
      esac
  | Ignore (e)        -> eval (c, e)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}