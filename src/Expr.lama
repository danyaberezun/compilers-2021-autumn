-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (state, expr) {
  case expr of 
    Var (s) -> state(s)
  | Const (n) -> n
  | Binop (s, left, right) -> evalBinop(s, evalExpr(state, left), evalExpr(state, right))
  esac
}

fun evalBinop(binopStr, leftNum, rightNum) {
  case binopStr of
    "+" -> leftNum + rightNum
  | "-" -> leftNum - rightNum
  | "*" -> leftNum * rightNum
  | "/" -> leftNum / rightNum
  | "%" -> leftNum % rightNum
  | "<" -> leftNum < rightNum
  | ">" -> leftNum > rightNum
  | "<=" -> leftNum <= rightNum
  | ">=" -> leftNum >= rightNum
  | "==" -> leftNum == rightNum
  | "!=" -> leftNum != rightNum
  | "&&" -> leftNum && rightNum
  | _ -> failure("Unexpected binop: %s", binopStr.string)
  esac
}