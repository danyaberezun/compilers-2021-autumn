-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, ex) {
  -- printf("%s, %d\n", ex.string, ex);

  case ex of 
    Var   (name) -> st(name)
  | Const (value) -> value
  | Binop (op, ex1, ex2) -> 
      case op of
        "+" -> evalExpr(st, ex1) + evalExpr(st, ex2) 
      | "-" -> evalExpr(st, ex1) - evalExpr(st, ex2) 
      | "*" -> evalExpr(st, ex1) * evalExpr(st, ex2) 
      | "/" -> evalExpr(st, ex1) / evalExpr(st, ex2) 
      | "%" -> evalExpr(st, ex1) % evalExpr(st, ex2) 
      | "<" -> evalExpr(st, ex1) < evalExpr(st, ex2) 
      | "<=" -> evalExpr(st, ex1) <= evalExpr(st, ex2) 
      | ">" -> evalExpr(st, ex1) > evalExpr(st, ex2) 
      | ">=" -> evalExpr(st, ex1) >= evalExpr(st, ex2) 
      | "==" -> evalExpr(st, ex1) == evalExpr(st, ex2) 
      | "!=" -> evalExpr(st, ex1) != evalExpr(st, ex2) 
      -- | "||" -> evalExpr(st, ex1) || evalExpr(st, ex2) 
      -- | "&&" -> evalExpr(st, ex1) && evalExpr(st, ex2) 
      esac
  esac
}
