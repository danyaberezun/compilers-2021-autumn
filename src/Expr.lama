-- Expression evaluator

import List;
import State;

fun binaryBuild (op) {
  fun (st, f, s) {
    op (evalExpr (st, f), evalExpr (st, s))
  }
}

public fun signToOp (sign) {
  case sign of
    "+" -> (infix +)
  | "-" -> (infix -)
  | "*" -> (infix *)
  | "/" -> (infix /)
  | "%" -> (infix %)
  | "<" -> (infix <)
  | "<=" -> (infix <=)
  | ">" -> (infix >)
  | ">=" -> (infix >=)
  | "==" -> (infix ==)
  | "!=" -> (infix !=)
  | "&&" -> (infix &&)
  | "!!" -> (infix !!)
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (s) -> st (s)
  | Const (v) -> v
  | Binop (sign, f, s)  -> binaryBuild (signToOp (sign)) (st, f, s)
  esac
}
