-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)


public fun evalExpr (st, expr) {
  case expr of
    [ "Const", v ] -> v
    [ "Var", x ]   -> st (x)
    [ "Binop", op, e1, e2 ] ->
      let val1 = evalExpr (st, e1)
      let val2 = evalExpr (st, e2)
      in case op of
           "+" -> val1 + val2
           "-" -> val1 - val2
           "*" -> val1 * val2
           "/" -> val1 / val2
           "^" -> val1 ^ val2
           otherwise -> failure ("invalid operator ""%s""\n", op)
      end
    otherwise -> failure ("invalid expression")
  end
}