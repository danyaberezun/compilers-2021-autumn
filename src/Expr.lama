-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
var void = 16445630;

fun addDefs(s, defs) {
  foldl(fun (s, d) {
    case d of
      Var (idents) -> addNames(s, idents)
      | Fun (name, args, body) -> addFunction(s, name, args, body)
    esac
  }, s, defs)
}

fun addPairs(s, names, vals) {
  foldl(fun (s, arg) { s.addName(arg[0], Var (arg[1])) }, s, zip(names, vals))
}

fun eval (c@[s, w], expr) {
  case expr of
    Var (ident) -> checkVar(s, ident); [c, s.lookup(ident).fst]
    | Const (i) -> [c, i]
    | Ref (ident) -> [c, ident]
    | Ignore (exp) -> eval(c, exp)
    | Binop (op, lexp, rexp) ->
      case evalList(c, {lexp, rexp}) of
        [c, l:r:_] -> [c, evalOp(op, l, r)]
      esac
    | Assn (lexp, rexp) ->
      case evalList(c, {lexp, rexp}) of
        [[s, w], l:r:_] -> checkVar(s, l); [[s <- [l, Var (r)], w], r]
      esac
    | Seq (lexp, rexp) ->
      case eval(c, lexp) of
        [c, _] -> eval(c, rexp)
      esac
    | Read (ident) -> var r = readWorld(w); checkVar(s, ident); [[s <- [ident, Var (r[0])], r[1]], void]
    | Write (exp) ->
      case eval(c, exp) of
        [[s, w], v] -> [[s, writeWorld(v, w)], void]
      esac
    | If (exp, ifTrue, ifFalse) ->
      case eval(c, exp) of
        [c, v] -> if v != 0 then eval(c, ifTrue) else eval(c, ifFalse) fi
      esac
    | While (exp, body) ->
      case eval(c, exp) of
        [c, v] -> if v != 0 then 
          case eval(c, body) of
            [c, _] -> eval(c, expr)
          esac
        else [c, void] fi
      esac
    | DoWhile (body, exp) ->
      case eval(c, body) of
        [c, _] ->
          case eval(c, exp) of
            [c, v] -> if v != 0 then eval(c, expr) else [c, void] fi
          esac
      esac
    | Skip -> [c, void]
    | Scope (defs, exp) ->      
      case eval([addDefs(s.enterScope, defs), w], exp) of
        [[s, w], v] -> [[s.leaveScope, w], v]
      esac
    | Call (ident, args) ->
      checkFun(s, ident);
      case s.lookup(ident) of
        Fun (funargs, body) ->
          case evalList(c, args) of
            [[s, w], vals] ->
              case eval([addPairs(s.enterFunction, funargs, vals), w], body) of
                [[ns, w], v] -> [[s.leaveFunction(ns.getGlobal), w], v]
              esac
          esac
      esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}