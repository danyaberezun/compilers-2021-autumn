-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var   (varName) -> st (varName)       |
    Const (valName) -> valName            |
    Binop (operationStr, expr1, expr2) ->
      var l = evalExpr(st, expr1);
      var r = evalExpr(st, expr2);
      case operationStr of
        "+" ->  l + r                                  |
        "-" ->  l - r                                  |
        "*" ->  l * r                                  |
        "/" ->  l / r                                  |
        "%" ->  l % r                                  |
        ">" ->  l > r                                  |
        "<" ->  l < r                                  |
        "<=" -> l <= r                                 |
        ">=" -> l >= r                                 |
        "==" -> l == r                                 |
        "!=" -> l != r                                 |
        x -> failure ("Operation is not implemented.")
      esac
  esac
}
