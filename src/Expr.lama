-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}
-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any) and value fo expression
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

public fun valDecls (decls) {
  -- TODO: process Val correctly
  flatten (map (fun (x) { case x of Fun (x, _, _) -> {} | Var (x) -> x esac }, decls))
}

fun addFunctions (st, decl) {
  foldl (fun (st, el) { case el of Fun (name, args, body) -> addFunction (st, name, args, body) | Var (x) -> st esac }, st, decl)
}

fun eval (c@[st, w], expr) {
  -- print (expr. toString)
  case expr of
    Assn (dest, src) ->
    case evalList (c, {dest, src}) of
      [[st, w], {Kref (dest), src}] -> [[st <- [dest, src], w], src]
    | [[st, w], {Kref (arr, pos), src}] ->
        arr[pos] := src;
        [[st, w], src]
    esac
  | Set (dest, expr) ->
    case eval (c, expr) of
      [[st, w], v] -> [[st <- [dest, v], w], v]
    esac
  | Seq (stmt1, stmt2) ->
    case evalList (c, {stmt1, stmt2}) of
      [c, {_, v}] -> [c, v]
    esac
  | Skip -> [c, Kbot]
  | If (p, pb, nb) ->
    case eval (c, p) of
      [c, v] -> eval (c, if v == 0 then nb else pb fi)
    esac
  | While (p, b) ->
    case eval (c, p) of
      [c, 0] -> [c, Kbot]
    | [c, _] ->
        case eval (c, b) of
          [c, _] -> eval (c, While (p, b))
        esac
    esac
  | DoWhile (b, p) -> eval (c, Seq (b, While (p, b)))
  | Var (s) -> [[st, w], lookup (st, s)]
  | Ref (x) -> [c, Kref (x)]
  | Const (x) -> [c, x]
  | String (s) -> [c, s]
  | Elem (arr, pos) ->
    case evalList (c, {arr, pos}) of
      [c, {Ksexp (stag, args), pos}] -> [c, args[pos]]
    | [c, {arr, pos}] -> [c, arr[pos]]
    esac
  | ElemRef (arr, pos) ->
    case evalList (c, {arr, pos}) of
      [c, {arr, pos}] -> [c, Kref (arr, pos)]
    esac
  | Array (arr) ->
    case evalList (c, arr) of
      [c, arr] -> [c, listArray (arr)]
    esac
  | Sexp (stag, args) ->
    case evalList (c, args) of
      [c, args] -> [c, Ksexp (stag, listArray (args))]
    esac
  | Binop (op, e1, e2) ->
    case evalList (c, {e1, e2}) of
      [c, {v1, v2}] -> [c, evalOp (op, v1, v2)]
    esac
  | Ignore (e) ->
    case eval (c, e) of
      [c, _] -> [c, Kbot]
    esac
  | Scope (decl, body) ->
    case addFunctions (addNames (enterScope (st), valDecls (decl)), decl) of
      st ->
        case eval ([st, w], body) of
          [[st, w], v] -> [[leaveScope (st), w], v]
        esac
    esac
  | Call (fname, args) ->
    case evalList (c, args) of
      [[st, w], args] ->
        case lookup (st, fname) of
          Fun (arg_names, External) ->
            case evalBuiltin (fname, args, w) of
              [v, w] -> [[st, w], v]
            esac
        | Fun (arg_names, body) ->
            case foldl (fun (acc, [name, v]) { addName (acc, name, v) }, enterFunction (st), zip (arg_names, args)) of
              f_st ->
                case eval ([f_st, w], body) of
                  [[f_st, w], v] -> [[leaveFunction (st, getGlobal (f_st)), w], v]
                esac
            esac
        esac
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
