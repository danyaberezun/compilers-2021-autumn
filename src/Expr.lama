-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Const  (z)               -> [c, z]
  | Var    (x)               -> [c, s(x)]
  | Ref    (x)               -> [c, x]
  | Binop  (op, l, r)        -> case evalList (c, {l, r}) of 
                               [c, {w, v}]  -> [c, evalOp (op, w, v)]
                             esac

  | Skip                     -> [c, None]
  | Assn   (l, r)            -> case evalList (c, {l, r}) of 
                               [[newS, newW], {refx, value}] -> [[newS <- [refx, value], newW], value]
                             esac

  | Read   (x)               -> case readWorld (w) of 
                               [z, newW] -> [[s <- [x, z], newW], z]
                             esac

  | Write  (e)               -> case eval (c, e) of 
                               [[newS, newW], v] -> [[newS, writeWorld (v, newW)], None]
                             esac

  | Seq    (e1, e2)          -> eval (eval (c, e1).fst, e2)
  | Ignore (e)               -> [eval (c, e).fst, None]
  | If (e, branchT, branchF) -> case eval (c, e) of 
                                  [newC, 0] -> eval (newC, branchF)
                                | [newC, _] -> eval (newC, branchT)
                                esac

  | While (e, body)  ->         case eval (c, e) of 
                                  [newC, 0] -> [newC, None]
                                | [newC, _] -> eval (eval (newC, body).fst, expr)
                                esac

  | DoWhile (body, e)  ->       case eval (c, body) of 
                                  [newC, z] -> case eval (newC, e) of
                                                 [newestC, 0] -> [newestC, None]
                                               | [newestC, _] -> eval (newestC, expr)
                                               esac
                                esac  
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
