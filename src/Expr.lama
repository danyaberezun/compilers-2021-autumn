-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDef(state, def) {
  case def of
    Fun (name, params, body)  -> addFunction(state, name, params, body)
  | Var (names)               -> addNames(state, names)
  esac
}

fun addArg(state, [argName, argValue]) {
  addName(state, argName, argValue)
}

fun eval (config@[state, world], expr) {
  case expr of 
    Const(value) -> [config, value]
  | Var(name) -> [config, state.lookup(name)]
  | Ref(name) -> [config, Ref(name)]
  | Binop(op, lhs, rhs) -> 
    case evalList(config, {lhs, rhs}) of 
      [config, {lhs, rhs}] -> [config, evalOp (op, lhs, rhs)]
    esac
  | Skip ->  [config, Bot]
  | Assn (lhs, rhs) ->
    case evalList(config, {lhs, rhs}) of 
      [config@[state, world], {Ref (var_name), rhs}] -> [[state <- [var_name, rhs], world], rhs]
    esac
  | Read(expr) -> 
    case eval(config, expr) of 
      [config, Ref (var_name)] ->
        case readWorld(world) of 
          [value, world] -> [[state <- [var_name, value], world], Bot]
        esac
    esac
  | Write(expr) ->
    case eval(config, expr) of
      [config@[state, world], expr] -> [[state, writeWorld(expr, world)], Bot]
    esac 
  | Seq (left, right) -> 
    case evalList(config, {left, right}) of 
      [config, {left, right}] -> [config, right]
    esac
  | If (cond, then_block, else_block) ->
    case eval(config, cond) of 
      [config, 0] -> eval(config, else_block)
    | [config, _] -> eval(config, then_block)
    esac
  | While (cond, body) -> 
    case eval(config, cond) of 
      [config, 0] -> [config, Bot]
    | [config, _] -> (
      case eval(config, body) of 
        [config, _] -> eval(config, While(cond, body))
      esac
    )
    esac
  | DoWhile (body, cond) -> 
    case eval(config, body) of 
      [config, Bot] -> 
        case eval(config, cond) of 
          [config, 0] -> [config, Bot]
        | [config, _] -> eval (config, DoWhile(body, cond))
        esac
    esac
  | Ignore (expr) ->
    case eval(config, expr) of 
      [config, _] -> [config, Bot]
    esac
  | Scope (defs, expr) -> 
    case eval([foldl(addDef, enterScope(state), defs), world], expr) of
      [[state, world], expr] -> [[leaveScope(state), world], expr]
    esac
  | Call (funName, exprs) -> 
    case evalList(config, exprs) of
      [config@[saved@state, world], params] ->
        case lookup(state, funName) of 
          Fun(paramNames, body) -> (
            var prev_state = enterFunction(state);
            case eval([foldl(addArg, enterFunction(state), zip(paramNames, params)), world], body) of 
              [config@[state, world], result] -> [[leaveFunction(saved, getGlobal(state)), world], result] 
            esac
          )
        esac 
    esac
  esac

}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}