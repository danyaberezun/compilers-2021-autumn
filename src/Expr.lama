-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case lookup (state, name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case lookup (state, name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

fun checkArgsCount (name, expected, args) {
  if size (args) != expected
  then error (sprintf ("wrong number of arguments in call of function ""%s""", name), getLoc (name))
  else args
  fi
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {addName (s, name, Var (0))}, state, names)
}

fun addNamesWithVals (state, names, values) {
  foldl (fun (s, [name, value]) {addName (s, name, Var (value))}, state, zip (names, values))
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  addName (state, name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn    (l, r)         -> case evalList (c, {l, r}) of
                                [[s, w], {REF (x), v}] -> [[s <- [x, Var (v)], w], v]
                              esac
  | Seq     (s1, s2)       -> case eval (c, s1) of
                                [c, _] -> eval (c, s2)
                              esac

  | Skip                   -> [c, VOID]
  | Read    (name)         -> checkVar (s, name);
                              case readWorld (w) of
                                [z, w] -> [[s <- [name, Var (z)], w], VOID]
                              esac
  | Write   (e)            -> case eval (c, e) of
                                [[s, w], v] -> [[s, writeWorld (v, w)], VOID]
                              esac
  | If      (e, s1, s2)    -> case eval (c, e) of
                                [c, n] -> if n != 0 then eval (c, s1) else eval (c, s2) fi
                              esac
  | wh@While (e, s)        -> case eval (c, e) of
                                [c, n] -> if n != 0 then case eval (c, s) of [c, v] -> eval (c, wh) esac else [c, VOID] fi
                              esac
  | DoWhile  (s, e)        -> eval (c, Seq (s, While (e, s)))
  | Var      (name)        -> checkVar (s, name);
                              [c, case lookup (s, name) of Var (x) -> x esac]
  | Ref      (name)        -> checkVar (s, name);
                              [c, REF (name)]
  | Const    (z)           -> [c, z]
  | Binop    (op, l, r)    -> case evalList (c, {l, r}) of
                                [c, {w, v}] -> [c, evalOp (op, w, v)]
                              esac
  | Scope    (ds, e)       -> var stateWithDefs = foldl (fun (newState, def) {
                                                            case def of
                                                              Var (names) -> addNames (newState, names)
                                                            | Fun (name, args, body) -> addFunction (newState, name, args, body)
                                                            esac
                                                         }, enterScope (s), ds);
                              case eval ([stateWithDefs, w], e) of
                                [[s, w], v] -> [[leaveScope (s), w], v]
                              esac
  | Call     (name, es)    -> case lookup (s, name) of
                                Fun (args, body) ->
                                  case evalList (c, es) of
                                    [[s1, w], vs] -> var state = addNamesWithVals (enterFunction (s1), checkArgsCount (name, size (vs), getFuncParams (s, name)), vs);
                                                     case eval ([state, w], body) of
                                                       [[s2, w], v] ->  [[leaveFunction (s1, getGlobal (s2)), w], v]
                                                     esac
                                  esac
                              | _                -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
                              esac
  | Ignore   (e)           -> case eval (c, e) of [c, _] -> [c, VOID] esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}