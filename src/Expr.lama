-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
  Var (x) -> st(x)
  | Const (x) -> x
  | Binop (binop, x1, x2) ->
    var n1 = evalExpr(st, x1);
    var n2 = evalExpr(st, x2);
    case binop of
      "+" -> n1 + n2
    | "-" -> n1 - n2
    | "*" -> n1 * n2
    | "/" -> n1 / n2
    | "%" -> n1 % n2
    | "==" -> n1 == n2
    | "!=" -> n1 != n2
    | "<" -> n1 < n2
    | ">" -> n1 > n2
    | "<=" -> n1 <= n2
    | ">=" -> n1 >= n2
    | "&&" -> n1 && n2
    | "!!" -> n1 !! n2
    esac
  esac
}
