-- Expression evaluator

import List;
import State;
import Collection;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

var ops =
  foldl (fun (m, [k, v]) { addMap(m, k, v) },
  emptyMap(compare),
  { ["+", fun(x, y) { x + y }]
  , ["-", fun(x, y) { x - y }]

  , ["==", fun(x, y) { x == y }]
  , ["!=", fun(x, y) { x != y }]

  , ["&&", fun(x, y) { x && y }]
  , ["!!", fun(x, y) { x !! y }]

  , [">", fun(x, y) { x > y }]
  , ["<", fun(x, y) { x < y }]
  , [">=", fun(x, y) { x >= y }]
  , ["<=", fun(x, y) { x <= y }]

  , ["*", fun(x, y) { x * y }]
  , ["/", fun(x, y) { x / y }]
  , ["%", fun(x, y) { x % y }]
  } )
  ;

public fun evalBop(o, l, r) {
    case findMap(ops, o) of
      None -> failure ("undefined op ""%s""\n", o)
    | Some (o) -> o(l, r)
    esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var (s) -> st(s)
  | Const (i) -> i
  | Binop (s, l, r) -> evalBop(s, evalExpr(st, l), evalExpr(st, r))
  esac
}
