-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[state, world], expr) {
  case expr of
    Assn (ref, expr) ->
      case evalList (c, { expr, ref }) of
        [ [state, world], { value, name } ] ->
          [ [state <- [name, value], world], value ]
      esac
    | Seq  (stmt1, stmt2) ->
      case evalList (c, { stmt1, stmt2 }) of
        [c, { _, v }] -> [c, v]
      esac
    | Skip -> [c, {}]
    | Read (name) ->
      case readWorld (world) of
        [value, new_world] ->
          [ [state <- [name, value], new_world], Void ]
      esac
    | Write (expr) ->
      case eval (c, expr) of
        [ [state, world], value ] ->
          [ [state, writeWorld (value, world)], Void ]
      esac
    | If (condition, thenBranch, elseBranch) ->
      case eval (c, condition) of
        [c, 0] -> eval (c, elseBranch)
        | [c, _] -> eval (c, thenBranch)
      esac
    | While (condition, body) ->
      var conf = c;
      while
        case eval (conf, condition) of
          [c, v] -> conf := c; v
        esac
      do
        conf := eval (conf, body)[0]
      od;
      [conf, Void]
    | DoWhile (body, condition) ->
      var conf = c;
      do
        conf := eval (conf, body)[0]
      while
        case eval(conf, condition) of
          [c, v] -> conf := c; v
        esac
      od;
      [conf, Void]
    | Var (name)  -> [c, state (name)]
    | Ref (name)  -> [c, name]
    | Const (int) -> [c, int]
    | Binop (opName, a, b) ->
      case evalList(c, { a, b }) of
        [c, { av, bv }] -> [c, evalOp (opName, av, bv)]
      esac
    | Ignore (e) -> [eval (c, e)[0], Void]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
