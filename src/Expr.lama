-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalBinOp (op, val1, val2) {
  case op of
    "*" -> val1 * val2
    | "/" -> val1 / val2
    | "%" -> val1 % val2
    | "+" -> val1 + val2
    | "-" -> val1 - val2
    | "==" -> val1 == val2
    | "!=" -> val1 != val2
    | "<=" -> val1 <= val2
    | "<" -> val1 < val2
    | ">=" -> val1 >= val2
    | ">" -> val1 > val2
    | "&&" -> val1 && val2
    | "!!" -> val1 !! val2
    | _ -> failure("There is no such operator")
  esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var (name) -> name.st
    | Const (value) -> value
    | Binop (op, expr1, expr2) -> evalBinOp(op, evalExpr(st, expr1), evalExpr(st, expr2))
    | _ -> failure("This expression cannot be evaluated")
  esac
}
