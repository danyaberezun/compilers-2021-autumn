-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of 
      Assn(varname, e) -> 
        case eval(c, varname) of 
          [c, R(x)] ->
            case eval(c, e) of 
              [c@[s, w], v@L(vv)] -> [[s <- [x, vv], w], v]
            esac
        esac
    | Seq (e1, e2) -> 
      case eval(c, e1) of 
        [c, _] -> eval(c, e2)
      esac
    | Skip -> [c, E]
    | Read(v) -> 
        case readWorld (w) of [n, w] ->
          [[s <- [v, n], w], E]
        esac
    | Write(e) -> 
        case eval(c, e) of 
          [c, L(v)] -> [[s, writeWorld(v, w)], E]
        esac
    | If (cond, e1, e2) -> 
        case eval(c, cond) of 
          [c, L(v)] -> eval(c, if v then e1 else e2 fi)
        esac
    | While (cond, e) -> 
        case eval(c, cond) of
          [c, L(v)] -> if v == 0 then [c, E] else eval(c, Seq(e, While(cond, e))) fi 
        esac
    | DoWhile (e, cond) -> eval(c, Seq(e, While (cond, e))) 
    | Var (v) -> [c, L(s(v))]
    | Ref (v) -> [c, R(v)]
    | Const (n) -> [c, L(n)]
    | Binop (op, e1, e2) -> 
      case eval(c, e1) of 
        [c, L(l)] -> 
          case eval(c, e2) of 
            [c, L(r)] -> [c, L(evalOp(op, l, r))]
          esac
      esac
    | Ignore (e) -> case eval(c, e) of [c, _] -> [c, E] esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
