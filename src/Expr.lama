-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[state, world], expr) {
  fun addDefinitions(state, definitions) {
    fun addDefinition(state, definition) {
      case definition of 
        Var (ds) ->
          addNames(state, ds)                  |
        Fun (name, args, body) ->
          addFunction(state, name, args, body)
      esac
    }
    case definitions of 
      def : defsTail -> addDefinitions(addDefinition(state, def), defsTail) |
      _ -> state
    esac
  }

  fun evalBinop(operation, lExpr, rExpr) {
    case evalList(c, {lExpr, rExpr}) of
      [newC, lRet : rRet : _] -> [
        newC,
        evalOp(operation, lRet, rRet)
      ]
    esac
  }

  fun evalAssn(l, r) {
    case evalList(c, {l, r}) of
      [[newS, newW], x : v : _] ->
          [[newS <- [x, Var(v)], newW], v]
    esac
  }

  fun evalRead(x) {
    case readWorld(world) of
      [v, newWorld] ->
        var newC = [state <- [x, Var(v)], newWorld];
        [newC, Void]
    esac
  }

  fun evalWrite(e) {
    case eval(c, e) of
      [newC @ [newS, newW], x] -> 
        var newC = [newS, writeWorld(x, newW)];
        [newC, Void]
    esac
  }

  fun evalWhile(whileExpr, whileStmt) {
    case eval(c, whileExpr) of
        [newC, 0] -> [c, Void]           |
        [newC, _] -> 
          var seq = Seq(whileStmt, While(whileExpr, whileStmt));
          eval(newC, seq)
      esac
  }

  fun evalIf(ifExpr, thenExpr, tailExpr) {
    case eval (c, ifExpr) of
        [newC, 0] -> eval(newC, tailExpr) |
        [newC, _] -> eval(newC, thenExpr)
      esac
  }

  fun evalDoWhile(doWhileStmt, doWhileExpr) {
    var whileExpr = While(doWhileExpr, doWhileStmt);
    eval(c, Seq(doWhileStmt, whileExpr))
  }

  fun evalCall(name, exprs) {
    case checkFun(state, name) of
      _ ->
        case lookup(state, name) of
          Fun (args, body) ->
            case evalList(c, exprs) of
              [[newSt, _], values] ->
                var enteredSt = enterFunction(state);
                var argsValuesMapping = zip(args, values);
                var stEntered = foldl(
                  fun(st, [arg, v]){st.addName(arg, Var (v))},
                  enteredSt,
                  argsValuesMapping
                );
                var cEntered = [stEntered, world];
                case eval(cEntered, body) of
                  [[stEnd, world], v] -> 
                    var leftState = leaveFunction(state, getGlobal(stEnd));
                    var leftC = [leftState, world];
                    [leftC, v]
                esac
            esac
        esac
    esac
  }

  fun evalScope(defs, expr) {
    var stInScope = enterScope(state);
    var stWithDefs = addDefinitions(stInScope, defs);
    case eval([stWithDefs, world], expr) of
      [[state, world], v] ->
        var leftState = leaveScope(state);
        var leftC = [leftState, world];
        [leftC, v]
    esac
  }

  case expr of
    Var(varName) -> [c, case lookup(state, varName) of Var (v) -> v esac]      |
    Const(valName) -> [c, valName]                                             |
    Ref(refName) -> [c, refName]                                               |
    Binop(operation, lExpr, rExpr) -> evalBinop(operation, lExpr, rExpr)       |
    Skip -> [c, Void]                                                          |
    Assn(l, r) -> evalAssn(l, r)                                               |
    Seq(l, r) -> case eval(c, l) of [newC, _] -> eval(newC, r) esac            |
    Read(x) -> evalRead(x)                                                     |
    Write(e) -> evalWrite(e)                                                   |
    If(ifExpr, thenExpr, tailExpr) -> evalIf(ifExpr, thenExpr, tailExpr)       |
    While(whileExpr, whileStmt) -> evalWhile(whileExpr, whileStmt)             |
    DoWhile(doWhileStmt, doWhileExpr) -> evalDoWhile(doWhileStmt, doWhileExpr) |
    Ignore(e) -> case eval(c, e) of [c, _] -> [c, Void] esac                   |
    Call(name, exprs) -> evalCall(name, exprs)                                 |
    Scope(defs, expr) -> evalScope(defs, expr)                                 |
    _ -> failure("No implementation for expr in eval.\n")
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}