-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (varName) -> st (varName)
  | Const (intConst) -> intConst
  | Binop (op, lhsExpr, rhsExpr) ->
      var lhsValue = evalExpr (st, lhsExpr);
      var rhsValue = evalExpr (st, rhsExpr);
      case op of
        "+"  -> lhsValue +  rhsValue
      | "-"  -> lhsValue -  rhsValue
      | "*"  -> lhsValue *  rhsValue
      | "/"  -> lhsValue /  rhsValue
      | "%"  -> lhsValue %  rhsValue
      | "==" -> lhsValue == rhsValue
      | "!=" -> lhsValue != rhsValue
      | "<"  -> lhsValue <  rhsValue
      | "<=" -> lhsValue <= rhsValue
      | ">"  -> lhsValue >  rhsValue
      | ">=" -> lhsValue >= rhsValue
      | "&&" -> lhsValue && rhsValue
      | "!!" -> lhsValue !! rhsValue
      esac
  esac
}

