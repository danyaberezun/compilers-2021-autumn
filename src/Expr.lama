-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (s) -> st (s)
    | Const (i) -> i
    | Binop (op, a, b) -> evalBinOp (op, evalExpr (st, a), evalExpr (st, b))
  esac
}

public fun evalBinOp (op, a, b) {
  case op of
    "+" -> a + b
    | "-" -> a - b
    | "*" -> a * b
    | "/" -> a / b
    | "%" -> a % b
    | "<" -> a < b
    | "<=" -> a <= b
    | ">" -> a > b
    | ">=" -> a >= b
    | "==" -> a == b
    | "!=" -> a != b
    | "&&" -> a && b
    | "!!" -> a !! b 
    | _ -> failure ("Unknown operator '%s'\n", op)
  esac
}
