-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        Scope (def list, expr)       |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[stack, world], expr) {
  fun addDefs (state, defs) {
    foldl (
      fun (state, def) {
        case def of
          Var (vars) -> addNames(state, vars)
        | Fun(name, args, body) -> addFunction(state, name, args, body)
        esac
      },
      state,
      defs
    )
  }

  fun passArguments (state, args, vals) {
    foldl (
      fun (state, [argI, valI]) {
        addName(state, argI, valI)
      },
      state,
      zip(args, vals)
    )
  }

  fun evalBinop(operation, lExpr, rExpr) {
    case eval(c, lExpr) of
      [newC, Val (r1)] ->
        case eval(newC, rExpr) of
          [newC2, Val (r2)] -> [newC2, Val (evalOp(operation, r1, r2))]
        esac
    esac
  }

  fun evalAssn(l, r) {
    case eval(c, l) of 
      [newC, l] ->
        case eval(newC, r) of 
          [newC2@[newStack, newWorld], Val(r)] ->
            case l of 
              Ref (l) -> [[newStack <- [l, Val(r)], newWorld], Val(r)]
            | ElemRef (arr@#str, idx) -> arr[idx] := r; [newC2, Val(r)]
            | ElemRef (arr@#array, idx) -> arr[idx] := Val(r); [newC2, Val(r)]
            | ElemRef (Sexp(_, vals), idx) ->
                vals[idx] := Val(r); [newC2, Val(r)]
            esac
        esac
    esac
  }

  fun evalWhile(whileCond, whileBody) {
    case eval(c, whileCond) of
      [newC, Val(0)] -> [c, Void]
    | [newC, _] ->
        case eval(newC, whileBody) of
          [newC2, _] -> eval(newC2, While (whileCond, whileBody))
        esac
    esac
  }

  fun evalIf(condExpr, thenExpr, tailExpr) {
    case eval(c, condExpr) of
      [newC, Val(0)] -> eval(newC, tailExpr)
    | [newC, _] -> eval(newC, thenExpr)
    esac
  }

  fun evalDoWhile(doWhileBody, doWhileCond) {
    case eval(c, doWhileBody) of
      [newC, _] -> eval(newC, While(doWhileCond, doWhileBody))
    esac
  }

  fun evalCall(f, argsExpr) {
    case lookupFun(stack, f) of
      Fun(args, External) ->
        case evalList(c, argsExpr) of
          [_, vals] ->
            var args = foldr(fun (acc, Val (x)) { x : acc }, {}, vals);
            case evalBuiltin(f, args, world) of
              [v, newWorld] -> [[stack, newWorld], Val(v)]
            esac
        esac
    | Fun(args, body) ->
        case evalList(c, argsExpr) of
          [[newState, newWorld], vals] ->
            var statePassed =
              passArguments(enterFunction(newState), args, vals);
            case eval([statePassed, newWorld], body) of
              [[funState, newWorld2], r] ->
                [[leaveFunction(stack, getGlobal(funState)), newWorld2], r]
            esac
        esac
    esac
  }

  fun evalScope(defs, expr) {
    var stInScope = enterScope(stack);
    var stWithDefs = addDefs(stInScope, defs);
    case eval([stWithDefs, world], expr) of
      [[newStack, newWorld], v] ->
        var leftState = leaveScope(newStack);
        var leftC = [leftState, newWorld];
        [leftC, v]
    esac
  }

  fun evalSet(x, expr) {
    case eval(c, expr) of
      [[newState, newWorld], v] -> [[newState <- [x, v], newWorld], v]
    esac
  }

  fun evalArray(valsList) {
    case evalList(c, valsList) of
      [newC, vals] -> [newC, Val(listArray(vals))]
    esac
  }

  fun evalSexp(name, valsList) {
    case evalList(c, valsList) of
      [newC, vals] -> [newC, Val(Sexp(name, listArray(vals)))]
    esac
  }

  fun evalElem(arrExpr, idxExpr) {
    case eval(c, arrExpr) of
      [newC, Val(arr)] ->
        case eval(newC, idxExpr) of
          [newC2, Val (idx)] ->
            [
              newC2,
              case arr of
                #str          -> Val(arr[idx])
              | #array        -> arr[idx]
              | Sexp(_, vals) -> vals[idx]
              esac
            ]
        esac
    esac
  }

  fun evalElemRef(arrExpr, idxExpr) {
    case eval(c, arrExpr) of
      [newC, Val(arr)] ->
        case eval(newC, idxExpr) of
          [newC, Val(idx)] -> [newC, ElemRef(arr, idx)]
        esac
    esac
  }

  case expr of
    Var(varName) -> [c, lookup(stack, varName)]                                |
    Const(valName) -> [c, Val(valName)]                                        |
    Ref(refName) -> [c, Ref(refName)]                                          |
    Binop(operation, lExpr, rExpr) -> evalBinop(operation, lExpr, rExpr)       |
    Skip -> [c, Void]                                                          |
    Assn(l, r) -> evalAssn(l, r)                                               |
    Seq(l, r) -> case eval(c, l) of [newC, _] -> eval(newC, r) esac            |
    If(cond, thenExpr, elseExpr) -> evalIf(cond, thenExpr, elseExpr)           |
    While(condExpr, bodyExpr) -> evalWhile(condExpr, bodyExpr)                 |
    DoWhile(bodyExpr, condExpr) -> evalDoWhile(bodyExpr, condExpr)             |
    Ignore(e) -> case eval(c, e) of [c, _] -> [c, Void] esac                   |
    Call(name, exprs) -> evalCall(name, exprs)                                 |
    Scope(defs, expr) -> evalScope(defs, expr)                                 |
    Set(x, expr) -> evalSet(x, expr)                                           |
    String(s) -> [c, Val(s)]                                                   |
    Array(valsList) -> evalArray(valsList)                                     |
    Sexp(name, valsList) -> evalSexp(name, valsList)                           |
    Elem(arrExpr, idxExpr) -> evalElem(arrExpr, idxExpr)                       |
    ElemRef (arrExpr, idxExpr) -> evalElemRef(arrExpr, idxExpr)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}