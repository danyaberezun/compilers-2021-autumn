-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addDefs (state, defs) {
  foldl (fun (s, def) {
    case def of
      Var (names) -> s.addNames (names)
    | Fun (name, args, body) -> s.addFunction(name, args, body)
    esac
  }, state, defs)
}

fun addArgumentNames (state, args, params) {
  foldl (fun (s, [arg, param]) {
    s.addName (arg, param)
  }, state, zip (args, params))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of 
    Assn (e1, e2) -> case eval (c, e1) of
      [c, Ref (x)] -> case eval (c, e2) of
        [c@[s, w], v] -> [[s <- [x, v], w], v]
      esac
    esac
  | Seq (e1, e2) -> case eval (c, e1) of
      [c, _] -> eval (c, e2)
    esac
  | Skip -> [c, Bottom]
  | Read (x) -> case readWorld (w) of
      [v, w] -> [[s <- [x, v], w], Bottom]
    esac
  | Write (e) -> case eval (c, e) of
      [c@[s, w], v] -> [[s, writeWorld (v, w)], Bottom]
    esac
  | If (cond, t, e) -> case eval (c, cond) of
      [c, v] -> if v != 0 then eval (c, t) else eval (c, e) fi
    esac
  | While (cond, b) -> case eval (c, cond) of
      [c, v] -> if v == 0 then [c, Bottom] else case eval (c, b) of
        [c, _] -> eval (c, expr)
      esac fi
    esac
  | DoWhile (b, cond) -> case eval (c, b) of
      [c, _] -> eval (c, While (cond, b))
    esac
  | Var (x) -> [c, s.lookup (x)]
  | Ref (x) -> [c, Ref (x)]
  | Const (v) -> [c, v]
  | Binop (op, e1, e2) -> case eval (c, e1) of
      [c, v1] -> case eval (c, e2) of
        [c, v2] -> [c, evalOp (op, v1, v2)]
      esac
    esac
  | Ignore (e) -> case eval (c, e) of
      [c, _] -> [c, Bottom]
    esac
  | Scope (defs, expr) -> case s.enterScope.addDefs(defs) of
      s -> case eval ([s, w], expr) of
        [[s, w], v] -> [[s.leaveScope, w], v]
      esac
    esac
  | Call (f, exprs) -> case s.lookup (f) of
      Fun (args, body) -> case c.evalList (exprs) of
        [c@[sOuter, w], params] -> case sOuter.enterFunction.addArgumentNames (args, params) of
          s -> case eval ([s, w], body) of
            [[sFinish, w], v] -> [[sOuter.leaveFunction (sFinish.getGlobal), w], v]
          esac
        esac
      esac
    esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}