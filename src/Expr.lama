-- Expression evaluator

import List;
import State;


public fun evalOp(name, var1, var2) {
  case name of
   "!!" -> var1 !! var2
  | "&&" -> var1 && var2
  | "==" -> var1 == var2
  | "!=" -> var1 != var2
  | "<=" -> var1 <= var2
  | "<" -> var1 < var2
  | ">=" -> var1 >= var2
  | ">" -> var1 > var2
  | "+" -> var1 + var2
  | "-" -> var1 - var2
  | "*" -> var1 * var2
  | "/" -> var1 / var2
  | "%" -> var1 % var2
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
  Var (s) -> st(s)
  |Const (s) -> s
  |Binop (name, expr1, expr2) -> evalOp(name, evalExpr(st, expr1), evalExpr(st, expr2))
  esac
}
