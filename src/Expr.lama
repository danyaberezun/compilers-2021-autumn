-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var   (varName) -> st (varName)       |
    Const (valName) -> valName            |
    Binop (operation, lExpr, rExpr) ->
      evalBinOp(operation,
                evalExpr(st, lExpr),
                evalExpr(st, rExpr))
  esac
}


-- Binary operation evaluator: takes operation, left value and
-- right value, returns result of the operation.

public fun evalBinOp(op, l, r) {
  case op of
    "+" ->  l + r                           |
    "-" ->  l - r                           |
    "*" ->  l * r                           |
    "/" ->  l / r                           |
    "%" ->  l % r                           |
    ">" ->  l > r                           |
    "<" ->  l < r                           |
    "<=" -> l <= r                          |
    ">=" -> l >= r                          |
    "==" -> l == r                          |
    "!=" -> l != r                          |
    x -> failure ("Operation"
                  + op
                  + " is not implemented.")
  esac
}
