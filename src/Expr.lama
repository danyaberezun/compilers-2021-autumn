-- Expression evaluator

import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr(st, expr) {
  case expr of
      Var(ident)       -> st(ident)
    | Const(int)       -> int
    | Binop (op, x, y) -> getOp(op)(evalExpr(st, x), evalExpr(st, y))
  esac
}

fun getOp(op) {
  case op of
      "+"  -> fun (a, b) { a + b }
    | "-"  -> fun (a, b) { a - b }
    | "*"  -> fun (a, b) { a * b }
    | "%"  -> fun (a, b) { a % b }
    | "/"  -> fun (a, b) { a / b }
    | "==" -> fun (a, b) { a == b }
    | "!=" -> fun (a, b) { a != b }
    | "<"  -> fun (a, b) { a < b }
    | "<=" -> fun (a, b) { a <= b }
    | ">"  -> fun (a, b) { a > b }
    | ">=" -> fun (a, b) { a >= b }
    | "&&" -> fun (a, b) { a && b }
    | "!!" -> fun (a, b) { a !! b }
  esac
}
