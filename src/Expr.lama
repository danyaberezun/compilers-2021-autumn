-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addDefs (st, v) {
  case v of
	  {}    -> st
	| h : t ->
      st := case h of 
              Var (name)             -> st.addNames (name)
            | Fun (name, args, body) -> st.addFunction (name, args, body)
            esac;
      
      addDefs (st, t)
	esac  
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Assn    (x, e)       ->
      case evalList (c, {x, e}) of
        [c@[st, w], {x, e}] ->
          case x of
            Ref (x) -> [[st <- [x, Val (e)], w], e]
          | ElemRef (xs, i) -> [c, xs[i] := e]
          esac 
      esac
  | Set     (x, e)       -> eval (c, Assn (Ref (x), e))
  | Seq     (f, s)       ->
      case eval (c, f) of [c, _] -> eval (c, s) esac
  | Skip                 -> [c, 0]
  | Read    (v)          ->
      case readWorld (w) of [x, w] -> [[st <- [v, Val (x)], w], 0] esac
  | Write   (e)          ->
      case eval (c, e) of [[st, w], v] -> [[st, writeWorld (v, w)], 0] esac
  | If      (e, t, f)    ->
      case eval (c, e) of [c, e] -> eval (c, if e then t else f fi) esac
  | While   (e, b)       ->
      case eval (c, e) of
        [c, v] -> if v then eval (eval (c, b).fst, expr) else [c, 0] fi
      esac
  | DoWhile (b, e)       ->
      case eval (c, b) of
        [c, _] ->
          case eval (c, e) of
            [c, v] -> if v then eval (c, expr) else [c, 0] fi
          esac
      esac
  | Var     (v)          -> [c, case st.lookup (v) of Val (v) -> v esac]
  | Ref     (r)          -> [c, Ref (r)]
  | Const   (x)          -> [c, x]
  | Binop   (op, x, y)   ->
      case evalList (c, {x, y}) of
        [c, {x, y}] -> [c, evalOp (op, x, y)]
      esac
  | Scope   (v, es)      ->
      st := addDefs (st.enterScope, v);
      case eval ([st, w], es) of 
        [[st, w], v] -> [[st.leaveScope, w], v]
      esac
  | Call    (n, eas)     ->
      case st.lookup (n) of
        Fun (as, b) -> 
          case evalList (c, eas) of
            [[st, w], eas] -> 
              case b of 
                External -> case evalBuiltin (n, eas, w) of [v, w] -> [[st, w], v] esac
              | _        ->
                  var nc = [foldl (fun (st, [a, ea]) { st.addName (a, Val (ea)) }, 
                                   st.enterFunction, 
                                   as.zip (eas)),
                            w];
                  case eval (nc, b) of
                    [[nst, w], v] -> [[st.leaveFunction (nst.getGlobal), w], v]
                  esac
              esac
              
          esac
      esac
  | Ignore  (e)          -> eval (c, e)
  | String  (x)          -> [c, x]
  | Sexp    (_, as)      -> eval (c, Array (as))
  | Array   (es)         -> case evalList (c, es) of [c, es] -> [c, listArray (es)] esac
  | Elem    (es, i)      -> case evalList (c, {es, i}) of [c, {es, i}] -> [c, es[i]] esac
  | ElemRef (es, i)      -> case evalList (c, {es, i}) of [c, {es, i}] -> [c, ElemRef (es, i)] esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
