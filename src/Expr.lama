-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

fun addNamesWithValues (state, names, values) {
  foldl (
    fun (s, [n, v]) { s.addName (n, v) },
    state,
    zip (names, values)
  )
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addDef (state, def) {
  case def of
    Var (names)            -> addNames (state, names)
  | Fun (name, args, body) -> addFunction (state, name, args, body)
  esac
}

fun addDefs (state, defs) {
  foldl (addDef, state, defs)
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, world], expr) {
  -- printf ("Eval:\n\t%s\n", expr.string);
  case (expr) of
    Assn  (left, right) ->
      case evalList (c, {left, right}) of [[st, w], assn] ->
        case assn of 
          Ref (name)        :value:_ -> [[st <- [name, value], w], value]
        | ElemRef (arr, idx):value:_ -> arr[idx] := value; [[st, w], value]
        esac
      esac
  | Set (name, expr) -> eval (c, Assn (Ref (name), expr))
  | Seq (e1, e2) ->
      case eval (c, e1) of
        [c, _] -> eval (c, e2)
      esac
  | Skip -> [c, None]
  | Read (s) -> 
      case readWorld (world) of
        [n, world] -> [[st <- [s, n], world], None]
      esac
  | Write (e) ->
      case eval (c, e) of
        [[st, world], v] -> [[st, writeWorld (v, world)], None]
      esac
  | If (cond, bt, bf) ->
      case eval (c, cond) of
        [c, v] -> if v then eval (c, bt) else eval (c, bf) fi
      esac
  | While (e, s) ->
      case eval (c, e) of
        [c, v] -> if v then eval (c, Seq (s, While (e, s))) else [c, None] fi
      esac
  | DoWhile (b, cond) -> eval (c, Seq (b, While (cond, b)))
  | Var (s) -> [c, st.lookup (s)]
  | Ref (s) -> [c, Ref (s)]
  | Const (n) -> [c, n]
  | Ignore (e) -> eval (c, e)
  | Binop (o, e1, e2) ->
      case eval (c, e1) of
        [c, v1] ->
          case eval (c, e2) of
            [c, v2] -> [c, evalOp (o, v1, v2)]
          esac
      esac
  | Call (name, args) ->
      case st.lookup (name) of
        Fun (argNames, body) -> 
          case evalList (c, args) of [[stArgs, w], argValues] ->
            case body of
              External -> case evalBuiltin (name, argValues, w) of [ret, w] -> [[st, w], ret] esac
            | _ ->
              case eval ([addNamesWithValues (enterFunction (stArgs), argNames, argValues), w], body) of [[st, w], ret] ->
                [[c[0].leaveFunction (st.getGlobal), w], ret]
              esac
            esac
          esac
        | _ -> failure ("'%s' is not a name of any function\n", name.string)
      esac
  | Scope (defs, expr) ->
      case st.enterScope.addDefs (defs) of
        stWithDefs ->
          case eval ([stWithDefs, world], expr) of
            [[stAfterScope, wAfterScope], ret] -> [[stAfterScope.leaveScope, wAfterScope], ret]
          esac
      esac
  | Array (elemExprs) ->
      case evalList (c, elemExprs) of [c, elems] ->
        [c, listArray (elems)]
      esac
  | String (s) -> [c, s]
  | Elem (arrExpr, idxExpr) ->
      case evalList (c, { arrExpr, idxExpr }) of [c, { arr, idx }] ->
        case arr of
          Sexp (_, arr) -> [c, arr[idx]]
        | _             -> [c, arr[idx]]
        esac
      esac
  | ElemRef (arrExpr, idxExpr) ->
      case evalList (c, { arrExpr, idxExpr }) of [c, { arr, idx }] ->
        case arr of
          Sexp (_, arr) -> [c, ElemRef (arr, idx)]
        | _             -> [c, ElemRef (arr, idx)]
        esac
      esac
  | Sexp (name, argExprs) ->
      case evalList (c, argExprs) of [c, args] ->
        [c, Sexp (name, listArray (args))]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}