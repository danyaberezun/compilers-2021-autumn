-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
      Var (_) -> skip
    | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
      Fun (_, _) -> skip
    | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addDefs (state, defs) {
  foldl(fun(state, def) {
    case def of
        Fun(name, args, body) -> addFunction(state, name, args, body)
      | Var(names) -> addNames(state, names)
    esac
  }, state, defs)
}

fun addArgs(state, args, vals) {
  foldl(fun(state, [arg, v]) {
    addName(state, arg, v)
  }, state, zip(args, vals))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
    case eval (c, e) of
      [c, v] -> [c, v : vals]
    esac
  },
    [c, {}],
    exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval(c@[s, w], expr) {
  case expr of
      Var(v) -> [c, lookup(s, v)]
    | Assn(e1, e2)        ->
      case evalList(c, { e1, e2 }) of
        [c@[s, w], { lft, rgt }] -> [[s <- [lft, rgt], w], rgt]
      esac
    | Seq(e1, e2)         ->
      case evalList(c, { e1, e2 }) of
        [c, { _, snd }] -> [c, snd]
      esac
    | Skip                -> [c, None]
    | Read(x)             -> case readWorld(w) of
      [v, w] -> [[s <- [x, v], w], None]
    esac
    | Write(e)            -> case eval(c, e) of
      [c@[s, w], variable] -> [[s, writeWorld(variable, w)], None]
    esac
    | If(cond, tE, fE)    -> case eval(c, cond) of
      [c, condRes] -> eval(c, if condRes then tE else fE fi)
    esac
    | w@While(cond, body) -> case eval(c, cond) of
      [c, condRes] -> if condRes then evalList(c, {body, w}) else [c, None] fi
    esac
    | DoWhile(body, cond) -> case eval(c, body) of
      [c, _] -> eval(c, While(cond, body))
    esac
    | Var(x)              -> [c, s(x)]
    | Ref(x)              -> [c, x]
    | Const(n)            -> [c, n]
    | Binop(op, l, r)     -> case evalList(c, { l, r }) of
      [c, { eL, eR }] -> [c, evalOp(op, eL, eR)]
    esac
    | Ignore(e)           -> case eval(c, e) of
      [c, _] -> [c, None]
    esac
    | Scope(defs, expr) -> case enterScope(s) of
      s -> case addDefs(s, defs) of
        s -> case eval([s, w], expr) of
          [[s, w], res] -> [[leaveScope(s), w], res]
        esac
      esac
    esac
    | Call(name, args) -> case evalList(c, args) of
      [[s, w], vals] -> case lookup(s, name) of
        Fun(args, body) -> case enterFunction(s) of
          sf -> case addArgs(sf, args, vals) of
            sf -> case eval([sf, w], body) of
              [[sf, w], res] -> [[leaveFunction(s, getGlobal(sf)), w], res]
            esac
          esac
        esac
      esac
    esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}