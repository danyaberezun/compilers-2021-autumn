-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of 
    Var (x) -> st(x) 
  | Const (num) -> num 
  | Binop(op, exp_left, exp_right) -> 
    var left_result = evalExpr(st, exp_left);
    var right_result = evalExpr(st, exp_right);
    case op of 
      "+" ->  left_result + right_result 
    | "-" ->  left_result - right_result 
    | "*" ->  left_result * right_result 
    | "/" ->  left_result / right_result
    | "%" ->  left_result % right_result 
    | "<" ->  left_result < right_result 
    | ">" ->  left_result > right_result
    | "<=" -> left_result <= right_result
    | ">=" -> left_result >= right_result
    | "==" -> left_result == right_result
    | "!=" -> left_result != right_result 
    | "&&" -> left_result && right_result 
    | "!!" -> left_result !! right_result
    esac 
  esac
}
