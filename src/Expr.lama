-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

public fun eval (c@[s, w], expr) {
  case expr of
    Var (x)            -> [c, s (x)]
  | Const (n)          -> [c, n]
  | Binop (s1, e1, e2) ->
      case eval (c, e1) of
        [c, v1] ->
          case eval (c, e2) of
            [c, v2] -> [c, evalOp (s1, v1, v2)]
          esac
      esac
  | Skip               -> [c, 0]
  | Write (e)          ->
      case eval (c, e) of
        [[s, w], v] -> [[s, writeWorld (v, w)], 0]
      esac
  | Read (x)           ->
      case readWorld (w) of
        [v, new_w] -> [[s <- [x, v], new_w], 0]
      esac
  | Seq (s1, s2)       ->
     case eval (c, s1) of
       [c, _] -> eval (c, s2)
     esac
  | Assn (x, e)        ->
      case eval (c, e) of
        [c1, v1] ->
          case eval (c1, x) of
            [[s, w], v2] -> [[s <- [v2, v1], w], v1]
          esac
      esac
  | If (e, s1, s2)     ->
      case eval (c, e) of
        [c, v] -> if v == 0 then eval (c, s2) else eval (c, s1) fi
      esac
  | While (e, s1)      ->
      case eval (c, e) of
        [c, v] -> if v == 0 then [c, 0] else eval (eval (c, s1)[0], While (e, s1)) fi
      esac
  | DoWhile (s1, e)    -> eval (eval (c, s1)[0], While (e, s1))
  | Ref (x)            -> [c, x]
  | Ignore (e)         -> [eval (c, e)[0], 0]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
