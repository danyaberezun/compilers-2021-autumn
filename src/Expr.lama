-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun calcBinop (op) {
   case op of  
    "+" -> infix +
  | "-" -> infix -
  | "*" -> infix *
  | "/" -> infix /
  | "%" -> infix %
  | "==" -> infix ==
  | "!=" -> infix !=
  | "<" -> infix <
  | "<=" -> infix <=
  | ">" -> infix >
  | ">=" -> infix >=
  | "&&" -> infix &&
  | "!!" -> infix !!
  esac
}

public fun evalExpr (st, expr) {
  case  expr of
    Var (x) -> st(x)
    | Const (c) -> c
    | Binop (op, l, r) -> calcBinop(op) (evalExpr(st, l), evalExpr(st, r))
  esac
}
