-- Expression evaluator

import List;
import State;
import World;
import InterpretUtils;


-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {addName (s, name, Var (0))}, state, names)
}

fun assignValues (state, names, values) {
  state := addNames (state, names);
  foldl (fun (s, [n, I (v)]) {s <- [n, Var (v)]}, state, zip (names, values))
}

fun addDefintions (s, definitions) {
  foldl (fun (s, def) {
    case def of
      Fun (name, args, body) -> addName (s, name, Fun (args, body))
    | Var (names)            -> addNames (s, names)
    esac
  }, s, definitions)
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

-- returns state and value 
-- value = V
--         I (value)
--         R (name)
fun eval (c@[s, w], expr) {
  --case expr of I -> 0 esac;
  case expr of
    Var (name) -> 
    case lookup (s, name) of Var (value) ->
      [c, I (value)]
    esac
  | Ref (name) -> [c, R (name)]
  | Const (value) -> [c, I (value)]
  | Binop (op, l, r) -> 
    case eval (c, l) of [c, I (l)] ->
      case eval (c, r) of [c, I (r)] ->
        [c, I (opValue (op) (l, r))]
      esac
    esac
  | Assn (eName, eValue) ->
    case eval (c, eName) of [c, R (name)] ->
      case eval (c, eValue) of [[s, w], v@I (value)] ->
        [[s <- [name, Var (value)], w], v]
      esac
    esac
  | Seq (e1, e2) ->
    case eval (c, e1) of [c, V] ->
      eval (c, e2)
    esac
  | Skip -> [c, V]
  | Read (eName) ->
    case eval (c, eName) of [[s, w], R (name)] ->
      case readWorld (w) of [value, w] ->
        [[s <- [name, Var (value)], w], V]
      esac
    esac
  | Write (eValue) ->
    case eval (c, eValue) of [[s, w], I (value)] ->
      case writeWorld (value, w) of w ->
        [[s, w], V]
      esac
    esac
  | If (eCond, eThen, eElse) ->
    case eval (c, eCond) of [c, I (value)] ->
      if value
      then eval (c, eThen)
      else eval (c, eElse)
      fi
    esac
  | While (eCond, eLoop) -> eval (c, Ignore (If (eCond, Seq (eLoop, expr), Skip)))
  | DoWhile (eLoop, eCond) -> eval (c, Seq (eLoop, While (eCond, eLoop)))
  | Ignore (e) ->
    case eval (c, e) of [c, _] ->
      [c, V]
    esac
  | Call (name, args) -> 
    case lookup (s, name) of Fun (params, sexpr) ->
      case evalList (c, args) of [[s, w], argVals] -> 
        case enterFunction (s) of fs ->
          case enterScope (fs) of fs ->
            case assignValues (fs, params, argVals) of fs ->
              case eval ([fs, w], sexpr) of [[fs, w], ret] ->
                [[leaveFunction (s, getGlobal (fs)), w], ret]
              esac
            esac
          esac
        esac
      esac
    esac
  | Scope (defs, expr) ->
    case enterScope (s) of s ->
      case addDefintions (s, defs) of s -> 
        case eval ([s, w], expr) of [[s, w], ret] ->
          [[leaveScope (s), w], ret]
        esac
      esac
    esac
  |  _ -> I
  esac
}
