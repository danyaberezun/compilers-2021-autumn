-- Expression evaluator

import List;
import State;

(* Implementation *)
-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}
(* End *)

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

(* Assignment
public fun evalExpr (st, expr) {
  failure ("evalExpr not implemented\n")
}
   End *)
(* Implementation *)
public fun evalExpr (st, expr) {
  case expr of
    Var   (x)        -> st (x)
  | Const (n)        -> n
  | Binop (op, l, r) -> evalOp (op, evalExpr (st, l), evalExpr (st, r))     
  esac
}
(* End *)
