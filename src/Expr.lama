-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn    (l, r)         -> case evalList (c, {l, r}) of
                                [[s, w], {REF (x), v}] -> [[s <- [x, v], w], v]
                              esac
  | Seq     (s1, s2)       -> case eval (c, s1) of
                                [c, _] -> eval (c, s2)
                              esac

  | Skip                   -> [c, VOID]
  | Read    (x)            -> case readWorld (w) of
                                [z, w] -> [[s <- [x, z], w], VOID]
                              esac
  | Write   (e)            -> case eval (c, e) of
                                [[s, w], v] -> [[s, writeWorld (v, w)], VOID]
                              esac
  | If      (e, s1, s2)    -> case eval (c, e) of
                                [c, n] -> if n != 0 then eval (c, s1) else eval (c, s2) fi
                              esac
  | wh@While (e, s)        -> case eval (c, e) of
                                [c, n] -> if n != 0 then case eval (c, s) of [c, v] -> eval (c, wh) esac else [c, VOID] fi
                              esac
  | DoWhile  (s, e)        -> eval (c, Seq (s, While (e, s)))
  | Var      (x)           -> [c, s (x)]
  | Ref      (x)           -> [c, REF (x)]
  | Const    (z)           -> [c, z]
  | Binop    (op, l, r)    -> case evalList (c, {l, r}) of
                                [c, {w, v}] -> [c, evalOp (op, w, v)]
                              esac
  | Ignore   (e)           -> case eval (c, e) of [c, _] -> [c, VOID] esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
