-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
    case expr of 
      Var (variable) -> st (variable)
    | Const (c) -> c
    | Binop(operation, leftExpression, rightExpression) -> 
          case operation of 
              "+" -> evalExpr(st, leftExpression) + evalExpr(st, rightExpression)
            | "-" -> evalExpr(st, leftExpression) - evalExpr(st, rightExpression)
            | "*" -> evalExpr(st, leftExpression) * evalExpr(st, rightExpression)
            | "/" -> evalExpr(st, leftExpression) / evalExpr(st, rightExpression)
            | "==" -> evalExpr(st, leftExpression) == evalExpr(st, rightExpression)
            | "!=" -> evalExpr(st, leftExpression) != evalExpr(st, rightExpression)
            | "&&" -> evalExpr(st, leftExpression) && evalExpr(st, rightExpression)
            | "!!" -> evalExpr(st, leftExpression) !! evalExpr(st, rightExpression)
            | ">" -> evalExpr(st, leftExpression) > evalExpr(st, rightExpression)
            | "<" -> evalExpr(st, leftExpression) < evalExpr(st, rightExpression)
            | "<=" -> evalExpr(st, leftExpression) <= evalExpr(st, rightExpression)
            | ">=" -> evalExpr(st, leftExpression) >= evalExpr(st, rightExpression)
            | "%" -> evalExpr(st, leftExpression) % evalExpr(st, rightExpression)
          esac
    esac
}