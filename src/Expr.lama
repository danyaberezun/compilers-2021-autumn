-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (x) -> st(x)
  | Const (x) -> x
  | Binop(operation, left_expression, right_expression) -> evalOperation(operation, evalExpr(st, left_expression), evalExpr(st, right_expression))
  esac
}

public fun evalOperation (operation, left, right) {
  case operation of
    "+" ->  left + right
  | "-" ->  left - right
  | "*" ->  left * right
  | "/" ->  left / right
  | "%" ->  left % right
  | ">" ->  left > right
  | "<" ->  left < right
  | "==" -> left == right
  | "!=" -> left != right
  | "<=" -> left <= right
  | ">=" -> left >= right
  | "&&" -> left && right
  | "!!" -> left !! right
  esac
}