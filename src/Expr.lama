-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
      Var (variable) -> st(variable)
    | Const (const) -> const
    | Binop (op, l, r) -> binop(op) (evalExpr(st, l), evalExpr(st, r)) -- Thus in expr context can't be changed
  esac
}

public fun binop (op) {
  case op of
      "+" -> infix +
    | "-" -> infix -
    | "*" -> infix *
    | "/" -> infix /
    | "%" -> infix %
    | "==" -> infix ==
    | "!=" -> infix !=
    | "<" -> infix <
    | "<=" -> infix <=
    | ">" -> infix >
    | ">=" -> infix >=
    | "&&" -> infix &&
    | "!!" -> infix !!
  esac
}