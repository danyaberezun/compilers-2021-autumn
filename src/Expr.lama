-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of
    Assn(ref, e) ->
      case evalList(c, {ref, e}) of
        [c@[s, w], {Ref(name), Val(e)}] -> [[s <- [name, e], w], Val(e)]
      esac
    | Seq(e1, e2) ->
      case eval(c, e1) of
        [c, _] -> eval(c, e2)
      esac
    | Skip -> [c, Bottom]
    | Read(expr) ->
      case eval(c, expr) of
        [c@[s, w], Ref(name)] -> case readWorld(w) of
          [v, w] -> [[s <- [name, v], w], Bottom]
        esac
      esac
    | Write(e) ->
      case eval(c, e) of
         [c@[s, w], Val(e)] -> [[s, writeWorld(e, w)], Bottom]
      esac
    | If(cond, e1, e2) ->
      case eval(c, cond) of
        [c, Val(0)] -> eval(c, e2)
        | [c, _] -> eval(c, e1)
      esac
    | While(cond, e) ->
      case eval(c, cond) of
        [c, Val(0)] -> [c, Bottom]
        | [c, _] -> eval(eval(c, e)[0], expr)
      esac
    | DoWhile(e, cond) ->
      case eval(eval(c, e)[0], cond) of
        [c, Val(0)] -> [c, Bottom]
        | [c, _] -> eval(c, expr)
      esac
    | Var(name) -> [c, Val(s.lookup(name))]
    | Ref(name) -> [c, Ref(name)]
    | Const(v) -> [c, Val(v)]
    | Binop(op, e1, e2) ->
      case evalList(c, {e1, e2}) of
        [c, {Val(e1), Val(e2)}] -> [c, Val(evalOp(op, e1, e2))]
      esac
    | Ignore(e) -> [eval(c, e)[0], Bottom]
    | Scope(context, body) ->
      fun addContext(s, context) {
        case context of
          cur:tail ->
            case cur of
              Var(name) -> addNames(addContext(s, tail), name)
              | Fun(name, args, body) -> addFunction(addContext(s, tail), name, args, body)
            esac
          | {} -> s
        esac
      }
      s := addContext(enterScope(s), context);
      case eval([s, w], body) of
        [[s, w], v] -> [[leaveScope(s), w], v]
      esac
    | Call(f, context) ->
        case s.lookup(f) of
          Fun(args, body) -> case evalList(c, context) of
            [c@[ns, w], context] ->
              fun addArgs (s, args) {
                case args of
                  [name, Val(v)] : tail -> addArgs(s, tail).addName(name, v)
                  | {} -> s
                esac
              }

              var nc = [addArgs(enterFunction(s), zip(args, context)), w];
              fun ([[s, w], v]) { [[leaveFunction(ns, s.getGlobal), w], v] }(eval(nc, body))
            esac
        esac
    | _ -> failure ("eval(expr) not implemented: %s\n", expr.string)
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}