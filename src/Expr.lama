-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun applyBinop(o1, o2, op) {
    case op of
      "+"  -> o1 +  o2
    | "-"  -> o1 -  o2
    | "*"  -> o1 *  o2
    | "/"  -> o1 /  o2
    | "%"  -> o1 %  o2
    | "==" -> o1 == o2
    | "!=" -> o1 != o2
    | "<"  -> o1 <  o2
    | "<=" -> o1 <= o2
    | ">"  -> o1 >  o2
    | ">=" -> o1 >= o2
    | "&&" -> o1 && o2
    | "!!" -> o1 !! o2
    esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var (s) -> st(s)
  | Const (x) -> x
  | Binop (op, e1, e2) -> applyBinop(evalExpr(st, e1), evalExpr(st, e2), op)
  esac
}
