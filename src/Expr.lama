-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   ({expr}, expr)       |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[state, world], expr) {
  fun evalDef (s, def) {
    case def of
      Var (ds)               -> s.addNames (ds)
    | Fun (name, args, body) -> s.addFunction (name, args, body)
    esac
  }

  case expr of
    Scope (ds, e) ->
      case eval ([foldl (evalDef, state.enterScope, ds), world], e) of
        [[s, w], vs] -> [[s.leaveScope, w], vs]
      esac
  | Assn (l, r) ->
      case evalList (c, {l, r}) of
        [[st1, w1], {Ref (x), v}] -> [[st1 <- [x, v], w1], v]
      esac
  | Seq (e1, e2) ->
      case eval (c, e1) of
        [cc, _] -> eval (cc, e2)
      esac
  | Skip         -> [c, Bot]
  | Read (x)     -> var zw = readWorld (world), z = zw.fst, w = zw.snd; [[state <- [x, z], w], Bot]
  | Write (e)    ->
      case eval (c, e) of
        [[st1, w1], v] -> [[st1, writeWorld (v, world)], Bot]
      esac
  | If (e, s1, s2) ->
      case eval (c, e) of
        [cc, v] -> if v == 0 then eval (cc, s2) else eval (cc, s1) fi
      esac
  | While (e, s) ->
      case eval (c, e) of
        [cc, v] -> if v == 0
                   then [cc, Bot]
                   else case eval (cc, s) of
                           [cc, _] -> eval (cc, While (e, s))
                         esac
                   fi
      esac
  | DoWhile (s, e) -> eval (c, Seq (s, While (e, s)))
  | Var     (v) -> [c, state.lookup (v)]
  | Ref     (r) -> [c, Ref (r)]
  | Const   (n) -> [c, n]
  | Binop   (op, l, r) ->
      case evalList (c, {l, r}) of
        [c0, {w, v}] -> [c0, evalOp (op, w, v)]
      esac
  | Ignore (e) ->
      case eval (c, e) of
        [cc, _] -> [cc, Bot]
      esac
  | Call (fname, argsCall) ->
      checkFun (state, fname);
      case state.lookup (fname) of
        Fun (argsDef, body) ->
          case evalList (c, argsCall) of
            [[s, w], vals] ->
              var state = foldl (fun (s, [name, v]) {s.addName (name, v)},
                                 s.enterFunction,
                                 zip (argsDef, vals));
              case eval ([state, w], body) of
                [[state, w], v] -> [[s.leaveFunction (state.getGlobal), w], v]
              esac
          esac
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}