-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (s)             -> st (s)
  | Const (i)           -> i
  | Binop (s, e1, e2)   -> evalBinop (s, evalExpr (st, e1), evalExpr (st, e2))
  esac
}

fun evalBinop (s, a, b) {
  case s of
    "+"     -> a + b
  | "-"     -> a - b
  | "*"     -> a * b
  | "/"     -> a / b
  | "%"     -> a % b
  | "<"     -> a < b
  | ">"     -> a > b
  | "<="    -> a <= b
  | ">="    -> a >= b
  | "=="    -> a == b
  | "!="    -> a != b
  | "&&"    -> a && b
  | "!!"    -> a !! b
  esac
}