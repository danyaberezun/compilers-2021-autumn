-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+", infix +],
  ["-", infix -],
  ["*", infix *],
  ["/", infix /],
  ["%", infix %],
  ["==", infix ==],
  ["!=", infix !=],
  ["<", infix <],
  ["<=", infix <=],
  [">", infix >],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some (f) -> f(l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar(state, name) {
  case state.lookup(name) of
    Var (_) -> skip
    | _     -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun(state, name) {
  case state.lookup(name) of
    Fun (_, _) -> skip
    | _        -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames(state, names) {
  foldl(fun (s, name) { s.addName(name, Var(0)) }, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction(state, name, args, body) {
  state.addName(name, Fun(args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList(c, exprs) {
  case foldl(fun ([c, vals], e) {
    case eval(c, e) of
      [c, v] -> [c, v:vals]
    esac
  },
    [c, { }],
    exprs) of
    [c, vals] -> [c, reverse(vals)]
  esac
}

fun eval(c@[s, w], expr) {
  case expr of
    Assn (a, b)               -> case eval(c, a) of [c, Ref (name)] -> case eval(c, b) of [c@[s, w], v] ->
      [[s <- [name, v], w], v]
    esac
    esac
    | Read (e)                ->
      case eval(c, e) of [c, Ref (name)] -> case readWorld(w) of [n, nw] -> [[s <- [name, n], nw], None] esac esac
    | Write (e)               -> case eval(c, e) of [c@[s, w], v] -> [[s, writeWorld(v, w)], None] esac
    | Const (x)               -> [c, x]
    | Var (v)                 -> [c, lookup(s, v)]
    | Ref (name)              -> [c, Ref(name)]
    | Binop (op, x, y)        -> case eval(c, x) of [c, vx] -> case eval(c, y) of [c, vy] -> [c, evalOp(op, vx, vy)] esac esac
    | Seq (a, b)              -> case eval(c, a) of [c, v] -> eval(c, b) esac
    | Skip                    -> [c, None]
    | If (e, b1, b2)          -> case eval(c, e) of
      [c, 0]   -> eval(c, b2)
      | [c, _] -> eval(c, b1)
    esac
    | While (e, l)            -> case eval(c, e) of
      [c, 0]   -> [c, None]
      | [c, _] -> case eval(c, l) of [c, v] -> eval(c, expr) esac
    esac
    | DoWhile (l, e)          -> case eval(c, l) of [c, v] -> eval(c, While(e, l)) esac
    | Ignore (e)              -> case eval(c, e) of [c, v] -> [c, None] esac
    | Scope (defs, e)         ->
      var scopeWithDefs = addDefs(enterScope(s), defs);
      case eval([scopeWithDefs, w], e) of [c@[s, w], v] -> [[leaveScope(s), w], v] esac
    | Call (name, args_exprs) -> case lookup(s, name) of
      Fun (args, body) -> case evalList(c, args_exprs) of [c@[sP, w], vs] ->
        case eval([evalArgs(enterFunction(sP), args, vs), w], body) of [c@[sP, w], v] ->
          [[leaveFunction(s, getGlobal(sP)), w], v]
        esac
      esac
    esac
  esac
}

fun addDefs(state, defs) {
  case defs of
    d : defsTail ->
      case d of
        Fun (name, args, body) -> addDefs(addFunction(state, name, args, body), defsTail)
        | Var (ns)             -> addDefs(addNames(state, ns), defsTail)
      esac
    | _          -> state
  esac
}

fun evalArgs(state, args, values) {
  case [args, values] of
    [arg : argsTail, v : vNext] -> evalArgs(addName(state, arg, v), argsTail, vNext)
    | _                         -> state
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr(input, expr) {
  case eval([emptyState(), createWorld(input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

public fun evalBinaryOperation(bp, x, y){
  case bp of
    "+"    -> x + y
    | "-"  -> x - y
    | "*"  -> x * y
    | "/"  -> x / y
    | "%"  -> x % y
    | "==" -> x == y
    | "!=" -> x != y
    | "<"  -> x < y
    | "<=" -> x <= y
    | ">"  -> x > y
    | ">=" -> x >= y
    | "&&" -> x && y
    | "!!" -> x !! y
  esac
}