-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}
-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any) and value fo expression
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

public fun valDecls (decls) {
  flatten (map (fun (x) { case x of Fun (x, _, _) -> {} | Var (x) -> x esac }, decls))
}

fun addFunctions (st, decl) {
  foldl (fun (st, el) { case el of Fun (name, args, body) -> addFunction (st, name, args, body) | Var (x) -> st esac }, st, decl)
}

fun eval (c@[st, w], expr) {
  -- print (expr. toString)
  case expr of
    Assn (dest, src) ->
    case evalList (c, {dest, src}) of
      [[st, w], {Kref (dest), src}] -> [[st <- [dest, src], w], src]
    esac
  | Seq (stmt1, stmt2) ->
    case evalList (c, {stmt1, stmt2}) of
      [c, {_, v}] -> [c, v]
    esac
  | Skip -> [c, Kbot]
  | Read (v) ->
    case readWorld (w) of
      [readed_val, w] -> [[st <- [v, readed_val], w], Kbot]
    esac
  | Write (e) ->
    case eval (c, e) of
     [[st, w], v] -> [[st, writeWorld (v, w)], Kbot]
    esac
  | If (p, pb, nb) ->
    case eval (c, p) of
      [c, v] -> eval (c, if v == 0 then nb else pb fi)
    esac
  | While (p, b) ->
    case eval (c, p) of
      [c, 0] -> [c, Kbot]
    | [c, _] ->
        case eval (c, b) of
          [c, _] -> eval (c, While (p, b))
        esac
    esac
  | DoWhile (b, p) -> eval (c, Seq (b, While (p, b)))
  | Var (s) -> [[st, w], lookup (st, s)]
  | Ref (x) -> [c, Kref (x)]
  | Const (x) -> [c, x]
  | Binop (op, e1, e2) ->
    case evalList (c, {e1, e2}) of
      [c, {v1, v2}] -> [c, evalOp(op, v1, v2)]
    esac
  | Ignore (e) ->
    case eval (c, e) of
      [c, _] -> [c, Kbot]
    esac
  | Scope (decl, body) ->
    case addFunctions (addNames (enterScope (st), valDecls (decl)), decl) of
      st ->
        case eval ([st, w], body) of
          [[st, w], v] -> [[leaveScope (st), w], v]
        esac
    esac
  | Call (fname, args) ->
    case lookup (st, fname) of
      Fun (arg_names, body) ->
        case evalList (c, args) of
          [[st, w], args] ->
            case foldl (fun (acc, [name, v]) { addName (acc, name) <- [name, v] }, enterFunction (st), zip (arg_names, args)) of
              f_st ->
                case eval ([f_st, w], body) of
                  [[f_st, w], v] -> [[leaveFunction (st, getGlobal (f_st)), w], v]
                esac
            esac
        esac
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
