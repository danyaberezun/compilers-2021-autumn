-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> 
                    -- printf("evalList: c=%s, v=%s, vals=%s\n", c.string, v.string, vals.string);
                    [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}


fun eval (c@[state, world], expr) {
  -- c = [ state, world ], where state = [ x, val ] (mapping between names and values)
  -- printf("Inside eval: expr=%s\n", expr.string);

  case expr of
    Const (n) -> [c, n]
  | Var (x) -> 
      -- printf("state('%s')=%s\n", x.string, (state (x)).string);
      [c, state (x)]
  | Ref (x) -> [c, x]
  | Binop (op, e1, e2) ->
      case evalList (c, { e1, e2 }) of
        [conf, arr@{ l, r }] -> 
          -- printf("binop l=%s, r=%s, op=%s, evaluated=%s, arr=%s\n", l.string, r.string, op.string, evalOp (op, l, r).string, arr.string); 
          [conf, evalOp (op, l, r)]
      esac
  | Skip -> [c, {}]
  | Assn (e1, e2) ->
      case evalList (c, { e1, e2 }) of
        [[st, wrld], arr@{ x, v }] -> 
          -- printf("Assign: arr=%s\n", arr.string);
          [[st <- [x, v], wrld], v]
      esac
  | Ignore (e) ->
      case eval (c, e) of
        [conf, v] -> [conf, {}]
      esac
  | Read (x) ->
      case readWorld(world) of
        [v, w] -> [[state <- [x, v], w], {}]
      esac
  | Write (e) ->
      case eval (c, e) of
        [[st, wrld], v] -> 
          -- printf("Write('%s')\n", v.string);
          [[st, writeWorld (v, wrld)], {}]
      esac
  | Seq (e1, e2) -> eval(eval(c, e1).fst, e2)
  | If (e, s1, s2) ->
      case eval(c, e) of
        [conf, 0] -> eval(conf, s2)
      | [conf, _] -> eval(conf, s1)
      esac
  | While (e, s) ->
      case eval(c, e) of
        [conf, 0] -> [conf, {}]
      | [conf, _] -> eval(eval(conf, s).fst, expr)
      esac
  | DoWhile (s, e) -> eval(c, Seq (s, While (e, s)))
  | _ -> failure ("evalExpr not implemented\n")
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> 
      -- printf("Result=%s\n", c.fst.string);
      c.snd.getOutput 
  esac
}
