-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (cfg @ [state, world], expr) {
  case expr of
    Assn (dest, src) ->
      case evalList (cfg, {dest, src}) of
        [[state, world], {ref, value}] -> [[state <- [ref, value], world], value]
      esac
  | Seq (left, right) ->
      case evalList (cfg, {left, right}) of
        [cfg, {_, value}] -> [cfg, value]
      esac
  | Skip -> [cfg, Void]
  | Read (name) ->
      case readWorld (world) of
        [value, world] -> [[state <- [name, value], world], Void]
      esac
  | Write (expr) ->
      case eval (cfg, expr) of
        [[state, world], value] -> [[state, writeWorld (value, world)], Void]
      esac
  | If (cond, trueExpr, falseExpr) ->
      case eval (cfg, cond) of
        [cfg, value] -> eval (cfg, if value then trueExpr else falseExpr fi)
      esac
  | While (cond, body) -> eval (cfg, If (cond, Seq (body, expr), Skip))
  | DoWhile (body, cond) -> eval (cfg, Seq (body, If (cond, expr, Skip)))
  | Var (name) -> [cfg, state (name)]
  | Ref (ref) -> [cfg, ref]
  | Const (value) -> [cfg, value]
  | Binop (op, left, right) ->
      case evalList (cfg, {left, right}) of
        [cfg, {leftValue, rightValue}] -> [cfg, evalOp (op, leftValue, rightValue)]
      esac
  | Ignore (expr) ->
      case eval (cfg, expr) of
        [cfg, _] -> [cfg, Void]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
