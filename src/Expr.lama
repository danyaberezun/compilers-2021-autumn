-- Expression evaluator.
import List;
import State;
import World;

public fun calculateBinaryOperation(operation, l, r) {
  case operation of
    "+"  -> l + r
  | "-"  -> l - r
  | "*"  -> l * r
  | "/"  -> l / r
  | "%"  -> l % r
  | "!!" -> l !! r -- could've been ||
  | "&&" -> l && r
  | "==" -> l == r
  | "!=" -> l != r
  | ">"  -> l > r
  | "<"  -> l < r
  | ">=" -> l >= r
  | "<=" -> l <= r
  esac
}

-- The evaluator takes a state and an expression, returns integer value.
public fun evalExpr(st, expr) {
  case expr of
    Var(variableName)      -> st(variableName)
  | Const(value)           -> value
  | Binop(operation, l, r) ->
      calculateBinaryOperation(operation, evalExpr(st, l), evalExpr(st, r))
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
