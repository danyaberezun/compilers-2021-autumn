-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of
    Const (z) -> [c, z]
  | Var   (x) -> [
      c, 
      case s.lookup (x) of
        Var (v) -> v
      esac
    ]
  | Ref (x) -> [c, Ref (x)]
  | Binop (op, e1, e2) -> 
      case evalList (c, {e1, e2}) of
        [c, {w, v}] -> [c, evalOp (op, w, v)]
      esac
  | Skip -> [c, None]
  | Assn (e1, e2) -> 
      case evalList (c, {e1, e2}) of
        [[s, w], {Ref (x), v}] -> [[s <- [x, Var (v)], w], v]
      esac
  | Read (x) -> 
      case readWorld (w) of
        [z, w] -> [[s <- [x, Var (z)], w], None]
      esac
  | Write (e1) -> 
      case eval (c, e1) of
        [[s, w], v] -> [[s, writeWorld (v, w)], None]
      esac
  | Seq (e1, e2) -> 
      case eval (c, e1) of
        [c, _] -> eval (c, e2)
      esac
  | If (e1, s1, s2) -> 
      case eval (c, e1) of
        [c, 0] -> eval (c, s2)
      | [c, _] -> eval (c, s1)
      esac
  | While (e1, s1) -> 
      case eval (c, e1) of
        [c, 0] -> [c, None]
      | [c, _] -> 
          case eval (c, s1) of
            [c, _] -> eval (c, expr)
          esac
      esac
  | DoWhile (s1, e1) -> eval (c, Seq (s1, While (e1, s1)))
  | Ignore (e1) -> eval (c, e1)
  | Scope (ds, e) -> 
      case s.enterScope of
        s -> 
            case foldl (fun (state, d) {
              case d of
                Var (names)            -> state.addNames    (names)
              | Fun (name, args, body) -> state.addFunction (name, args, body)
              esac
            }, s, ds) of
              s ->
                  case eval ([s, w], e) of
                    [[s, w], v] -> 
                        case s.leaveScope of
                          s -> [[s, w], v]
                        esac
                  esac
            esac
      esac
  | Call (x, exprs) -> 
      case s.lookup (x) of
        Fun (args, body) -> 
            case evalList (c, exprs) of
              [[s, w], vals] -> 
                case s.enterFunction of
                  sFun -> 
                      case foldl (fun (state, [a, v]) {state.addName (a, Var (v))}, sFun, zip (args, vals)) of
                        sFun ->
                            case eval ([sFun, w], body) of
                              [[sFun, w], v] ->
                                  case s.leaveFunction (sFun.getGlobal) of
                                    s -> [[s, w], v]
                                  esac
                            esac 
                      esac
                esac
            esac
      esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
