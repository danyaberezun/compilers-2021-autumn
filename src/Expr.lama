-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun calcBinop(op, l, r) {
  case op of
     "+" -> l + r 
  |  "-" -> l - r 
  |  "*" -> l * r 
  |  "/" -> l / r 
  |  "%" -> l % r 
  |  "==" -> l == r 
  |  "!=" -> l != r 
  |  "<" -> l < r 
  |  "<=" -> l <= r 
  |  ">" -> l > r 
  |  ">=" -> l >= r 
  |  "&&" -> l && r 
  |  "!!" -> l !! r
  esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var (s) -> s.st 
  | Const(v) -> v  
  |  Binop(op, l, r) -> calcBinop(op,evalExpr(st,l),evalExpr(st,r))
  esac
}