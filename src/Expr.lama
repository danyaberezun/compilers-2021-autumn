-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        Scope   (defs, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {addName (s, name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  addName (state, name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun assignNames (state, names, values) {
  foldl (
    fun (state, [name, value]) {
      state <- [name, Var (value)]
    },
    state, zip (names, values)
  )
}

fun printExpr (expr) {
  case expr of
    Scope (_, _) -> printf ("Scope\n")
  | Call (_, _) -> printf ("Call\n")
  | Skip -> printf ("Skip\n")
  | Assn (_, _) -> printf ("Assn\n")
  | Seq (_, _) -> printf ("Seq\n")
  | Read (_) -> printf ("Read\n")
  | Write (_) -> printf ("Write\n")
  | If (_, _, _) -> printf ("If\n")
  | While (_, _) -> printf ("While\n")
  | DoWhile (_, _) -> printf ("DoWhile\n")
  | Var (_) -> printf ("Var\n")
  | Ref (_) -> printf ("Ref\n")
  | Const (_) -> printf ("Const\n")
  | Binop (_, _, _) -> printf ("Binop\n")
  | Ignor (_) -> printf ("Ignor\n")
  esac 
}

public fun addToScope(scope, expr) {
  case scope of
    Scope (ds, e) -> Scope (ds, Seq(e, expr))
  | _ -> Seq (scope, expr)
  esac 
}

fun eval (c@[state, world], expr) {
  case expr of
    Ignore (e) -> eval(c, e)
  | Scope (ds, e) ->
      case
        eval (
          [foldl (
            fun (state, def) {
              case def of
                Var (names) -> state.addNames (names)
              | Fun (name, args, body) -> state.addFunction (name, args, body)
              esac
            }
            , state.enterScope, ds
          ), world], e) of
          [[state, world], value] -> [[state.leaveScope, world], value]
      esac

  | Call (name, args) ->
      case state.lookup (name) of
        Fun (argNames, body) ->
          case evalList(c, args) of
            [[state, world], values] ->
              case
                eval (
                  [state
                  .enterFunction
                  .addNames (argNames)
                  .assignNames (argNames, values), world],
                  body) of
                [[innerState, world], value] ->
                  [[state.leaveFunction (innerState.getGlobal), world], value]
              esac
          esac
      esac
  | Skip -> [c, None]
  | Assn (refE, valE) ->
      case eval(c, refE) of
        [c, refVar] ->
          case eval(c, valE) of
            [[state, world], value] -> [[state <- [refVar, Var (value)], world], value]
          esac
      esac
  | Seq (e1, e2) -> eval(eval(c, e1).fst, e2)
  | Read (refE) ->
      case eval(c, refE) of
        [[state, world], refVar] ->
          case readWorld(world) of
            [value, world] -> [[state <- [refVar, Var (value)], world], None]
          esac
      esac
  | Write (e) ->
      case eval(c, e) of
        [[state, world], value] -> [[state, writeWorld(value, world)], None]
      esac
  | If (e, thenE, elseE) ->
      case eval(c, e) of
        [c, value] ->
          if value 
            then eval(c, thenE)
            else eval(c, elseE)
          fi
      esac
  | While (e, repeatE) ->
      case eval(c, e) of
        [c, value] ->
          if value 
            then eval(c, Seq(repeatE, While (e, repeatE)))
            else [c, None]
          fi
      esac
  | DoWhile (e, repeatE) ->
      case eval(c, repeatE.addToScope (e)) of
        [c, value] ->
          if value 
            then eval(c, DoWhile (e, repeatE))
            else [c, None]
          fi
      esac
  | Var (v) -> [c, case state.lookup (v) of Var (x) -> x esac]
  | Ref (v) -> [c, v]
  | Const (d) -> [c, d]
  | Binop (op, l, r) ->
      case eval(c, l) of
        [c, lValue] ->
          case eval(c, r) of
            [c, rValue] -> [c, evalOp(op, lValue, rValue)]
          esac
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}