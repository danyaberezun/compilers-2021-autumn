-- Expression evaluator

import List;
import State;


public fun evalBinop(op, exp1, exp2) {
  case op of
    "+" -> exp1 + exp2
  | "-" -> exp1 - exp2
  | "*" -> exp1 * exp2
  | "/" -> exp1 / exp2
  | "%" -> exp1 % exp2
  | ">" -> exp1 > exp2
  | "<" -> exp1 < exp2
  | ">=" -> exp1 >= exp2
  | "<=" -> exp1 <= exp2
  | "==" -> exp1 == exp2
  | "!!" -> exp1 !! exp2
  | "&&" -> exp1 && exp2
  | "!=" -> exp1 != exp2
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of 
    Var (x) -> st(x)
  | Const (x) -> x
  | Binop (x, exp1, exp2) -> evalBinop(x, evalExpr(st, exp1), evalExpr(st, exp2))
  esac
}