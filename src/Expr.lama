-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDefs(state, defs) {
  foldl (fun (state, df) {
    case df of 
      Var (vars) -> addNames(state, vars)
      | Fun(name, args, body) -> addFunction(state, name, args, body)
    esac 
  }, state, defs)
}

fun passArgs(state, args, vals) {
  foldl (fun (state, [arg_, val_]) {
    addName(state, arg_, val_)
  }, state, zip(args, vals))
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of 
    Ref (x) -> [c, Ref (x)] 
    | Ignore (e) -> case eval(c, e) of [c@[s, w], _] -> [c, Bottom] esac
    | Var (x) -> [c, lookup(s, x)]
    | Const (n) -> [c, Var (n)]
    | Skip -> [c, Bottom]
    | Assn (x, e) -> case eval(c, x) of 
        [c@[s, w], Ref (x)] -> case eval(c, e) of 
          [c@[s, w], e] -> [[s <- [x, e], w], e]
        esac
      esac
    | Seq (s1, s2) -> case eval(c, s1) of 
        [c@[s, w], _] -> eval(c, s2)
      esac
    | Write (e) -> case eval(c, e) of 
        [c@[s, w], Var (e)] -> [[s, writeWorld(e, w)], Bottom]
      esac
    | Read (x) -> checkVar(s, x); case readWorld(w) of 
        [v, w] -> [[s <- [x, Var (v)], w], Bottom]
      esac 
    | If (cond, thenExpr, elseExpr) -> case eval(c, cond) of 
        [c@[s, w], Var (0)] -> eval(c, elseExpr)
        | [c@[s, w], _] -> eval(c, thenExpr)
      esac
    | While (cond, body) -> case eval(c, cond) of 
        [c@[s, w], Var (0)] -> [c, Bottom]
        | [c@[s, w], _] -> case eval(c, body) of 
          [c@[s, w], _] -> eval(c, While (cond, body))
        esac
      esac 
    | DoWhile (body, cond) -> case eval(c, body) of 
        [c@[s, w], _] -> eval(c, While (cond, body))
      esac 
    | Binop (op, s1, s2) -> case eval(c, s1) of 
        [c@[s, w], Var (r1)] -> case eval(c, s2) of 
          [c@[s, w], Var (r2)] -> [c, Var (evalOp(op, r1, r2))]
        esac 
      esac 
    | Call (f, args_epxr) -> checkFun(s, f); case lookup(s, f) of 
        Fun (args, body) -> case evalList(c, args_epxr) of 
          [c@[s, w], vals] -> 
            case eval([passArgs(enterFunction(s), args, vals), w], body) of 
              [[fun_s, w], r] -> [[leaveFunction(s, getGlobal(fun_s)), w], r]
            esac 
        esac
      esac
    | Scope (defs, expr) ->  case eval([addDefs(enterScope(s), defs), w], expr) of
        [c@[s, w], r] -> [[leaveScope(s), w], r]
      esac 
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}