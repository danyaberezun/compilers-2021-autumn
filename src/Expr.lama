-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalOP (op, lhv, rhv) {
  case op of 
    "+"  -> lhv + rhv
  | "-"  -> lhv - rhv
  | "*"  -> lhv * rhv
  | "/"  -> lhv / rhv
  | "%"  -> lhv % rhv
  | "<"  -> lhv < rhv
  | ">"  -> lhv > rhv
  | "<=" -> lhv <= rhv
  | ">=" -> lhv >= rhv
  | "==" -> lhv == rhv
  | "!=" -> lhv != rhv
  | "&&" -> lhv && rhv
  | "!!" -> lhv !! rhv
  esac
}

public fun evalExpr (st, expr) {
  case expr of 
    Var (s)              -> st(s)
  | Const (num)          -> num
  | Binop (op, lhs, rhs) ->
    var lhv = evalExpr(st, lhs);
    var rhv = evalExpr(st, rhs);
    evalOP (op, lhv, rhv)
  esac
}