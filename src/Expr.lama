-- Expression evaluator

import List;
import Array;
import State;
import Collection;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

public fun showDbg (x) {
  var f = fopen("/proc/self/fd/2", "a");
  fprintf(f, "%s\n", string(x));
  fclose(f);
  x
}

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Scope (v, s) ->
      var cont = 1;
      st := enterScope (st);
      while cont do
        case v of
          {} -> cont := 0
        | va:vx ->
            case va of
              Var (va) -> st := addNames (st, va)
            | Fun (name, args, body) -> st := addFunction (st, name, args, body)
            esac;
            v := vx
        esac
      od;
      case eval([st, w], s) of [c@[st, w], v] ->
        [[leaveScope (st), w], v]
      esac
  | Var (v) -> [c, st.lookup (v)]
  | Ref (v) -> [c, fun (st, x) { updState(v, x, st) }]
  | Ignore (e) -> eval(c, e)
  | Const (i) -> [c, i]
  | String (x) -> [c, x]
  | Array (x) -> 
      case evalList(c, x) of [c, x] -> [c, listArray(x)] esac
  | Sexp (n, x) -> 
      case evalList(c, x) of [c, x] -> [c, listArray(x)] esac
  | Seq (l, r) -> eval(eval (c, l)[0], r)
  | Binop (s, l, r) ->
    case eval (c, l) of [c, l] ->
      case eval (c, r) of [c, r] ->
        [c, evalOp(s, l, r)]
      esac
    esac
  | Assn (s, e) ->
      case eval(c, s) of [c, s] ->
        case eval(c, e) of [c@[st, w], e] ->
          case s(st, e) of st ->
            [[st, w], e]
          esac
        esac
      esac
  | While (e, s) ->
      var cont = 1;
      while cont do
        case eval(c, e) of [cn, v] ->
          c := cn;
          if v
          then c := eval(c, s)[0]
          else cont := 0
          fi
        esac
      od;
      [c, 0]
  | DoWhile (s, e) ->
      eval(eval(c, s)[0], While (e, s))
  | If (e, t, f) ->
      case eval(c, e) of [c, e] ->
        if e
        then eval(c, t)
        else eval(c, f)
        fi
      esac
  | Skip -> [c, 0]
  | ElemRef (a, i) ->
      case eval (c, a) of [c, a] ->
        case eval (c, i) of [c@[st, w], i] ->
          [c, fun (st, t) { a[i] := t; st }]
        esac
      esac
  | Elem (a, i) ->
      case eval (c, a) of [c, a] ->
        case eval (c, i) of [c@[st, w], i] ->
          [c, a[i]]
        esac
      esac
  | Call (f, eargs) ->
      case lookup(st, f) of Fun (args, body) ->
        case evalList(c, eargs) of [c@[st0, w], eargs] ->
          case body of
            External ("read") ->
              case eargs of
                {} -> case readWorld(w) of [va, w] -> [[st0, w], va] esac
              esac
          | External ("write") ->
              case eargs of
                {e} -> [[st0, writeWorld(e, w)], 0]
              esac
          | External ("length") ->
              case eargs of
                {s} -> [[st0, w], length (s)]
              esac
          | _ ->
            var adder = fun (st, [a, v]) { addName (st, a, v) };
            case eval ([foldl (adder, enterFunction (st0), zip(args, eargs)), w], body) of
              [[st, w], ret] -> [[leaveFunction (st0, getGlobal (st)), w], ret]
            esac
          esac
        esac
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External ("read")))
                                      .addName ("write",  Fun ({"a"}, External ("write")))
                                      .addName ("length", Fun ({"a"}, External ("length"))), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
