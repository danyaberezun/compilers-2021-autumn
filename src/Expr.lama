-- Expression evaluator

import List;
import State;

public fun evalBinop (opStr) {
  case opStr of
    "+"  -> (infix +)
  | "-"  -> (infix -)
  | "*"  -> (infix *)
  | "/"  -> (infix /)
  | "%"  -> (infix %)
  | "<"  -> (infix <)
  | "<=" -> (infix <=)
  | ">"  -> (infix >)
  | ">=" -> (infix >=)
  | "==" -> (infix ==)
  | "!=" -> (infix !=)
  | "&&" -> (infix &&)
  | "!!" -> (infix !!)
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (name) -> st (name)
  | Const (value) -> value
  | Binop (opStr, left, right) -> evalBinop (opStr) (evalExpr (st, left), evalExpr (st, right))
  esac
}
