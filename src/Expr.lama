-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun confEnterFunction(c@[s, w]) {
  [s.enterFunction, w]
}

fun confLeaveFunction(c@[s, w]) {
  [s.leaveFunction, w]
}

fun confEnterScope(c@[s, w]) {
  [s.enterScope, w]
}

fun confLeaveScope(c@[s, w]) {
  [s.leaveScope, w]
}

fun confAddNames(c@[s, w], names) {
  [addNames(s, names), w]
}

fun confAddFunction(c@[s, w], name, args, body) {
  [addFunction(s, name, args, body), w]
}

fun evalDefs(c, def_list) {
  case def_list of 
    {}    -> c 
  | def : def_list  -> 
      case def of
        Var (names) -> evalDefs(confAddNames(c, names), def_list)
      | Fun (name, args, body) -> evalDefs(confAddFunction(c, name, args, body), def_list)
      esac
  esac
}

fun confAddArgs(c@[s, w], args, val_list) {
  case args of 
    {}    -> c 
  | arg : args  -> 
      case val_list of 
        {}  -> failure ("Wrong count of values for function") 
      | vl : val_list  -> confAddArgs([s.addName(arg, vl), w], args, val_list)
      esac
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  -- printf("FAIL _ %s\n", expr.string);
  -- failure ("evalExpr not implemented\n")
  case expr of 
    Var   (name) -> [c, s.lookup(name)]
  | Const (value) -> [c, value]
  | Ref (val_name) -> [c, Ref (val_name)]
  | Binop (op, ex1, ex2) -> 
      case evalList(c, {ex1, ex2}) of
        [c, {res1, res2}] -> [c, evalOp(op, res1, res2)]
      esac
  | Assn (val_ref, ex)   -> 
      case eval(c, val_ref) of
        [c, Ref (val_name)] ->
          case eval(c, ex) of
            [[s, w], res] -> [[s <- [val_name, res], w], res]
          esac
      esac
  | Seq (expr1, expr2)  -> 
      case evalList(c, {expr1, expr2}) of
        [c, {_, res}] -> [c, res]
      esac
  | Skip                -> [c, Bottom]
  | Read (name)         -> 
      case c of
        [s, [v : pi, o]] -> [[s <- [name, v], [pi, o]], Bottom]
      esac
  | Write (ex)        -> 
      case eval(c, ex) of
        [[s, w], res] -> [[s, writeWorld(res, w)], Bottom]
      esac
  | If (ex, expr1, expr2) ->  
      case c of
        [s, w] -> 
          case eval(c, ex) of 
            [c, 0] -> eval(c, expr2)
          | [c, _] -> eval(c, expr1)
          esac
      esac
  | While (ex, sub_expr) ->
      case eval(c, ex) of 
        [c, 0] -> [c, Bottom]
      | [c, _] -> 
          case eval(c, sub_expr) of
            [c, _] -> eval(c, expr)
          esac
      esac
  | DoWhile (sub_expr, ex) ->
      case eval(c, sub_expr) of
        [c, _] ->
          case eval(c, ex) of 
            [c, 0] -> [c, Bottom]
          | [c, _] -> eval(c, DoWhile (sub_expr, ex))
          esac
      esac
  | Ignore (ex) ->
      case eval (c, ex) of
        [c, _] -> [c, Bottom]
      esac
  | Call (name, expr_list) -> 
      case evalList(c, expr_list) of
        [[s, w], val_list] ->
          case s.lookup(name) of
            Fun(args, body) -> 
              case s.enterFunction of 
                sGlobal -> 
                  case confAddArgs([sGlobal, w], args, val_list) of
                    cLocal -> 
                      case eval(cLocal, body) of
                        [[sLocal, wLocal], res] -> [[s.leaveFunction(sLocal.getGlobal), wLocal], res]
                      esac
                  esac
                  
              esac
          esac
      esac
  | Scope (def_list, expr) -> 
      case confEnterScope(c) of 
        c -> 
          case evalDefs(c, def_list) of
            c -> 
              case eval(c, expr) of 
                [c, res] -> [confLeaveScope(c), res]
              esac
          esac
      esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}