-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  -- printf("FAIL _ %s\n", expr.string);
  -- failure ("evalExpr not implemented\n")
  case expr of 
    Var   (name) -> [c, s(name)]
  | Const (value) -> [c, value]
  | Ref (val_name) -> [c, Ref (val_name)]
  | Binop (op, ex1, ex2) -> 
      case evalList(c, {ex1, ex2}) of
        [c, {res1, res2}] -> [c, evalOp(op, res1, res2)]
      esac
  | Assn (val_ref, ex)   -> 
      case eval(c, val_ref) of
        [c, Ref (val_name)] ->
          case eval(c, ex) of
            [[s, w], res] -> [[s <- [val_name, res], w], res]
          esac
      esac
  | Seq (expr1, expr2)  -> 
      case evalList(c, {expr1, expr2}) of
        [c, {_, res}] -> [c, res]
      esac
  | Skip                -> [c, Bottom]
  | Read (name)         -> 
      case c of
        [s, [v : pi, o]] -> [[s <- [name, v], [pi, o]], Bottom]
      esac
  | Write (ex)        -> 
      case eval(c, ex) of
        [[s, w], res] -> [[s, writeWorld(res, w)], Bottom]
      esac
  | If (ex, expr1, expr2) ->  
      case c of
        [s, w] -> 
          case eval(c, ex) of 
            [c, 0] -> eval(c, expr2)
          | [c, _] -> eval(c, expr1)
          esac
      esac
  | While (ex, sub_expr) ->
      case eval(c, ex) of 
        [c, 0] -> [c, Bottom]
      | [c, _] -> 
          case eval(c, sub_expr) of
            [c, _] -> eval(c, expr)
          esac
      esac
  | DoWhile (sub_expr, ex) ->
      case eval(c, sub_expr) of
        [c, _] ->
          case eval(c, ex) of 
            [c, 0] -> [c, Bottom]
          | [c, _] -> eval(c, DoWhile (sub_expr, ex))
          esac
      esac
  | Ignore (ex) ->
      case eval (c, ex) of
        [c, _] -> [c, Bottom]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
