-- Lexical analysis using Matcher
import Matcher;
import Ostap;
import Fun;
import Collection;
import List;

-- A set of all keywords
var keywords = foldl(addSet, emptySet(compare), {"read", "write", "skip"});

-- Regular expression definitions
var rWhiteSpace  = createRegexp("\\(\\([ \n\r\t]*\\)\\|\\(--[^\n]*[ \n\r\t]*\\)\\)*", "whitespace");
var rDecimal     = createRegexp("-?[0-9]+", "decimal constant");
var rLident      = createRegexp("[a-z][a-z_A-Z0-9]*", "lowercase identifier");
var rRead        = createRegexp("read\\b", """read""");
var rWrite       = createRegexp("write\\b", """write""");
var rSkip        = createRegexp("skip\\b", """skip""");

var whiteSpace = token (rWhiteSpace);

-- Public parsers for concrete tokens
-- Generic token parser; t is either a string or a regular expression.
public fun s(t) {memo $ whiteSpace |> lift (token(t))}

-- Some individual tokens
public kRead    = s(rRead);
public kWrite   = s(rWrite);
public kSkip    = s(rSkip);
public decimal  = s(rDecimal);
public end      = memo $ whiteSpace |> lift (eof);
public lident   = memo $
  whiteSpace |> lift(fun(k) {
    fun(s) {
      k(
        case s.matchRegexp (rLident) of
            a@Succ(v, _) -> if memSet(keywords, v)
              then Fail("lowercase identifier expected", s.getLine, s.getCol)
              else a
              fi
          | a -> a
        esac
      )
    }
  });
