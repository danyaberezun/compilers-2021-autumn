-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression

var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")] ),
      exp = memo $ eta expr ({
        [Left, {[s ("!!"), fun (l, op, r) {Binop (op, l, r)}]}],

        [Left, {[s ("&&"), fun (l, op, r) {Binop (op, l, r)}]}],
        
        [Nona, {[s (">"), fun (l, op, r) {Binop (op, l, r)}],
                [s ("<"), fun (l, op, r) {Binop (op, l, r)}],
                [s (">="), fun (l, op, r) {Binop (op, l, r)}],
                [s ("<="), fun (l, op, r) {Binop (op, l, r)}],
                [s ("=="), fun (l, op, r) {Binop (op, l, r)}],
                [s ("!="), fun (l, op, r) {Binop (op, l, r)}]}],

        [Left, {[s ("+"), fun (l, op, r) {Binop (op, l, r)}], 
                [s ("-"), fun (l, op, r) {Binop (op, l, r)}]}],

        [Left, {[s ("*"), fun (l, op, r) {Binop (op, l, r)}],
                [s ("/"), fun (l, op, r) {Binop (op, l, r)}],
                [s ("%"), fun (l, op, r) {Binop (op, l, r)}] }]
        }, primary);


var else_branch = memo $ eta syntax (
    kElse stmt1=stmt {stmt1}
  | kElif e=exp kThen stmt1=stmt stmt2=else_branch {If(e, stmt1, stmt2)}
  | empty {Skip}
);

var single_stmt = memo $ eta syntax (
    kRead ident=inbr[s("("), lident, s(")")] {Read (ident)}
  | kWrite e=inbr[s("("), exp, s(")")] {Write (e)}
  | kSkip {Skip}
  | ident=lident s[":="] e=exp {Assn(ident, e)}
  | kIf e=exp kThen stmt1=stmt stmt2=else_branch kFi {If(e, stmt1, stmt2)}
  | kWhile e=exp kDo stmt1=stmt kOd {While (e, stmt1)}
  | kDo stmt1=stmt kWhile e=exp kOd {DoWhile (e, stmt1)}
  | kFor stmt1=stmt s[","] e=exp s[","] stmt2=stmt kDo main_stmt=stmt kOd {Seq (stmt1, While (e, Seq(main_stmt, stmt2)))}
);

var stmt = memo $ eta syntax (
    single_stmt
  | stmt1=single_stmt s[";"] stmt2=stmt {Seq(stmt1, stmt2)}
);
   

-- Public top-level parser
public parse = stmt;
