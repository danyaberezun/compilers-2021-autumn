-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun defineBinops (assoc, ops) {
  [
    assoc,
    map (fun (op) { [s (op), fun (l, op, r) {Binop (op, l, r)} ] }, ops)
  ]
}

fun binop (l, op, r) {
  Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
      exp = memo $ eta expr (
          {
            defineBinops(Left, {"!!"}),
            defineBinops(Left, {"&&"}),
            defineBinops(Nona, {"==", "!=", "<", "<=", ">", ">="}),
            defineBinops(Left, {"+", "-"}),
            defineBinops(Left, {"*", "/", "%"})
          }, primary),
      elsePart = memo $ eta syntax (
        kElif e=exp kThen pb=stmtList nb=elsePart? { If (e, pb, case nb of Some (x) -> x | _ -> Skip esac) } |
        kElse nb=stmtList { nb }
      ),
      stmt = memo $ eta syntax (kSkip                         { Skip }           |
        x=lident s[":="] e=exp                                { Assn (x, e) }    |
        kRead x=inbr[s("("), lident, s(")")]                  { Read (x) }       |
        kWrite e=inbr[s("("), exp, s(")")]                    { Write (e) }      |
        kIf p=exp kThen pb=stmtList nb=elsePart? kFi          { If (p, pb, case nb of Some (body) -> body | _ -> Skip esac) } |
        kWhile p=exp kDo b=stmtList kOd                       { While (p, b) }   |
        kFor init=stmtList s[","] p=exp s[","] iter=stmtList kDo b=stmtList kOd { Seq(init, While (p, Seq(b, iter))) } |
        kDo b=stmtList kWhile p=exp kOd                       { DoWhile (b, p) }
      ),
      stmtList = memo $ eta syntax (
        stmt |
        h=stmt s[";"] t=stmtList { Seq (h, t) }
      );

-- Public top-level parser
public parse = stmtList;
