-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun tokenBinop(op) {
  [s(op), fun(l, op, r) {Binop(op, l, r)}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
     exp = memo $ eta expr ({
          [Left, {
            tokenBinop("!!"), 
            tokenBinop("&&") 
          }]          
        , [Nona, {             
            tokenBinop("<"),
            tokenBinop("<="),
            tokenBinop(">="),
            tokenBinop(">"),
            tokenBinop("=="),
            tokenBinop("!=")
          }]
        , [Left, {
            tokenBinop("+"),
            tokenBinop("-")
          }]
        , [Left, {                      
            tokenBinop("*"),
            tokenBinop("/"),
            tokenBinop("%")
          }]
        }, primary);


var singleStmt = memo $ eta syntax(
  x=lident s[":="] e=exp { Assn(x, e) } |
  kSkip { Skip } |
  kRead x=inbr[s("("), lident, s(")")] { Read(x) } |
  kWrite e=inbr[s("("), exp, s(")")] { Write(e) }
);

var stmt = memo $ eta syntax(
    singleStmt | 
    x=singleStmt s[";"] xs=stmt {Seq(x, xs)}
);
   
-- Public top-level parser
public parse = stmt;
             
