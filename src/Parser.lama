-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;
import STM;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- AST environment
fun createEnv (id) {
  fun freshName () {
    [createEnv (id+1), sprintf ("_tmp%d", id)]
  }

  [freshName]
}

fun emptyEnv () {
  createEnv (0)
}

fun freshName (env) {
  env [0] ()
}

-- Attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, vl, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> vl => fun (vl) {Ignore (vl)}
  | _    -> vl
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, vl, loc) {
  case atr of
    Void -> vl
  | Val  -> error ("value expected", loc)
  | Weak -> vl => fun (vl) {Seq (vl, Const (0))}
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, l (Val) =>> fun (l) {
                                            r (Val) =>  fun (r) {
                                              Binop (op, l, r)
                                            }}, loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  fun expandValDefs (defs, expr) {
    foldr (fun ([defs, expr], [ident, value]) {     
             [ident : defs, Seq (Ignore (Set (ident, value)), expr)]
           },
           [{}, expr],
           defs)
  }
  
  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

-- -- Helper AST function: reifies pattern bindings into scope
-- -- definitions and assignments; takes an returns lists of
-- -- pattern-branch pairs
-- fun reifyPatternBindings (matched, brs) {
--   map (
--     fun ([pat, br]) {      
--       fun collectBindings (path, p) {
--         fun collectList (path, ps) {
--           case
--             foldl (fun ([acc, i], p) {
--                      [collectBindings (i : path, p) : acc, i+1]                      
--                    },
--                    [{}, 0],
--                    ps) of
--             [acc, _] -> flatten (acc)
--           esac            
--         }
        
--         case p of
--           Sexp  (_, ps)   -> collectList (path, ps)
--         | Array (ps)      -> collectList (path, ps)
--         | Named (name, p) -> [name, path] : collectBindings (path, p)
--         |  _              -> {}
--         esac
--       }

--       case collectBindings ({}, pat) of
--         {}       -> [pat, br]
--       | bindings ->
--            [pat,
--              expandScope (
--                {Val (map (
--                       fun ([name, path]) {
--                         [name, foldr (fun (p, i) {Elem (p, Const (i))}, Var (matched), path)]
--                       },
--                       bindings))},
--                br
--              )]
--       esac
--     },
--     brs
--   )
-- }

-- var
--   primary = memo $ eta syntax (
--     -- array constant
--     loc=pos x=inbr[s("["), list0(syntax (e=exp {e(Val)})), s("]")] {
--       fun (a) {assertValue (a, chainST (x) => fun (x) {Array (x)}, loc)}
--     } |
                                      
--     -- string constant
--     loc=pos x=strlit {
--       fun (a) {assertValue (a, returnST $ String (x), loc)}
--     } |
                                      
--     -- character literal
--     loc=pos x=chrlit {
--       fun (a) {assertValue (a, returnST $ Const (x), loc)}
--     } |
                                      
--     -- decimal constant
--     loc=pos x=decimal {
--       fun (a) {assertValue (a, returnST $ Const (stringInt (x)), loc)}
--     } |
                                      
--     -- identifier
--     loc=pos x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {
--       fun (a) {
--         case args of
--           None -> returnST $ case a of
--                                Ref  -> Ref (x)
--                              | Void -> Ignore (Var (x))
--                              | _    -> Var (x)
--                              esac
--         | Some (args) -> assertValue (a, chainST (args) => fun (args) {Call (x, args)}, loc)
--         esac}
--     } |

--     -- S-expression
--     loc=pos x=uident args=inbr[s("("), list0(syntax(e=exp {e (Val)})), s(")")]? {
--       fun (a) {
--         assertValue (a, case args of
--                           None        -> returnST $ Sexp (x, {})
--                         | Some (args) -> chainST (args) => fun (args) {Sexp (x, args)}
--                         esac, loc)}
--     } |
  
--     $(failure ("the rest of primary parsing in not implemented\n"))),
   

--   basic = memo $ eta (
--     expr ({[Right, {[s (":="), fun (l, loc, r) {
--                                  fun (a) {assertValue (a, l (Ref) =>> fun (l) {
--                                                           r (Val) =>  fun (r) {
--                                                           Assn (l, r)
--                                                           }},
--                                                         loc)
--                                  }
--                                }]}],
--            [Left , map (binop, {"!!"})],
--            [Left , map (binop, {"&&"})],
--            [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
--            [Left , map (binop, {"+", "-"})],
--            [Left , map (binop, {"*", "/", "%"})]
--           },
--           postfix)
--   ),
  
--   postfix = memo $ eta syntax (
--     loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] {Index (i (Val))})* {
--       fun (a) {
--         foldl (fun (e, p) {                                                                            
--                  case p of                                                                                   
--                    Index (i) ->
--                     fun (a) {
--                       case a of
--                         Ref -> e (Val) =>> fun (e) {
--                                i       =>  fun (i) {
--                                  ElemRef (e, i)
--                                }} 
--                       | _   -> assertValue (a, e (Val) =>> fun (e) {
--                                                i       =>  fun (i) {
--                                                Elem (e, i)
--                                                }},
--                                             loc)
--                       esac
--                     }
--                  esac                                                                            
--                }, e, ps) (a)
--       }}
--   ),
  
--   scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {
--     fun (a) {
--       fun (e) {
--         case ds of
--           {} -> e
--         | _  -> chainST (ds) =>> fun (ds) {
--                 e            =>  fun (e)  {
--                   expandScope (ds, e)
--                 }}
--         esac
--       }
--       (case e of 
--         Some (e) -> e (a)
--       | _        -> returnST $ Skip
--       esac)
--     }}                                                                  
--   ),
  
--   definition = memo $ eta syntax (
--     kVar ds=list[syntax (x=lident e=(-s["="] basic)? {case e of
--                                                         None -> returnST $ [x, None]
--                                                       | Some (e) ->
--                                                           e (Val) => fun (e) {[x, Some (e)]}
--                                                       esac})] s[";"] {
--       chainST (ds) => fun (ds) {Var (ds)}
--     } |
--     kVal ds=list[syntax (x=lident s["="] e=basic {e (Val) => fun (e) {[x, e]}})] s[";"] {
--       chainST (ds) => fun (ds) {Val (ds)}
--     } |  
--     kFun name=lident args=inbr[s("("), list0 (lident), s(")")] body=inbr[s("{"), scopeExpr, s("}")] {
--       body (Weak) => fun (body) {Fun (name, args, body)}
--     }
--   ),
  
--   exp = memo $ eta syntax (
--     basic
--   | s1=basic s[";"] s2=exp {
--      fun (a) {
--        s1 (Void) =>> fun (s1) {
--        s2 (a)    =>  fun (s2) {
--          Seq (s1, s2)
--        }}
--      }
--    }
--   );

fun branchOrSkip (opt, a, loc) {
  case opt of
    None -> assertVoid (a, Skip, loc)
  | Some (v) -> v (a)
  esac
}

fun pushVal (xs) {
  map (fun (x) { x (Val) }, xs)
}

var ifPart = memo $ eta syntax (
        loc=pos -kIf cond=exp -kThen ifBranch=scopeExpr elseBranches=elsePart? -kFi { fun (a) { If (cond (Val), ifBranch (a), branchOrSkip (elseBranches, a, loc)) } }
      ),
    elsePart = memo $ eta syntax (
        loc=pos -kElif cond=exp -kThen elifBranch=scopeExpr tail=elsePart? { fun (a) { If (cond (Val), elifBranch (a), branchOrSkip (tail, a, loc)) } } |
        -kElse elseBranch=scopeExpr
      ),
    whileDo = memo $ eta syntax (
        loc=pos -kWhile cond=exp -kDo loopCode=scopeExpr -kOd { fun (a) { assertVoid (a, While (cond (Val), loopCode (Void)), loc) } }
      ),
    doWhile = memo $ eta syntax (
        loc=pos-kDo loopCode=scopeExpr -kWhile cond=exp -kOd { fun (a) { assertVoid (a, distributeScope (loopCode (Void), fun (loopCode) { DoWhile (loopCode, cond (Val)) }), loc) } }
      ),
    forExpr = memo $ eta syntax (
        loc=pos -kFor start=scopeExpr s[","] cond=exp s[","] ending=exp -kDo loopCode=scopeExpr -kOd
        { fun (a) { assertVoid (a, distributeScope (start (Void), fun (start) { Seq (start, While (cond (Val), Seq (loopCode (Void), ending (Void)))) }), loc) } }
      ),
    primary  = memo $ eta syntax (
                                  -- array constant
                                  loc=pos -s["["] x=list0[exp] -s["]"]
                                    {fun (a) {assertValue (a, Array (pushVal (x)), loc)}} |
                                  
                                  -- string constant
                                  loc=pos x=strlit 
                                    {fun (a) {assertValue (a, String (x), loc)}}   |
                                  
                                  -- character literal
                                  loc=pos x=chrlit
                                    {fun (a) {assertValue (a, Const (x), loc)}}    |
                                  
                                  -- decimal constant
                                  loc=pos x=decimal
                                    {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                  -- identifier
                                  loc=pos x=lident {
                                    fun (a) {
                                      case a of
                                        Ref  -> Ref (x)
                                      | Void -> Ignore (Var (x))
                                      | _    -> Var (x)
                                      esac
                                  }} | 

                                  -- call
                                  loc=pos x=lident -s["("] args=list0[exp] -s[")"]
                                    {fun (a) { assertValue (a, Call (x, pushVal (args)), loc) }} |

                                  -- S-expression
                                  loc=pos x=uident args=(-s["("] list0[exp] -s[")"])? 
                                    {fun (a) {assertValue (a, Sexp (x, case args of None -> {} | Some (args) -> pushVal (args) esac), loc)}} |
                                  
                                  -- index
                                  loc=pos e=primary -s["["] i=basic -s["]"]
                                    {fun (a) {case a of
                                                Ref -> ElemRef (e (Val), i (Val))
                                              | _   -> assertValue (a, Elem (e (Val), i (Val)), loc)
                                              esac}} |

                                  -s["("] scopeExpr -s[")"] |
                                  loc=pos -kSkip { fun (a) { assertVoid (a, Skip, loc) } } |
                                  ifPart |
                                  whileDo | doWhile | forExpr),
    basic = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
                                
    exp = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}}),
    defVar = memo $ eta syntax (
                                name=lident s["="] value=basic { [name, Some (value (Val))] } |
                                name=lident { [name, None] } 
                               ),
    oneDef = memo $ eta syntax (
                              -kVar vars=list[defVar] s[";"] { Var (vars) } |
                              -kFun name=lident s["("] args=list0[lident] s[")"] s["{"] body=scopeExpr s["}"] { Fun (name, args, body (Weak)) }
                             ),
    scopeExpr = memo $ eta syntax (
                                    loc=pos defs=oneDef* body=exp? {
                                        fun (a) {  expandScope (defs, branchOrSkip (body, a, loc)) }}
                                  );
>>>>>>> 611e35b (Done HW11)

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void) (emptyEnv ()) [1]});
