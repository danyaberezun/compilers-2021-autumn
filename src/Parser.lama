-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}


fun binOp(op) {
  [s(op), fun(l, _, r) {Binop (op, l, r)}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),

    exp = memo $ eta (expr (
      {
        [Left, map (binOp, {"!!"})],
        [Left, map (binOp, {"&&"})],
        [Nona, map (binOp, {"==", "!=", "<", ">", "<=", ">="})],
        [Left, map (binOp, {"+", "-"})],
        [Left, map (binOp, {"*", "/", "%"})]
      }, primary
    ));

var line = memo $ eta  syntax (
                              kWrite x=inbr[s("("), exp, s(")")] {Write (x)}
                            | kRead x=inbr[s("("), lident, s(")")] {Read (x)}
                            | x=lident s[":="] e=exp {Assn (x, e)}
                            | kSkip {Skip}
),
    stmt = memo $ eta syntax (
                              line 
                            | x=line s[";"] y=stmt {Seq (x, y)}
);

-- Public top-level parser
public parse = stmt;
