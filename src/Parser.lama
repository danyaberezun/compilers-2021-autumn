-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binopSwap(l, op, r) {
    Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
        exp = memo $ eta expr (
            {
                [Left, {
                    [s ("&&"), binopSwap],
                    [s ("!!"), binopSwap]
                }],
                [Nona, {
                    [s ("=="), binopSwap],
                    [s ("!="), binopSwap],
                    [s (">"),  binopSwap],
                    [s (">="), binopSwap],
                    [s ("<"),  binopSwap],
                    [s ("<="), binopSwap]
                }],
                [Left, {
                    [s ("+"), binopSwap],
                    [s ("-"), binopSwap]
                }],
                [Left, {
                    [s ("/"), binopSwap],
                    [s ("%"), binopSwap],
                    [s ("*"), binopSwap]
                }]
            },
            primary
        );

var ifStatement = memo $ eta syntax (
      kElif x=exp kThen y=stmt ifStmt=ifStatement {If (x, y, ifStmt)}
    | kElse y=stmt kFi {y}
    | kFi {Skip}
);

var simpleStatement = memo $ eta syntax (
      kSkip {Skip}
    | kRead x=inbr[s("("), lident, s(")")] {Read (x)}
    | kWrite x=inbr[s("("), exp, s(")")] {Write (x)}
    | x=lident s[":="] e=exp { Assn (x, e) }
    | kIf x=exp kThen y=stmt ifStmt=ifStatement {If (x, y, ifStmt)}
    | kWhile x=exp kDo y=stmt kOd {While (x, y)}
    | kDo y=stmt kWhile x=exp kOd {DoWhile (y, x)}
    | kFor ini=stmt s[","] x=exp s[","] post=stmt kDo y=stmt kOd {Seq (ini, While (x, Seq (y, post)))}
);

var stmt = memo $ eta syntax (
  simpleStatement
  | f=simpleStatement s[";"] rest=stmt {
      Seq(f, rest)
  }
);

-- Public top-level parser
public parse = stmt;
