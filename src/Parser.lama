-- Parser
import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;
import STM;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- AST environment
fun createEnv (id) {
  fun freshName () {
    [createEnv (id+1), sprintf ("_tmp%d", id)]
  }

  [freshName]
}

fun emptyEnv () {
  createEnv (0)
}

fun freshName (env) {
  env [0] ()
}

-- Attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun value (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> v => fun (v) {Ignore (v)}
  | _    -> v
  esac
}

fun void (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | Weak -> v => fun (v) {Seq (v, Const (0))}
  | _    -> error ("reference expected", loc)
  esac
}

fun ref (atr, v, loc) {
  case atr of
      Ref  -> Ref (v)
    | Void -> Ignore (Var (v))
    | _    -> Var (v)
    esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binopSyntax (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            value(
                              a,
                              l (Val) =>> fun (l) {
                                r (Val) => fun (r) {
                                  Binop (op, l, r)
                                }
                              },
                              loc
                            )
                          }
                        }
  ]
}

fun binop(assoc, ops) {
  [assoc, map (binopSyntax, ops)]
}

fun binops(aops) {
  map (fun ([assoc, ops]) { binop(assoc, ops) }, aops)
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Set (ident, value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  fun expandValDefs (defs, expr) {
    foldr (fun ([defs, expr], [ident, value]) {     
             [ident : defs, Seq (Ignore (Set (ident, value)), expr)]
           },
           [{}, expr],
           defs)
  }
  
  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds) ->
                case expandDefs (ds, expr) of
                  [ds, expr] -> [Var (ds) : defs, expr]
                esac
             | Val (ds) ->
                case expandValDefs(ds, expr) of
                  [ds, expr] -> [Val (ds) : defs, expr]
                esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

-- Helper AST function: reifies pattern bindings into scope
-- definitions and assignments; takes an returns lists of
-- pattern-branch pairs
fun reifyPatternBindings (matched, brs) {
  map (
    fun ([pat, br]) {      
      fun collectBindings (path, p) {
        fun collectList (path, ps) {
          case
            foldl (fun ([acc, i], p) {
                     [collectBindings (i : path, p) : acc, i+1]                      
                   },
                   [{}, 0],
                   ps) of
            [acc, _] -> flatten (acc)
          esac            
        }
        
        case p of
          Sexp  (_, ps)   -> collectList (path, ps)
        | Array (ps)      -> collectList (path, ps)
        | Named (name, p) -> [name, path] : collectBindings (path, p)
        |  _              -> {}
        esac
      }

      case collectBindings ({}, pat) of
        {}       -> [pat, br]
      | bindings ->
           [pat,
             expandScope (
               {Val (map (
                      fun ([name, path]) {
                        [name, foldr (fun (p, i) {Elem (p, Const (i))}, Var (matched), path)]
                      },
                      bindings))},
               br
             )]
      esac
    },
    brs
  )
}


fun par(p) {
  inbr(s ("("), p, s (")"))
}   

fun brak(p) {
  inbr(s ("["), p, s ("]"))
}

var assignOp = [Right, 
                {
                  [
                    s (":="), 
                    fun (l, loc, r) {
                      fun (a) {
                        value (
                          a,
                          l (Ref) =>> fun (l) {
                            r (Val) => fun (r) {
                              Assn (l, r)
                            }
                          },
                          loc
                        )
                      }
                    }
                  ]
                }
               ];

var elseBody = memo $ eta syntax (
        loc=pos kElse elseSt=scopeExpr kFi { 
          fun(a) {
            elseSt (a)
          }
        }
      | loc=pos kElif ifSt=ifBody { 
          fun (a) {
            ifSt (a)
          }
        }
      | loc=pos kFi { 
          fun (a) {
            void (a, returnST $ Skip, loc)
          }
       }
    ),
    ifBody = memo $ eta syntax (
      loc=pos cond=exp kThen thenB=scopeExpr elseB=elseBody { 
        fun (a) {
          cond (Val) =>> fun (cond) {
            thenB (a) =>> fun (thenB) {
              elseB (a) => fun (elseB) {
                If (cond, thenB, elseB)
              } 
            }
          }
        }
      }
    );

var literal = memo $ eta syntax (
  loc=pos x=strlit {
  fun (a) {
    value (a, returnST $ String (x), loc)
  }
  }
| loc=pos x=chrlit {
  fun (a) {
    value (a, returnST $ Const (x), loc)
  }
  } 
| loc=pos x=decimal {
  fun (a) {
    value (a, returnST $ Const (stringInt (x)), loc)
  }
  } 
);

fun arrayParser(p) {
  memo $ eta syntax (
    loc=pos x=brak[list0(syntax (e=p {e(Val)}))] {
    fun (a) {
      value (a, chainST (x) => fun (x) { Array (x) }, loc)
    }
    }
  )
}

fun sexpParser(p) {
  memo $ eta syntax (
    loc=pos x=uident args=par[list0(syntax(e=p {e(Val)}))]? {
    fun (a) {
      args := case args of
        None -> {}
      | Some (args) -> args
      esac;
      value (a, chainST (args) => fun (args) { Sexp (x, args) }, loc)
    }
    }
  )
}

var pattern = memo $ eta syntax (
    literal
  | arrayParser[pattern]
  | sexpParser[pattern]
  | loc=pos s["_"] {
      fun (a) {
        returnST $ Wildcard
      }
    }
  | loc=pos name=lident p=(-s["@"] pattern)? {
      fun (a) {
        p := case p of
          None     -> returnST $ Wildcard
        | Some (p) -> p (a)
        esac;
        p => fun (p) { Named (name, p) }
      }
          }
  ),
  branch = memo $ eta syntax (
    loc=pos pt=pattern s["->"] x=scopeExpr {
    fun(a) {
      pt (Val) =>> fun (pt) {
        x (a) =>> fun (x) {
          returnST $ [pt, x]
        }
      }
    }
    }
  ),
  branches = memo $ eta syntax (
    loc=pos bs=listBy[branch, s("|")] {
    fun (a) {
      chainST (map (fun (b) { b (a) }, bs))
    }
    }
  );


var primary = memo $ eta syntax (
                  par[scopeExpr]
                | literal
                | loc=pos kSkip { -- Skip
                  fun (a) {
                      void (a, returnST $ Skip, loc)
                  }
                  }
                | loc=pos kIf body=ifBody { -- If
                  fun (a) {
                    body (a)
                  }
                  }
                | loc=pos kWhile cond=exp kDo x=scopeExpr kOd { -- While (cond, x)
                  fun (a) {
                    void (
                      a, 
                      cond (Val) =>> fun (cond) {
                        x (Void) => fun (x) {
                          While(cond, x)
                        }
                      },
                      loc
                    )
                  }
                  }
                | loc=pos kFor x=scopeExpr s[","] cond=exp s[","] z=exp kDo y=scopeExpr kOd { -- x;While (cond, y;z)
                  fun (a) {
                    void (
                      a,
                      x (Void) =>> fun (x) {
                        cond (Val) =>> fun (cond) {
                          y (Void) =>> fun (y) {
                            z (Void) => fun (z) {
                              distributeScope(x, fun (x) { Seq (x, While(cond, Seq (y, z))) })
                            }
                          }
                        }

                      },
                      loc
                    )
                  }
                 }
                | loc=pos kDo x=scopeExpr kWhile cond=exp kOd { -- DoWhile(x, cond)
                  fun (a) {
                    void (
                      a,
                      x (Void) =>> fun (x) {
                        cond (Val) => fun (cond) {
                          distributeScope(x, fun (x) { DoWhile(x, cond) })
                        }
                      },
                      loc
                    )
                  }
                  }
                | loc=pos kCase x=exp kOf v=branches kEsac {
                  fun (a) {
                    freshName =>> fun (name) {
                      x(Val) =>> fun (x) {
                        v (a) => fun (v) {
                          Scope( { Var ({name}) }, Seq (Ignore (Assn (Ref (name), x)), Case (name, reifyPatternBindings (name, v))))
                        }
                      }
                    }
                  }
                }
                | loc=pos x=lident args=par[list0(syntax(e=exp {e(Val)}))]? { -- Val (x) / Ref (x) / Val (Call (x, args))
                  fun (a) {
                    case args of
                      None -> returnST $ ref (a, x, loc)
                    | Some (args) -> value (a, chainST (args) => fun (args) {Call (x, args)}, loc)
                    esac
                  }
                  }
                | arrayParser[exp]
                | sexpParser[exp] 
                ),
      basic = memo $ eta (expr (assignOp : binops({
                                  [Left, {"!!"}],
                                  [Left, {"&&"}],
                                  [Nona, {"==", "!=", "<", ">", "<=", ">="}],
                                  [Left, {"+", "-"}],
                                  [Left, {"*", "/", "%"}]
                                 }),
                                 postfix)),
      postfix = memo $ eta syntax (
        loc=pos e=primary ps=(i=brak[exp] {Index (i (Val))})* {
          fun (a) {
            foldl (fun (e, p) {
              case p of                                                                                   
                  Index (i) -> fun (a) {
                    e (Val) =>> fun (e) { 
                      i => fun (i) { 
                        case a of
                          Ref -> ElemRef (e, i) 
                        | _   -> value (a, Elem (e, i), loc)
                        esac
                      }
                    }
                  }
              esac                                                                            
            }, e, ps) (a)
          }
        }
      ),
      scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {
        fun (a) {
          fun (e) {
            case ds of
              {} -> e
            | _  -> chainST (ds) =>> fun (ds) { e => fun (e)  { expandScope (ds, e) } }
            esac
          }
          (case e of 
            Some (e) -> e (a)
          | _        -> returnST $ Skip
          esac)
        }
      }                                                                
  ),
  
  definition = memo $ eta syntax (
    kVar ds=list[
        syntax (
          x=lident e=(-s["="] basic)? {
            case e of
              None -> returnST $ [x, None]
            | Some (e) ->
                e (Val) => fun (e) {[x, Some (e)]}
            esac
          }
        )
      ] s[";"] {
        chainST (ds) => fun (ds) {Var (ds)}
      } 
    | kVal ds=list[
        syntax (
          x=lident s["="] e=basic {
            e (Val) => fun (e) {[x, e]}
          }
        )
      ] s[";"] {
      chainST (ds) => fun (ds) {Val (ds)}
      } 
    | kFun name=lident args=par[list0 (lident)] body=inbr[s("{"), scopeExpr, s("}")] {
        body (Weak) => fun (body) {Fun (name, args, body)}
      }
  ),
  
  exp = memo $ eta syntax (
    basic
  | s1=basic s[";"] s2=exp {
     fun (a) {
       s1 (Void) =>> fun (s1) {
       s2 (a)    =>  fun (s2) {
         Seq (s1, s2)
       }}
     }
   }
  );

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void) (emptyEnv ()) [1]});
