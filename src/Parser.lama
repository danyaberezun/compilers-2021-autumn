-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (failure ("expression parsing not implemented\n"));

var stmt = memo $ eta syntax (x=lident s[":="] expr=primary {Assn (x, expr)} 				|
							  stmt1=stmt token[";"] stmt2=stmt end {Seq (stmt1, stmt2)}		|	
							  kSkip {Skip}													|
							  kRead x=inbr[s("("), lident, s(")")]  {Read (x)} 				|
							  kWrite expr=inbr[s("("), primary, s(")")]  {Write (expr)}		|
							  end);

-- Public top-level parser
public parse = stmt;
             
