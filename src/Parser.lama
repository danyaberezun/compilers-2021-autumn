-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var elseBranchParser = memo $ eta syntax (
    loc = pos kFi                                      { fun (x) { assertVoid (x, Skip, loc) } }
  | loc = pos kElse e = exp kFi                        { fun (x) { e(x) } }
  | kElif e = exp kThen e1 = exp e2 = elseBranchParser { fun (x) { If (e (Val), e1 (x), e2 (x)) } }
);

var primary = memo $ eta syntax (
      loc = pos x = decimal { fun (a) { assertValue (a, Const (stringInt (x)), loc) } }
    | x = lident { fun (a) {
                    case a of
                      Ref  -> Ref (x)
                    | Void -> Ignore (Var (x))
                    | _    -> Var (x)
                    esac
                   }
                 }
    | loc = pos e = inbr[s("("), exp, s(")")]                                 { fun (a) { e (a) } }
    | loc = pos kSkip                                                         { fun (a) { assertVoid (a, Skip, loc) } }
    | loc = pos kRead x = inbr[s("("), lident, s(")")]                        { fun (a) { assertVoid (a, Read (x), loc) } }
    | loc = pos kWrite e = inbr[s("("), exp, s(")")]                          { fun (a) { assertVoid (a, Write (e (Val)), loc) } }
    | loc = pos kIf e = exp kThen e1 = exp e2 = elseBranchParser              { fun (a) { If (e (Val), e1 (a), e2 (a)) } }
    | loc = pos kWhile e = exp kDo e1 = exp kOd                               { fun (a) { assertVoid (a, While (e (Val), e1 (Void)), loc) } }
    | loc = pos kDo e1 = exp kWhile e = exp kOd                               { fun (a) { assertVoid (a, DoWhile (e1 (Void), e (Val)), loc) } }
    | loc = pos kFor e1 = exp s[","] e = exp s[","] e3 = exp kDo e4 = exp kOd { fun (a) { assertVoid (a, Seq (e1 (Void), While (e (Val), Seq (e4 (Void), e3 (Void)))), loc) } }
  ),

  basic = memo $ eta (expr ({
    [Right, { [s (":="), fun (l, loc, r) { fun (x) { assertValue (x, Assn (l (Ref), r (Val)), loc) } }] }],
    [Left , map (binop, { "!!" })],
    [Left , map (binop, { "&&" })],
    [Nona , map (binop, { "==", "!=", "<", ">", "<=", ">=" })],
    [Left , map (binop, { "+", "-" })],
    [Left , map (binop, { "*", "/", "%" })]
  }, primary)),

  exp = memo $ eta syntax (
      basic
    | s1 = basic s[";"] s2 = exp { fun (x) { Seq (s1 (Void), s2 (x)) } }
  );

-- Public top-level parser
public parse = syntax (s = exp { s (Void) });
