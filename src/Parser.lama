-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp    = memo $ eta syntax (lhv=exp s["!!"] rhv=expAND { Binop ("!!", lhv, rhv) } | expAND),
    expAND = memo $ eta syntax (lhv=expAND s["&&"] rhv=expEQ { Binop ("&&", lhv, rhv) } | expEQ),
    expEQ  = memo $ eta syntax (lhv=expSUM op=(s["=="]|s["!="]|s["<="]|s[">="]|s["<"]|s[">"]) rhv=expSUM { Binop (op, lhv, rhv) } | expSUM),
    expSUM = memo $ eta syntax (lhv=expSUM op=(s["+"]|s["-"]) rhv=expMUL { Binop (op, lhv, rhv) } | expMUL),
    expMUL = memo $ eta syntax (lhv=expMUL op=(s["*"]|s["/"]|s["%"]) rhv=primary { Binop (op, lhv, rhv) } | primary);


      
var stmt = memo $ eta syntax (single |
                              s1=single s[";"] s2=stmt {Seq(s1,s2)}),
    single = memo $ eta syntax (x=lident $(s(":=")) e=exp {Assn(x, e)} |
                              kRead v=inbr[s("("), lident, s(")")] {Read(v)} |
                              kWrite e=inbr[s("("), exp, s(")")] {Write(e)} |
                              kSkip {Skip});
   

-- Public top-level parser
public parse = stmt;
             
