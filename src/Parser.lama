-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")] ),
      exp = memo $ eta expr ({
        [Left, {[token ("+"), fun (l, op, r) {Binop (op, l, r)}], 
                [token ("−"), fun (l, op, r) {Binop (op, l, r)}]}],

        [Left, {[token ("∗"), fun (l, op, r) {Binop (op, l, r)}],
                [token ("/"), fun (l, op, r) {Binop (op, l, r)}],
                [token ("%"), fun (l, op, r) {Binop (op, l, r)}] }],

        [Left, {[token (">"), fun (l, op, r) {Binop (op, l, r)}],
                [token ("<"), fun (l, op, r) {Binop (op, l, r)}],
                [token (">="), fun (l, op, r) {Binop (op, l, r)}],
                [token ("<="), fun (l, op, r) {Binop (op, l, r)}],
                [token ("=="), fun (l, op, r) {Binop (op, l, r)}],
                [token ("!="), fun (l, op, r) {Binop (op, l, r)}],
                [token ("&&"), fun (l, op, r) {Binop (op, l, r)}],
                [token ("!!"), fun (l, op, r) {Binop (op, l, r)}]}]},primary);

var single_stmt = memo $ eta syntax (
    kRead ident=inbr[s("("), lident, s(")")] {Read (ident)}
  | kWrite expression=inbr[s("("), exp, s(")")] {Write (expression)}
  | kSkip {Skip}
  | ident=lident s[":="] expression=exp {Assn(ident, expression)}       
);

var stmt = memo $ eta syntax (
    single_stmt
  | stmt1 = single_stmt s[";"] stmt2 = stmt {Seq(stmt1, stmt2)}
);
   

-- Public top-level parser
public parse = stmt;
             
