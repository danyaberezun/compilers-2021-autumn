-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun makeop (l, op, r) { Binop(op, l, r) }

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
exp = memo $ eta expr ({
  [Left, {  [s("&&") | s("!!")                                       , makeop]  }],
  [Left, {  [s("<=") | s(">=") | s("<") | s(">") | s("!=") | s("==") , makeop]  }],
  [Left, {  [s("+") | s("-")                                         , makeop]  }],
  [Left, {  [s("*") | s("/") | s("%")                                , makeop]  }]
  }, primary);

var stmt = memo $ eta syntax( 
  kRead  into=inbr[s("("),lident,s(")")]  { Read(into)     } |
  kWrite  what=inbr[s("("),exp,s(")")]    { Write(what)    } |
  to=lident  s[":="]  what=exp            { Assn(to, what) } |
  a=stmt  s[";"]  b=stmt end              { Seq(a, b)      }                 
);

-- Public top-level parser
public parse = stmt;