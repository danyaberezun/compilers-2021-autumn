-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;
import STM;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- AST environment
fun createEnv (id) {
  fun freshName () {
    [createEnv (id+1), sprintf ("_tmp%d", id)]
  }

  [freshName]
}

fun emptyEnv () {
  createEnv (0)
}

fun freshName (env) {
  env [0] ()
}

-- Attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, vl, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> vl => fun (vl) {Ignore (vl)}
  | _    -> vl
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, vl, loc) {
  case atr of
    Void -> vl
  | Val  -> error ("value expected", loc)
  | Weak -> vl => fun (vl) {Seq (vl, Const (0))}
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, l (Val) =>> fun (l) {
                                            r (Val) =>  fun (r) {
                                              Binop (op, l, r)
                                            }}, loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandVarDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Set (ident, value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  fun expandValDefs (defs, expr) {
    foldr (fun ([defs, expr], [ident, value]) {
             [ident : defs, Seq (Ignore (Set (ident, value)), expr)]
           },
           [{}, expr],
           defs)
  }

  case
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Val (ds) ->
                 case expandValDefs (ds, expr) of
                   [ds, expr] -> [Val (ds) : defs, expr]
                 esac
             | Var (ds) ->
                 case expandVarDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

-- Helper AST function: reifies pattern bindings into scope
-- definitions and assignments; takes an returns lists of
-- pattern-branch pairs
fun reifyPatternBindings (matched, brs) {
  map (
    fun ([pat, br]) {
      fun collectBindings (path, p) {
        fun collectList (path, ps) {
          case
            foldl (fun ([acc, i], p) {
                     [collectBindings (i : path, p) : acc, i+1]
                   },
                   [{}, 0],
                   ps) of
            [acc, _] -> flatten (acc)
          esac
        }

        case p of
          SexpPtrn  (_, ps)   -> collectList (path, ps)
        | ArrayPtrn (ps)      -> collectList (path, ps)
        | NamedPtrn (name, p) -> [name, path] : collectBindings (path, p)
        | VarPtrn   (name)    -> {[name, path]}
        |  _                  -> {}
        esac
      }

      case collectBindings ({}, pat) of
        {}       -> [pat, br]
      | bindings ->
           [pat,
             expandScope (
               {Val (map (
                      fun ([name, path]) {
                        [name, foldr (fun (p, i) {Elem (p, Const (i))}, Var (matched), path)]
                      },
                      bindings))},
               br
             )]
      esac
    },
    brs
  )
}

var
  primary = memo $ eta syntax (
    -- array constant
    loc=pos x=inbr[s("["), list0(syntax (e=exp {e(Val)})), s("]")] {
      fun (a) {assertValue (a, chainST (x) => fun (x) {Array (x)}, loc)}
    } |

    -- string constant
    loc=pos x=strlit {
      fun (a) {assertValue (a, returnST $ String (x), loc)}
    } |

    -- character literal
    loc=pos x=chrlit {
      fun (a) {assertValue (a, returnST $ Const (x), loc)}
    } |

    -- decimal constant
    loc=pos x=decimal {
      fun (a) {assertValue (a, returnST $ Const (stringInt (x)), loc)}
    } |

    -- identifier
    loc=pos x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {
      fun (a) {
        case args of
          None -> returnST $ case a of
                               Ref  -> Ref (x)
                             | Void -> Ignore (Var (x))
                             | _    -> Var (x)
                             esac
        | Some (args) -> assertValue (a, chainST (args) => fun (args) {Call (x, args)}, loc)
        esac}
    } |

    -- S-expression
    loc=pos x=uident args=inbr[s("("), list0(syntax(e=exp {e (Val)})), s(")")]? {
      fun (a) {
        assertValue (a, case args of
                          None        -> returnST $ Sexp (x, {})
                        | Some (args) -> chainST (args) => fun (args) {Sexp (x, args)}
                        esac, loc)}
    } |

    -- expr in brackets
    loc=pos e=inbr[s("("), scopeExpr, s(")")] { e                                                            } |

    -- skip-experssion
    loc=pos kSkip                             { fun (a) { assertVoid (a, returnST $ Skip, loc)              }} |

    -- while-expression
    loc=pos kWhile e=exp kDo s=scopeExpr kOd
        {fun (a) {
            assertVoid (a,
                        e (Val) =>> fun (e) {
                        s (Void) => fun (s) {
                          While (e, s)
                        }}, loc)                                                                            }} |

    -- if-expression
    loc=pos kIf e=exp kThen s=scopeExpr kFi
        { fun (a) {
            assertVoid (a,
                        e (Val) =>> fun (e) {
                        s (a)   =>  fun (s) {
                          If (e, s, Skip)
                        }}, loc)                                                                            }} |
    -- if-expression
    loc=pos kIf e=exp kThen s=scopeExpr alts=elifs kFi
        { fun (a) {
            e (Val)  =>> fun (e) {
            s (a)    =>> fun (s) {
            alts (a) =>  fun (alts) {
              If (e, s, alts)}}}                                                                            }} |

     -- do-while-expression
    loc=pos kDo s=scopeExpr kWhile e=exp kOd
        { fun (a) {
            assertVoid (a,
                        e (Val)  =>> fun (e) {
                        s (Void) =>  fun (s) {
                           distributeScope (s, fun (ex) { DoWhile (ex, e) })}}, loc)                        }} |

    -- for-expression
    loc=pos kFor s1=scopeExpr s[","] e=exp s[","] s2=exp kDo s3=scopeExpr kOd
        { fun (a) {
            assertVoid (a,
                        s1 (Void) =>> fun (s1) {
                        e  (Val)  =>> fun (e)  {
                        s2 (Void) =>> fun (s2) {
                        s3 (Void) =>  fun (s3) {
                          distributeScope (s1,
                            fun (ex) {Seq (ex,
                                           While (e,
                                                  Seq (s3, s2)))})}}}}, loc)                                }} |

    -- case-expression
    loc=pos kCase s=exp kOf brs=caseBranches kEsac {
      fun (a) {
        freshName =>> fun (name) {
        s (Val)   =>> fun (s)    {
        brs (a)   =>  fun (brs)  {
          Scope ({Var ({name})},
              Seq (Ignore (Assn (Ref (name), s)),
                   Case (name, reifyPatternBindings (name, brs))))
        }}}
      }
    }),

    caseBranches = memo $ eta syntax (
      loc=pos brs=listBy[caseBranch, s("|")] {
        fun (a) { chainST (map (fun (b) { b (a) }, brs)) }
      }
    ),

    caseBranch = memo $ eta syntax (
      loc=pos p=casePattern s["->"] e=scopeExpr { fun (a) {p     =>> fun (p) {
                                                           e (a) =>> fun (e) {
                                                              returnST $ [p, e]
                                                            }
                                                           }}}
    ),

    casePattern = memo $ eta syntax (
      loc=pos x=decimal                                   { returnST $ NumPtrn (stringInt (x))            } |

      loc=pos s["_"]                                      { returnST $ WildPtrn                           } |

      loc=pos v=lident s["@"] p=casePattern               { p =>> fun (p) { returnST $ NamedPtrn (v, p) } } |

      loc=pos v=lident                                    { returnST $ VarPtrn (v)                        } |

      loc=pos xs=inbr[s("["), list0(casePattern), s("]")] { chainST (xs) => fun (xs) { ArrayPtrn (xs) }   } |

      loc=pos x=uident args=inbr[s("("), list0(casePattern), s(")")]?
                        { case args of
                            None        -> returnST $ SexpPtrn (x, {})
                          | Some (args) -> chainST (args) => fun (args) { SexpPtrn (x, args) }
                          esac }
   ),


  -- if-expression: else-branch
  elifs = memo $ eta syntax (
    kElif e=exp kThen s=scopeExpr alts=elifs { fun (a) {
      e (Val)  =>> fun (e)    {
      s (a)    =>> fun (s)    {
      alts (a) =>  fun (alts) {
        If (e, s, alts) }}}}
                                                        } |

    kElif e=exp kThen s=scopeExpr {            fun (a) {
      e (Val) =>> fun (e) {
      s (a)   =>  fun (s) {
        If (e, s, Skip) }}}                             } |

    kElse s=scopeExpr { s                               }),


  basic = memo $ eta (
    expr ({[Right, {[s (":="), fun (l, loc, r) {
                                 fun (a) {assertValue (a, l (Ref) =>> fun (l) {
                                                          r (Val) =>  fun (r) {
                                                          Assn (l, r)
                                                          }},
                                                        loc)
                                 }
                               }]}],
           [Left , map (binop, {"!!"})],
           [Left , map (binop, {"&&"})],
           [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
           [Left , map (binop, {"+", "-"})],
           [Left , map (binop, {"*", "/", "%"})]
          },
          postfix)
  ),

  postfix = memo $ eta syntax (
    loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] {Index (i (Val))})* {
      fun (a) {
        foldl (fun (e, p) {
                 case p of
                   Index (i) ->
                    fun (a) {
                      case a of
                        Ref -> e (Val) =>> fun (e) {
                               i       =>  fun (i) {
                                 ElemRef (e, i)
                               }}
                      | _   -> assertValue (a, e (Val) =>> fun (e) {
                                               i       =>  fun (i) {
                                               Elem (e, i)
                                               }},
                                            loc)
                      esac
                    }
                 esac
               }, e, ps) (a)
      }}
  ),

  scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {
    fun (a) {
      fun (e) {
        case ds of
          {} -> e
        | _  -> chainST (ds) =>> fun (ds) {
                e            =>  fun (e)  {
                  expandScope (ds, e)
                }}
        esac
      }
      (case e of
        Some (e) -> e (a)
      | _        -> returnST $ Skip
      esac)
    }}
  ),

  definition = memo $ eta syntax (
    kVar ds=list[syntax (x=lident e=(-s["="] basic)? {case e of
                                                        None -> returnST $ [x, None]
                                                      | Some (e) ->
                                                          e (Val) => fun (e) {[x, Some (e)]}
                                                      esac})] s[";"] {
      chainST (ds) => fun (ds) {Var (ds)}
    } |
    kVal ds=list[syntax (x=lident s["="] e=basic {e (Val) => fun (e) {[x, e]}})] s[";"] {
      chainST (ds) => fun (ds) {Val (ds)}
    } |
    kFun name=lident args=inbr[s("("), list0 (lident), s(")")] body=inbr[s("{"), scopeExpr, s("}")] {
      body (Weak) => fun (body) {Fun (name, args, body)}
    }
  ),

  exp = memo $ eta syntax (
    basic
  | s1=basic s[";"] s2=exp {
     fun (a) {
       s1 (Void) =>> fun (s1) {
       s2 (a)    =>  fun (s2) {
         Seq (s1, s2)
       }}
     }
   }
  );

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void) (emptyEnv ()) [1]});
