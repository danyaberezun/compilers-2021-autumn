-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

var ops = {
  [Left, {[s ("!!"), fun (l, op, r) {Binop (op, l, r)}]}],
  [Left, {[s ("&&"), fun (l, op, r) {Binop (op, l, r)}]}],
  [Nona, {[s ("=="), fun (l, op, r) {Binop (op, l, r)}],
          [s ("<="), fun (l, op, r) {Binop (op, l, r)}],
          [s (">="), fun (l, op, r) {Binop (op, l, r)}],
          [s ("!="), fun (l, op, r) {Binop (op, l, r)}],
          [s ("<"), fun (l, op, r) {Binop (op, l, r)}],
          [s (">"), fun (l, op, r) {Binop (op, l, r)}]}],
  [Left, {[s ("+"), fun (l, op, r) {Binop (op, l, r)}],
          [s ("-"), fun (l, op, r) {Binop (op, l, r)}]}],
  [Left, {[s ("*"), fun (l, op, r) {Binop (op, l, r)}],
          [s ("/"), fun (l, op, r) {Binop (op, l, r)}],
          [s ("%"), fun (l, op, r) {Binop (op, l, r)}]}]
  };

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
    exp = memo $ eta expr(ops, primary);


var elif_stmt_fi = memo $ eta syntax (kElse st=stmt kFi {st} |
                                      kFi {Skip} |
                                      kElif ex=exp kThen st1=stmt st2=elif_stmt_fi {If(ex, st1, st2)}
                                     );
                                   

var one_stmt = memo $ eta syntax (
                              kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
                              -kSkip {Skip}                                     |
                              kWrite x=primary {Write(x)}                    |
                              x=lident s[":="] ex=exp {Assn(x, ex)}             |
                              kWhile ex=exp kDo st=stmt kOd {While(ex, st)} |
                              kDo st=stmt kWhile ex=exp kOd {DoWhile(st, ex)} |
                              kIf ex=exp kThen st1=stmt st2=elif_stmt_fi {If(ex, st1, st2)} |
                              kFor st0=stmt s[","] ex=exp s[","] sti=stmt kDo st=stmt kOd {Seq(st0, While(ex, Seq(st, sti)))}
                            );

var stmt = memo $ eta syntax (one_stmt |
                              l=one_stmt s[";"] r=stmt {Seq(l, r)});
   

-- Public top-level parser
public parse = stmt;
