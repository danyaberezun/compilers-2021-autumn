-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
<<<<<<< HEAD
=======
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}
>>>>>>> c712ce538404a3b90c586989abbbf84dc78273c5

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

<<<<<<< HEAD
var exprsList =  {
		[Left, funcExprSymb({"&&"})],
		[Left, funcExprSymb({"!!"})],
        	[Nona, funcExprSymb({"=="})],
		[Nona, funcExprSymb({"!="})],
		[Nona, funcExprSymb({"<"})],
		[Nona, funcExprSymb({"<="})],
		[Nona, funcExprSymb({">"})],
		[Nona, funcExprSymb({">="})],
        	[Left, funcExprSymb({"+"})],
		[Left, funcExprSymb({"-"})],
		[Left, funcExprSymb({"*", "/", "%"})]
      }; 



-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 arrInbr[exp]),

	exp = memo $ eta expr (exprsList, primary);

fun arrInbr (i) {
  inbr (s ("("), i, s (")"))
}

fun funcExprSymb(expr){
    map(funcExpr,expr)
}

fun funcExpr(op) {
  [s(op), fun (l, op, r) {Binop (op, l, r)}]
}

fun elseFunc(){
  memo $ eta syntax (kElse e=(x1=stmt s[";"] x2=parse {Seq (x1, x2)} | stmt) kFi {e})
}

fun elseIfFunc(){
  memo $ eta syntax (kElif c=exp kThen i=(x1=stmt s[";"] x2=parse {Seq (x1, x2)} | stmt) e=exprIf {If (c, i, e)})
}

fun funcIf(){
  var elseIf = elseIfFunc();
  var elseFun = elseFunc();
  memo $ eta syntax ( 		 elseFun|
			         kFi {Skip} |
				 elseIf)
                                   
}

fun buildSeqForWhile(x, y, seqstmt){
	Seq (x, While (y, seqstmt))
}

fun funcCycle(){
  memo $ eta syntax (
                               kDo f=(x1=stmt s[";"] x2=parse {Seq (x1, x2)} | stmt) kWhile c=exp kOd                        {DoWhile (f, c)} |
                               kFor init=(x1=stmt s[";"] x2=parse {Seq (x1, x2)} | stmt) s[","] c=exp s[","] post=(x1=stmt s[";"] x2=parse {Seq (x1, x2)} | stmt) kDo f=(x1=stmt s[";"] x2=parse {Seq (x1, x2)} | stmt) kOd 
                                                                    {buildSeqForWhile(init, c, Seq (f, post))}|
			       kWhile c=exp kDo f=(x1=stmt s[";"] x2=parse {Seq (x1, x2)} | stmt) kOd                          {While (c, f)})
}
var exprIf = funcIf();
var cycle = funcCycle();
var stmt = memo $ eta syntax(  kSkip  {Skip}                        |
			       kRead i=arrInbr[lident] {Read (i)}   |
			       kWrite i=arrInbr[exp] {Write (i)}    |
                               kIf c=exp kThen i=(x1=stmt s[";"] x2=parse {Seq (x1, x2)} | stmt) e=exprIf           {If (c, i, e)} |
                               cycle |
                               x1=lident s[":="] 
			       x2=exp {Assn (x1, x2)});       

-- Public top-level parser
public parse = memo $ eta syntax (x1=stmt s[";"] x2=parse {Seq (x1, x2)} | stmt);
    
=======
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                  -- identifier
                                  x=lident                                          {fun (a) {
                                                                                       case a of
                                                                                         Ref  -> Ref (x)
                                                                                       | Void -> Ignore (Var (x))
                                                                                       | _    -> Var (x)
                                                                                       esac
                                                                                    }} |
                                  $(failure ("the rest of primary parsing in not implemented\n"))),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
>>>>>>> c712ce538404a3b90c586989abbbf84dc78273c5
