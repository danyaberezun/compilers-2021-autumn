-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun par(p) {
	inbr(s("("), p, s(")"))
}

fun mapBinop(left, op, right) { Binop(op, left, right) }

fun binop(assoc, ops) {
	[assoc, map (fun(op) { [s(op), mapBinop] }, ops)]
}

fun binops(aops) {
	map (fun ([assoc, ops]) { binop(assoc, ops) }, aops)
}

-- Primary expression
var primary = memo $ eta syntax (
	  x=decimal {Const (stringInt (x))} 
	| x=lident  {Var (x)}               
	| par[exp]
	),
    exp = memo $ eta (expr (binops ({
       [Left, {"!!"}],
       [Left, {"&&"}],
       [Nona, {"==", "<", ">", "!=", ">=", "<="}],
       [Left, {"+", "-"}],
       [Left, {"*", "/", "%"}]
    }), primary));

var stmt = memo $ eta syntax (
	  kRead x=par[lident] { Read (x) }
	| kWrite x=par[exp]  { Write (x) }
	| kSkip { Skip }
	| x=lident s[":="] a=exp { Assn (x, a) }
	| a=stmt s[";"] b=stmt end { Seq (a, b) }
);

-- Public top-level parser
public parse = stmt;
             
