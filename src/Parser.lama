-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun toBinOp(op) {
  [s(op), fun (l, op, r) {Binop(op, l, r)}]
}

fun binOps() {
  {
    [Left, map(toBinOp, {"!!"})],
    [Left, map(toBinOp, {"&&"})],
    [Nona, map(toBinOp, {"<", ">", ">=", "<=", "==", "!="})],
    [Left, map(toBinOp, {"+", "-"})],
    [Left, map(toBinOp, {"*", "/", "%"})]
  }
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr(binOps(), primary);

var stmt = memo $ eta syntax (kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
                              kWrite e=inbr[s("("), exp, s(")")] {Write (e)} |
                              x=lident s[":="] e=exp {Assn(x, e)} |
                              kSkip {Skip}
                );

var stmts = memo $ eta syntax (stmt |
                              my_stmt=stmt s[";"] my_stmts=stmts {Seq (my_stmt, my_stmts)});
-- Public top-level parser
public parse = stmts;
             
