-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (
    x=decimal {Const (stringInt (x))}
  | x=lident  {Var (x)}
  | inbr[s("("), exp, s(")")]
);

fun combiner(lhs, op, rhs) { Binop (op, lhs, rhs) }

var exp = memo $ expr (
  {
    [ Left, { [ s ("&&"), combiner ]
            , [ s ("!!"), combiner ]
            } ],

    [ Nona, { [ s (">"), combiner ]
            , [ s ("<"), combiner ]
            , [ s (">="), combiner ]
            , [ s ("<="), combiner ]
            , [ s ("=="), combiner ]
            , [ s ("!="), combiner ]
            } ],

    [ Left, { [ s ("+"), combiner ]
            , [ s ("-"), combiner ]
            } ],

    [ Left, { [ s ("*"), combiner ]
            , [ s ("/"), combiner ]
            , [ s ("%"), combiner ]
            } ]
  },
  primary
);

var endIf = memo $ eta syntax
  ( kFi {Skip}
  | kElse body=stmt kFi {body}
  | kElif cond=exp kThen bodyThen=stmt bodyElse=endIf {If (cond, bodyThen, bodyElse)}
  );

var oneStmt = memo $ eta syntax
  ( kSkip {Skip}
  | name=lident s[":="] x=exp {Assn (name, x)}
  | kRead s["("] name=lident s[")"] {Read (name)}
  | kWrite s["("] x=exp s[")"] {Write (x)}
  | kIf cond=exp kThen bodyThen=stmt bodyElse=endIf {If (cond, bodyThen, bodyElse)}
  | kWhile cond=exp kDo body=stmt kOd {While (cond, body)}
  | kDo body=stmt kWhile cond=exp kOd {DoWhile (cond, body)}
  | kFor init=stmt s[","] cond=exp s[","] iter=stmt kDo body=stmt kOd {Seq (init, While (cond, Seq (body, iter)))}
  );

-- var stmt = memo $ eta syntax (
--     oneStmt -eof
--   | lhs=oneStmt s[";"] rhs=stmt {Seq(lhs, rhs)}
-- );

var stmt = memo $ expr (
  {
    [
      Left, {
        [
          s (";"),
          fun (lhs, op, rhs) { Seq (lhs, rhs) }
        ]
      }
    ]
  },
  oneStmt
);

-- Public top-level parser
public parse = stmt;
