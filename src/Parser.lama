-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal { Const(stringInt(x)) } |
  x=lident { Var(x) }                                              |
  inbr[s("("), exp, s(")")]);
fun opParsing(op) {
  [s(op), fun (l, k, r) { Binop(op, l, r) }]
}

var exp = memo $ expr(
  {
    [Left, { opParsing("!!") }],
    [Left, { opParsing("&&") }],
    [Nona, { opParsing("=="), opParsing("!="), opParsing(">="), opParsing(">"), opParsing("<"), opParsing("<=") }],
    [Left, { opParsing("+"), opParsing("-") }],
    [Left, { opParsing("*"), opParsing("/"), opParsing("%") }]
  },
  primary
);

var elifLanguage = memo $ eta syntax (
  kElif x=exp kThen s=stmt { If(x, s, Skip) }               |
  kElif x=exp kThen s1=stmt kElse s2=stmt { If(x, s1, s2) } |
  kElif x=exp kThen s=stmt rest=elifLanguage { If(x, s, rest) }
);

var ifLanguage = memo $ eta syntax(
  kIf x=exp kThen s1=stmt kFi { If(x, s1, Skip) }             |
  kIf x=exp kThen s1=stmt kElse s2=stmt kFi { If(x, s1, s2) } |
  kIf x=exp kThen s1=stmt t=elifLanguage kFi { If(x, s1, t) }
);

var stmtPremitive = memo $ eta syntax (
  kSkip { Skip }                                                                              |
  v=lident s[":="] e=exp { Assn(v, e) }                                                       |
  kRead s["("] x=lident s[")"] { Read(x) }                                                    |
  kWrite s["("] x=exp s[")"] { Write(x) }                                                     |
  kWhile x=exp kDo y=stmt kOd { While(x, y) }                                                 |
  kDo y=stmt kWhile x=exp kOd { DoWhile(x, y) }                                               |
  kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd { Seq(s1, While(e, Seq(s3, s2))) } |
  i=ifLanguage { i }
);

var stmt = memo $ eta syntax(
  s1=stmtPremitive s[";"] s2=stmt { Seq(s1, s2) } |
  stmtPremitive
);

-- Public top-level parser
public parse = stmt;
