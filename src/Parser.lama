-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun createBinop(l, op, r) {
  Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
        exp = memo $ eta (expr ({[Left, {[ s("!!"),  createBinop]}],
                                 [Left, {[ s("&&"),  createBinop]}],
                                 [Nona, {[(s("==") |
                                           s("!=") |
                                           s("<=") |
                                           s("<")  |
                                           s(">=") |
                                           s(">")), createBinop]}],
                                 [Left, {[(s("+")  |
                                           s("-")), createBinop]}],
                                 [Left, {[(s("*")  |
                                           s("/")  |
                                           s("%")), createBinop]}]},
                                 primary));

var basicStmt = memo $ eta syntax (kSkip                         {Skip}              |
                                   kRead s["("] x=lident s[")"]  {Read (x)}          |
                                   kWrite s["("] expr=exp s[")"] {Write (expr)}      |
                                   x=lident s[":="] expr=exp     {Assn (x, expr)}),
         stmt = memo $ eta syntax (basicStmt |
                                   left=basicStmt s[";"] right=stmt {Seq (left, right)});
   

-- Public top-level parser
public parse = stmt;
