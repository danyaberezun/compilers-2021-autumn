-- Parser

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun op(op) {
  [s(op), fun (l, op, r) {Binop (op, l, r)}]
}

var ops = {
  [Left, {op ("!!")}],
  [Left, {op ("&&")}],
  [Nona, map (op, {"==", "!=", "<", "<=", ">", ">="})],
  [Left, map (op, {"+", "-"})],
  [Left, map (op, {"*", "/", "%"})]
};

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ eta (expr (ops, primary));

var basicStmt = memo $ eta syntax (x=lident s[":="] v=exp               {Assn (x, v)} |
                                   kSkip                                {Skip}        |
                                   kRead x=inbr[s("("), lident, s(")")] {Read (x)}    |
                                   kWrite e=inbr[s("("), exp, s(")")]   {Write (e)}),
    stmt = memo $ eta syntax (basicStmt |
                              l=basicStmt s[";"] r=stmt {Seq (l, r)});

-- Public top-level parser
public parse = stmt;