-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
fun parseBinop(op) {
  [s(op), fun (lhs, _, rhs) {Binop(op, lhs, rhs)}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ eta (expr({
        [Left, {parseBinop("!!")}],
        [Left, {parseBinop("&&")}],
        [Nona, map(parseBinop, {"<", "<=", "==", "!=", ">=", ">"})],
        [Left, map(parseBinop, {"+", "-"})],
        [Left, map(parseBinop, {"*", "/", "%"})]
      }, primary));

var elseIfPart = memo $ eta syntax (
      kElif condition=exp kThen body=stmt {[condition, body]}   
    ), 
    elsePart = memo $ eta syntax (
      kElse body=stmt {body}
    ),
    ifStmt = memo $ eta syntax (
      kIf condition=exp kThen body=stmt elifs=elseIfPart* els=elsePart? kFi {
        var innerElseBody = case els of 
            Some(eb) -> eb
          | None     -> Skip
        esac;

        var elseBody = foldr (fun(acc, [condition, body]) {
          If (condition, body, acc)
        }, innerElseBody, elifs);

        If (condition, body, elseBody)
      }      
    ),
    forStmt = memo $ eta syntax (
             kFor pre=stmt s[","] condition=exp s[","] iter=stmt kDo body=stmt kOd {
                Seq(pre, While(condition, Seq(body, iter)))
             }
        ),
    elementaryStmt = memo $ eta syntax(
              kSkip                                   {Skip}                      |
              name=lident s[":="] expr=exp            {Assn(name, expr)}          |
              kRead name=inbr[s("("), lident, s(")")] {Read(name)}                | 
              kWrite expr=inbr[s("("), exp, s(")")]   {Write(expr)}               |
              kWhile condition=exp kDo body=stmt kOd  {While(condition, body)}    |
              kDo body=stmt kWhile condition=exp kOd  {DoWhile(body, condition)}  |
              forStmt                                                             |
              ifStmt
        ), 
    stmt = memo $ eta (listBy(elementaryStmt, s(";")) @ 
        fun (stmts) {
            case reverse(stmts) of 
                head:tail -> foldl(fun(a, b) {Seq(b, a)}, head, tail)
            esac
         });
   

-- Public top-level parser
public parse = stmt;
