-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var ops = {
  [Nona, {[s ("!!"), fun (l, op, r) {Binop (op, l, r)}],
          [s ("&&"), fun (l, op, r) {Binop (op, l, r)}]}],
  [Nona, {[s ("=="), fun (l, op, r) {Binop (op, l, r)}],
          [s ("<="), fun (l, op, r) {Binop (op, l, r)}],
          [s (">="), fun (l, op, r) {Binop (op, l, r)}],
          [s ("!="), fun (l, op, r) {Binop (op, l, r)}],
          [s ("<"), fun (l, op, r) {Binop (op, l, r)}],
          [s (">"), fun (l, op, r) {Binop (op, l, r)}],
          [s ("=="), fun (l, op, r) {Binop (op, l, r)}]}],
  [Left, {[s ("+"), fun (l, op, r) {Binop (op, l, r)}],
          [s ("-"), fun (l, op, r) {Binop (op, l, r)}]}],
  [Left, {[s ("*"), fun (l, op, r) {Binop (op, l, r)}],
          [s ("/"), fun (l, op, r) {Binop (op, l, r)}],
          [s ("%"), fun (l, op, r) {Binop (op, l, r)}]}]
  };
  
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ eta expr(ops, primary);

var one_stmt = memo $ eta syntax (rd=kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
                              -kSkip {Skip}                                     |
                              wr=kWrite x=primary {Write(x)}                    |
                              x=lident s[":="] ex=exp {Assn(x, ex)});

var stmt = memo $ eta syntax (one_stmt |
                              l=one_stmt s[";"] r=stmt {Seq(l, r)});
   

-- Public top-level parser
public parse = stmt;
             
