-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun parens (p) {
  syntax (inbr[s("("), p, s(")")])
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                  {fun (a) {
                                                                        assertValue (a, Const (stringInt (x)), loc)
                                                                     }}                                                             |
                                  -- identifier
                                  x=lident                           {fun (a) {
                                                                        case a of
                                                                          Ref  -> Ref (x)
                                                                        | Void -> Ignore (Var (x))
                                                                        | _    -> Var (x)
                                                                        esac
                                                                     }}                                                             |
                                  -- in parenthesis
                                  parens[exp]                                                                                       |
                                  -- skip
                                  loc=pos kSkip                      {fun (a) { assertVoid (a, Skip, loc) }}                        |
                                  -- read
                                  loc=pos kRead v=parens[lident]     {fun (a) { assertVoid (a, Read (v), loc) }}                    |
                                  -- write
                                  loc=pos kWrite e=parens[exp]       {fun (a) { assertVoid (a, Write (e (Val)), loc) }}             |
                                  -- if
                                  loc=pos kIf c=exp kThen i=exp kFi  {fun (a) { assertVoid (a, If (c (Val), i (a), Skip), loc) }}   |
                                  -- if else
                                  loc=pos kIf is=ifStmt              {fun (a) { is (a) }}                                           |
                                  -- while
                                  loc=pos kWhile c=exp kDo b=exp kOd {fun (a) { assertVoid (a, While (c (Val), b (Void)), loc) }}   |
                                  -- do while
                                  loc=pos kDo b=exp kWhile c=exp kOd {fun (a) { assertVoid (a, DoWhile (b (Void), c (Val)), loc) }} |
                                  -- for
                                  loc=pos kFor i=exp s[","] c=exp s[","] n=exp kDo b=exp kOd
                                                                     {fun (a) {
                                                                        assertVoid (a,
                                                                                    Seq (i (Void),
                                                                                         While (c (Val),
                                                                                                Seq (b (Void), n (Void)))),
                                                                                    loc)
                                                                     }}),

    ifStmt   = memo $ eta syntax (c=exp kThen i=exp e=elseStmt {fun(a) { If (c (Val), i (a), e (a)) }}),
    elseStmt = memo $ eta syntax (kElse e=exp kFi              {fun(a) { e (a) }} |
                                  kElif is=ifStmt              {fun(a) { is (a) }} |
                                  kFi                          {fun(a) { Skip }}),

    basic    = memo $ eta (expr ({[Right, {[s (":="), fun (l, loc, r) {
                                                        fun (a) { assertValue (a, Assn (l (Ref), r (Val)), loc) }
                                                      }]}],
                                  [Left, map (binop, {"!!"})],
                                  [Left, map (binop, {"&&"})],
                                  [Nona, map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left, map (binop, {"+", "-"})],
                                  [Left, map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),

    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
