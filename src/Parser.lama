-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                  -- identifier
                                  x=lident                                          {fun (a) {
                                                                                       case a of
                                                                                         Ref  -> Ref (x)
                                                                                       | Void -> Ignore (Var (x))
                                                                                       | _    -> Var (x)
                                                                                       esac
                                                                                    }} |
                                  $(failure ("the rest of primary parsing in not implemented\n"))),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});


fun binopRun (l, op, r) {
  Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")")));
var exp = memo $ eta expr(
  {
    [Left, {[s ("!!"), binopRun]}],
    [Left, {[s ("&&"), binopRun]}],
    [Nona, {
      [s ("<"), binopRun],
      [s ("<="), binopRun],
      [s (">"), binopRun],
      [s (">="), binopRun],
      [s ("=="), binopRun],
      [s ("!="), binopRun]
    }],
    [Left, {[s ("+"), binopRun], [s ("-"), binopRun]}],
    [Left, {
      [s ("*"), binopRun],
      [s ("/"), binopRun],
      [s ("%"), binopRun]
    }]
  },
  primary
);

fun addBrackets(p) {
  inbr (s ("("), p, s (")"))
}

var variantIfTailStmt = memo $ eta syntax (
  kElse st = stmt kFi {st}
| kFi {Skip}
| kElif ex = exp kThen thenSt = stmt varTailStmt = variantIfTailStmt { If(ex, thenSt, varTailStmt)}
);

var baseStmt = memo $ eta syntax
  (
    kSkip { Skip }
  | kRead x = addBrackets [lident] { Read(x) }
  | kWrite x = addBrackets [exp] { Write(x) }
  | to = lident s[":="] x = exp { Assn (to, x) }
  | kWhile whileExpr = exp kDo whileStmt = stmt kOd { While(whileExpr, whileStmt) }
  | kDo doWhileStmt = stmt kWhile doWhileExpr = exp kOd { DoWhile(doWhileStmt, doWhileExpr) }
  | kIf ifExpr = exp kThen ifStmt = stmt varTailStmt = variantIfTailStmt { If(ifExpr, ifStmt, varTailStmt) }
  | kFor initStmt = stmt s[","] forExpr = exp s[","] incrStmt = stmt kDo forStmt = stmt kOd { Seq(initStmt, While(forExpr, Seq(forStmt, incrStmt))) }
  ),
  stmt = memo $ eta syntax (
    l = baseStmt s[";"]
    r = stmt { Seq(l, r) } | baseStmt
  );

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
