-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
    exp = memo $ eta expr ({
        [Right, {
            [s(":="), fun(l, op, r) {Assn (l, r)}]}]
      , [Left, {
            [s("!!"), fun (l, op, r) {Binop (op, l ,r)}]}]
      , [Left, {
            [s("&&"), fun (l, op, r) {Binop (op, l ,r)}]}]
      , [Nona, { 
            [s("<"),  fun (l, op, r) {Binop (op, l ,r)}]
          , [s("<="), fun (l, op, r) {Binop (op, l ,r)}]
          , [s("=="), fun (l, op, r) {Binop (op, l ,r)}]
          , [s("!="), fun (l, op, r) {Binop (op, l ,r)}]
          , [s(">="), fun (l, op, r) {Binop (op, l ,r)}]
          , [s(">"),  fun (l, op, r) {Binop (op, l ,r)}]}]
      , [Left, { 
            [s("+"), fun (l, op, r) {Binop (op, l ,r)}]
          , [s("-"), fun (l, op, r) {Binop (op, l ,r)}]}]
      , [Left, { 
            [s("*"), fun (l, op, r) {Binop (op, l ,r)}]
          , [s("/"), fun (l, op, r) {Binop (op, l ,r)}]
          , [s("%"), fun (l, op, r) {Binop (op, l ,r)}]}]
      }, primary);

var elseBranches = memo $ eta syntax (
  kElse els=stmt {els}
  | kElif cond=exp kThen th=stmt els=elseBranches {If (cond, th, els)}
  | kElif cond=exp kThen th=stmt {If (cond, th, Skip)}
);

var singularStmt = memo $ eta syntax (
  kRead name=inbr[s("("), lident, s(")")] {Read(name)} 
  | kWrite e=inbr[s("("), exp, s(")")] {Write(e)} 
  | kSkip {Skip} 
  | name=lident s[":="] e=exp {Assn(name, e)} 
  | kWhile cond=exp kDo body=stmt kOd {While(cond, body)} 
  | kDo body=stmt kWhile cond=exp kOd {DoWhile(body, cond)} 
  | kIf cond=exp kThen th=stmt els=elseBranches kFi {If (cond, th, els)}
  | kIf cond=exp kThen th=stmt kFi {If (cond, th, Skip)}
  | kFor init=stmt s[","] cond=exp s[","] step=stmt kDo body=stmt kOd{Seq (init, While (cond, Seq (body, step)))}
);

var stmt = memo $ eta syntax (singularStmt | x=singularStmt s[";"] xs=stmt {Seq(x, xs)});
   

-- Public top-level parser
public parse = stmt;
