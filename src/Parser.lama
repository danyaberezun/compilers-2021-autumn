-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertBoxed (atr, vl, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (vl)
  | Unboxed -> Unbox (vl)
  | Boxed -> vl
  | Weak -> vl
  esac
}

fun assertUnboxed (atr, vl, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (vl)
  | Unboxed -> vl
  | Boxed -> Box (vl)
  | Weak -> Box (vl)
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, vl, loc) {
  case atr of
    Void -> vl
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (vl, Box (Const (0)))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertUnboxed (a, Binop (op, l (Unboxed), r (Unboxed)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandVarDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  fun expandValDefs (defs, expr) {
    foldr (fun ([defs, expr], [ident, value]) {
             [ident : defs, Seq (Ignore (Assn (ident, value)), expr)]
           },
           [{}, expr],
           defs)
  }

  case
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Val (ds) ->
                 case expandValDefs (ds, expr) of
                   [ds, expr] -> [Val (ds) : defs, expr]
                 esac
             | Var (ds) ->
                 case expandVarDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

var primary    = memo $ eta syntax (
                                      -- array constant
                                      loc=pos x=inbr[s("["), list0(syntax (e=exp {e(Boxed)})), s("]")] {fun (a) {assertBoxed (a, Array (x), loc)}}    |

                                      -- string constant
                                      loc=pos x=strlit                                               {fun (a) {assertBoxed (a, String (x), loc)}}   |

                                      -- character literal
                                      loc=pos x=chrlit                                               {fun (a) {assertUnboxed (a, Const (x), loc)}}    |

                                      -- decimal constant
                                      loc=pos x=decimal                                              {fun (a) {assertUnboxed (a, Const (stringInt (x)), loc)}}     |

                                      -- identifier
                                      x=lident args=inbr[s("("), list0(syntax(e=exp {e(Boxed)})), s(")")]? {fun (a) {
                                                                                                            case args of
                                                                                                              None -> case a of
                                                                                                                        Ref  -> Ref (x)
                                                                                                                      | Void -> Ignore (Var (x))
                                                                                                                      | Boxed    -> Var (x)
                                                                                                                      | Weak    -> Var (x)
                                                                                                                      | Unboxed    -> Unbox (Var (x))
                                                                                                                      esac
                                                                                                            | Some (args) -> assertBoxed (a, Call (x, args))
                                                                                                            esac
                                                                                                         }} |

                                      -- S-expression
                                      loc=pos x=uident args=inbr[s("("), list0(syntax(e=exp {e(Boxed)})), s(")")]? {fun (a) {assertBoxed (a, Sexp (x, case args of
                                                                                                                                                      None        -> {}
                                                                                                                                                    | Some (args) -> args
                                                                                                                                                    esac), loc)}}
                                 | inbr[s("("), exp, s(")")]
                                 | kIf res=someIf { res }
                                 | loc=pos kWhile e=exp kDo s=scopeExpr kOd { fun(a) { assertVoid(a, While (e(Unboxed), s(Void)), loc) } }
                                 | loc=pos kDo ds=definition* s=exp kWhile e=exp kOd { fun(a) { assertVoid(a, distributeScope(expandScope(ds, Skip), fun (ini) { DoWhile (Seq (ini, s(Void)), e(Unboxed)) }, loc)) } }
                                 | loc=pos kSkip { fun(a) { assertVoid(a, Skip, loc) } }
                                 | loc=pos kFor ds=definition* bef=exp? s[","] cond=exp s[","] aft=exp? kDo body=scopeExpr kOd { fun(a) {
                                        bef := case bef of None -> fun (a) { assertVoid(a, Skip) } | Some (b) -> b esac;
                                        aft := case aft of None -> fun (a) { assertVoid(a, Skip) } | Some (b) -> b esac;
                                        assertVoid(a, expandScope(ds, Seq (bef(Void), While (cond(Unboxed), Seq (body(Void), aft(Void)))), loc))
                                      } }
                          ),
      basic      = memo $ eta (expr ({[Right, {[s (":="),
                                                fun (l, loc, r) {
                                                  fun (a) {assertBoxed (a, Assn (l (Ref), r (Boxed)), loc)}
                                              }]}],
                                      [Left , map (binop, {"!!"})],
                                      [Left , map (binop, {"&&"})],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     postfix)),
      postfix    = memo $ eta syntax (loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] {Index (i (Unboxed))})* {fun (a) {foldl (fun (e, p) {
                                                                                case p of
                                                                                   Index (i) ->
                                                                                     fun (a) {
                                                                                       case a of
                                                                                         Ref -> ElemRef (e (Boxed), i)
                                                                                       | _   -> assertBoxed (a, Elem (e (Boxed), i), loc)
                                                                                       esac
                                                                                     }
                                                                                 esac
                                                                               }, e, ps) (a)
                                                              }}
                                     ),
      postBasic  = memo $ eta syntax (basic | inbr2[scopeExpr]),
      scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {fun (a) {fun (e) {
                                                                        case ds of
                                                                          {} -> e
                                                                        | _  -> expandScope (ds, e)
                                                                        esac
                                                                      } (case e of
                                                                           Some (e) -> e (a)
                                                                         | _        -> Skip
                                                                         esac)
                                                                      }}),
      definition = memo $ eta syntax (kVar ds=list[syntax (lident (s["="] e=basic {e (Boxed)})?)] s[";"] {Var (ds)} |
                                      kVal ds=list[syntax (lident (s["="] e=basic {e (Boxed)}))]  s[";"] {Val (ds)} |
                                      kFun name=lident
                                           args=inbr[s("("), list0 (lident), s(")")]
                                           body=inbr[s("{"), scopeExpr, s("}")] {
                                           Fun (name, args, body (Weak))
                                      }
                                     ),
      exp        = memo $ eta syntax (postBasic | s1=postBasic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}}),

      mkElse = fun (f) { fun(cond, tr) { fun (a) {
          If (cond(Unboxed), tr (a), f (a))
        } } },
      elsePart = memo $ eta syntax ( kElse f=scopeExpr kFi { mkElse(f) }
                                   | kElif f=someIf  { mkElse(f) }
                                   | loc=pos kFi { fun(cond, tr) { fun(a) { assertVoid (a, If (cond(Unboxed), tr (Void), Skip), loc) } } }
                                   ),
      someIf   = memo $ eta syntax (e=exp kThen t=scopeExpr f=elsePart { f(e, t) })
      ;

fun exact (a) {
  syntax (a)
}

fun inbr2 (p) {
  syntax (inbr[s("("), p, s(")")])
}

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
