-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr (
              {[Left, {[s("!!"), fun (l, _, r) {Binop ("!!", l, r)}]}],
               [Left, {[s("&&"), fun (l, _, r) {Binop ("&&", l, r)}]}],
               [Nona, {[s("=="), fun (l, _, r) {Binop ("==", l, r)}],
                       [s("!="), fun (l, _, r) {Binop ("!=", l, r)}],
                       [s("<="), fun (l, _, r) {Binop ("<=", l, r)}],
                       [s("<"), fun (l, _, r) {Binop ("<", l, r)}],
                       [s(">="), fun (l, _, r) {Binop (">=", l, r)}],
                       [s(">"), fun (l, _, r) {Binop (">", l, r)}]}],
               [Left, {[s("+"), fun (l, _, r) {Binop ("+", l, r)}],
                       [s("-"), fun (l, _, r) {Binop ("-", l, r)}]}],
               [Left, {[s("*"), fun (l, _, r) {Binop ("*", l, r)}],
                       [s("/"), fun (l, _, r) {Binop ("/", l, r)}],
                       [s("%"), fun (l, _, r) {Binop ("%", l, r)}]}]},
              primary);

var stmt = memo $ eta syntax (s1=one_stmt s[";"] s2=stmt {Seq (s1, s2)} |
                              one_stmt),
      one_stmt = memo $ eta syntax (kSkip {Skip}                                                                                 |
                                    kWrite e=primary {Write (e)}                                                                 |
                                    kRead x=inbr[s("("), lident, s(")")] {Read (x)}                                              |
                                    kIf e=exp kThen s1=stmt s2=if_end {If (e, s1, s2)}                                           |
                                    kWhile e=exp kDo s=stmt kOd {While (e, s)}                                                   |
                                    kDo s=stmt kWhile e=exp kOd {DoWhile (s, e)}                                                 |
                                    kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd {Seq (s1, While (e, Seq (s3, s2)))} |
                                    x=lident s[":="] e=exp {Assn (x, e)}),
      if_end = memo $ eta syntax (kFi {Skip}           |
                                  kElse s=stmt kFi {s} |
                                  kElif e=exp kThen s1=stmt s2=if_end {If (e, s1, s2)});

-- Public top-level parser
public parse = stmt;
