-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var variantIfTailStmt = memo $ eta syntax (
  kElif ex = exp kThen thenSt = exp kElse elseSt = exp kFi {
    fun (a) { If (ex(Val), thenSt(a), elseSt(a)) }
  }
| kFi {
    fun (a) { assertVoid(a, Skip, loc) }
  }
| kElif ex = exp kThen thenSt = exp varTailStmt = variantIfTailStmt {
    fun (a) { If(ex(Val), thenSt(a), varTailStmt(a)) }
  }
);

var primary = memo $ eta syntax (
  -- decimal constant
  loc=pos x=decimal {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}    |

  -- identifier
  x=lident {fun (a) {
              case a of
                Ref  -> Ref (x)
              | Void -> Ignore (Var (x))
              | _    -> Var (x)
              esac
           }}                                                                  |

  -- brackets
  x=inbr[s ("("), exp, s (")")] {x}                                            |

  -- skip
  loc = pos kSkip { fun(a) { assertVoid(a, Skip, loc) } }                      |

  -- read
  loc = pos kRead s["("] x = lident s[")"] {
    fun(a) { assertVoid(a, Read(x), loc) }
  }                                                                            |

  -- write
  loc = pos kWrite s["("] e = exp s[")"] {
    fun(a) { assertVoid(a, Write(e (Val)), loc) }
  }                                                                            |

  -- while
  loc = pos kWhile whileExpr = exp kDo whileStmt = exp kOd {
    fun (a) {
      assertVoid (a, While (whileExpr (Val), whileStmt (Void)), loc)
    }
  }                                                                            |

  -- do
  loc = pos kDo doWhileStmt = exp kWhile doWhileExpr = exp kOd {
    fun (a) {
      assertVoid (a, DoWhile (doWhileStmt (Void), doWhileExpr (Val)), loc)
    }
  }                                                                            |

  -- if
  kIf ex = exp kThen thenStmt = exp kElse elseStmt = exp kFi {
    fun (a) { If(ex(Val), thenStmt(a), elseStmt(a)) }
  }                                                                            |

  -- if with elif or fi
  kIf ex = exp kThen thenStmt = exp varTailStmt = variantIfTailStmt {
    fun (a) { If(ex(Val), thenStmt(a), varTailStmt(a)) }
  }                                                                            |

  -- for
  kFor initStmt = exp s[","] forExpr = exp s[","] incrStmt = exp kDo forStmt = exp kOd {
    fun (a) {
      Seq(
        initStmt (Void),
        While(forExpr (Val), Seq(forStmt (Void), incrStmt (Void)))
      )
    }
  }
);

var basic = memo $ eta (
  expr (
    {
      [
        Right,
        {
          [
            s (":="),
            fun (l, loc, r) {
              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
            }
          ]
        }
      ],
      [Left , map (binop, {"!!"})],
      [Left , map (binop, {"&&"})],
      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
      [Left , map (binop, {"+", "-"})],
      [Left , map (binop, {"*", "/", "%"})]
    },
    primary
  )
);

var exp = memo $ eta syntax (
  basic                                                                        |
  s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}}
);

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});