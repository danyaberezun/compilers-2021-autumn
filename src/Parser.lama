-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                  -- identifier
                                  x=lident                                          {fun (a) {
                                                                                       case a of
                                                                                         Ref  -> Ref (x)
                                                                                       | Void -> Ignore (Var (x))
                                                                                       | Val  -> Var (x)
                                                                                       esac
                                                                                    }} |
                                  x=inbr[s("("), exp, s(")")]                       {fun (a) {x(a)}}
                                  ),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 operand)),
    operand   = memo $ eta syntax (primary | ctrl),
    base     = memo $ eta syntax (basic | 
                                  loc=pos kRead x=inbr[s("("), exp, s(")")]         {fun (a) {assertVoid(a, Read (x (Ref)), loc)}} |
                                  loc=pos kWrite x=inbr[s("("), exp, s(")")]        {fun (a) {assertVoid(a, Write (x (Val)), loc)}} |
                                  loc=pos kSkip                                     {fun (a) {assertVoid(a, Skip, loc)}}  
                                  ),
    ctrl     = memo $ eta syntax (
                                  kIf e=exp kThen s1=exp kElse s2=exp kFi           {fun(a) {If(e(Val), s1(a), s2(a)) }} |
                                  kIf e=exp kThen loc=pos s1=exp kFi                {fun(a) {assertVoid(a, If(e(Val), s1(a), Skip), loc)}} |
                                  kIf e=exp kThen s1=exp s2=stmtElif kFi            {fun(a) {If(e(Val), s1(a), s2(a))}} |

                                  loc=pos kDo s=exp kWhile e=exp kOd                {fun(a) {assertVoid(a, DoWhile(e(Val), s(a)), loc)}} |
                                  loc=pos kWhile e=exp kDo s=exp kOd                {fun(a) {assertVoid(a, While(e(Val), s(a)), loc) } } |

                                  loc=pos kFor s1=exp s[","] e=exp s[","] s2=exp kDo s3=exp kOd 
                                                                                    {fun(a) {assertVoid(a, Seq(s1(Void), While(e(Val), Seq(s3(Void), s2(Void)))), loc)}}
                                  ),
    stmtElif = memo $ eta syntax (
                                  loc=pos kElif e=exp kThen loc=pos s1=exp           {fun(a) {assertVoid(a, If(e(Val), s1(a), Skip), loc)}} |
                                  kElif e=exp kThen s1=exp kElse s2=exp              {fun(a) {If(e(Val), s1(a), s2(a))}} |
                                  kElif e=exp kThen s1=exp s2=stmtElif               {fun(a) {If(e(Val), s1(a), s2(a))}} 
                                  ),
    semicolon= memo $ eta syntax (base | ctrl),
    exp      = memo $ eta syntax (semicolon | s1=semicolon s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});


    -- basic = memo $ eta syntax (binopStmt |
                                  -- loc=pos kRead x=inbr[s("("), lident, s(")")]      {fun (a) { assertVoid(a, Read (x (Ref)), loc)}} |
                                  -- loc=pos kWrite x=inbr[s("("), lident, s(")")]     {fun (a) { assertVoid(a, Read (x (Ref)), loc)}} |
                                  -- loc=pos kSkip                                     {fun (a) { assertVoid(a, Skip, loc)}}  |
                                  -- loc=pos x=lident s[":="] e=binopStmt                    {fun(a) {assertVoid(a, Assn (x, e), loc)}} 