-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binOp(symb) {
  [s(symb), fun (l, op, r) {Binop(symb, l, r)}]
}



-- Primary expression
var primary = memo $ eta syntax ( x=decimal{Const (stringInt (x))} 
                                | x=lident {Var (x)}               
                                | inbr[s("("), exp, s(")")]
    ),
    exp     = memo $ eta (expr({
								[Left, {binOp("!!")}],
								[Left, {binOp("&&")}],
								[Nona, {binOp("<"),
								        binOp(">"),
										binOp("<="),
										binOp(">="),
										binOp("=="),
										binOp("!=")}],
								[Left, {binOp("+"),
								        binOp("-"),
										binOp("^")}],
								[Left, {binOp("*"), 
										binOp("/"),
										binOp("%")}]

							}, primary)
    );

var stmt     = memo $ eta syntax ( singleStmt     
                                 | l=singleStmt s[";"] r=stmt {Seq (l, r)}
    ),
    singleStmt = memo $ eta syntax ( kRead x=inbr[s("("), lident, s(")")] {Read (x)} 
                                 | kWrite e=inbr[s("("), exp, s(")")]   {Write (e)} 
                                 | kSkip                                {Skip} 
                                 | x=lident s[":="] e=exp               {Assn(x, e)}
    );
-- Public top-level parser
public parse = stmt;
             
