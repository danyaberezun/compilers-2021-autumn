-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

var binopList = {
  [Left, {"!!"}],
  [Left, {"&&"}],
  [Nona, {"<=", ">=", "<", ">", "!=", "=="}],
  [Left, {"+", "-"}],
  [Left, {"*", "/", "%"}]
};

fun precedenceLevel([assoc, opList]) {
  [assoc, map (fun (op) {[s (op), fun (l, op, r) {Binop (op, l, r)}]}, opList)]
}

var binopDescriptors = map (precedenceLevel, binopList);

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ expr (binopDescriptors, primary);

var pIf = memo $ eta syntax (kIf e=exp kThen s1=parse s2=pIf {If (e, s1, s2)});

var pElif = memo $ eta syntax (inbr[kElse, parse, kFi]                    |
                               kFi                                {Skip} |
                               kElif e=exp kThen s1=parse s2=pElif {If (e, s1, s2)});

var stmt = memo $ eta syntax (kSkip                                 {Skip}                              |
                              x=lident s[":="] e=exp                {Assn (x, e)}                       |
                              kRead x=inbr[s("("), lident, s(")")]  {Read (x)}                          |
                              kWrite e=inbr[s("("), exp, s(")")]    {Write (e)}                         |
                              kIf e=exp kThen s1=parse s2=pElif      {If (e, s1, s2)}                    |
                              kWhile e=exp kDo s=parse kOd           {While (e, s)}                      |
                              kDo s=parse kWhile e=exp kOd           {DoWhile (s, e)}                    |
                              kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=parse kOd {Seq (s1, While (e, Seq (s3, s2)))}
                             );


-- Public top-level parser
public parse = memo $ expr({[Left, {[s(";"), fun (l, op, r) {Seq (l, r)}]}]}, stmt);
