-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Auxiliary function to calculate binary expression
fun binOp (op) {
  [s (op), fun (l, _, r) {Binop (op, l, r)}]
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
      exp = memo $ eta expr ({[Left, map (binOp, {"!!", "&&"})],
                              [Nona, map (binOp, {"<", ">", "<=", ">=", "==", "!="})],
                              [Left, map (binOp, {"+", "-"})],
                              [Left, map (binOp, {"*", "/", "%"})]
                            }, primary);
var simpleStmt = memo $ eta syntax (kSkip {Skip}
                                  | kRead x=inbr[s("("), lident, s(")")] {Read (x)}
                                  | kWrite e=inbr[s("("), exp, s(")")]   {Write (e)}
                                  | x=lident s[":="] e=exp {Assn (x, e)});

var stmt = memo $ eta syntax (s1=simpleStmt s[";"] s2=stmt {Seq (s1, s2)} | simpleStmt);

-- Public top-level parser
public parse = stmt;
