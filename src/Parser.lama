-- Parser
import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax(-l p -r)
}

fun binaryOperation(op) {
  [s(op), fun(l, _, r) { Binop(op, l ,r) }]
}

-- Primary expression
var primary = memo $ eta syntax(
  x = decimal { Const(stringInt(x)) }
  | x = lident  { Var(x) }
  | inbr [s("("), exp, s(")")]
);

var exp = memo $ eta(
  expr(
    {
      [Left, { binaryOperation("!!") }],
      [Left, { binaryOperation("&&") }],
      [Nona, map(binaryOperation, { "==", "!=", ">", "<", ">=", "<=" })],
      [Left, map(binaryOperation, { "+", "-" })],
      [Left, map(binaryOperation, { "*", "/", "%" })]
    },
    primary
  )
);

var separateStatement = memo $ eta syntax(
  kSkip { Skip }
  | kRead variable = inbr [s("("), lident, s(")")] { Read(variable) }
  | kWrite value = inbr [s("("), exp, s(")")] { Write(value) }
  | variable = lident s [":="] value = exp { Assn(variable, value) }
);

var stmt = memo $ eta syntax(
  separateStatement
  | left = separateStatement s [";"] right = stmt { Seq(left, right) }
);

-- Public top-level parser
public parse = stmt;
