-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun parens (p) {
  syntax (inbr[s("("), p, s(")")])
}

fun binops (ops) {
  map (fun (op) { [s (op), fun (l, _, r) { Binop (op, l, r) }] }, ops)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)}               |
                          parens (exp)),
    exp = memo $ eta expr ({[Left, binops ({ "!!" })],
                            [Left, binops({ "&&" })],
                            [Nona, binops({ "==", "!=", ">", ">=", "<", "<=" })],
                            [Left, binops({ "+", "-" })],
                            [Left, binops({ "*", "/", "%" })]
                           }, primary);

var stmtSeq = memo $ eta syntax (kSkip                        {Skip}           |
                                 v=lident s[":="] ex=exp      {Assn (v, ex)}   |
                                 kRead v=parens[lident]       {Read (v)}       |
                                 kWrite x=parens[exp]         {Write (x)}      |
                                 kIf i=ifPart                 {i}              |
                                 kWhile c=exp kDo b=parse kOd {While (c, b)}   |
                                 kDo b=parse kWhile c=exp kOd {DoWhile (b, c)} |
                                 kFor f=forStmt               {f}),

    forStmt = memo $ eta syntax (i=stmt s[","] c=exp s[","] n=parse kDo b=parse kOd {Seq (i, While (c, Seq (b, n)))}),

    ifPart = memo $ eta syntax (c=exp kThen t=parse f=elsePart {If (c, t, f)}),

    elsePart = memo $ eta syntax (kElse f=parse kFi {f} |
                                  kElif f=ifPart    {f} |
                                  kFi               {Skip}),

    stmt = memo $ eta syntax (stmtSeq |
                              fst=stmtSeq s[";"] snd=stmt {Seq (fst, snd)});

-- Public top-level parser
public parse = stmt;
