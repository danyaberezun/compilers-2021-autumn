-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun op(op) {
  [s(op), fun (l, op, r) {Binop (op, l, r)}]
}

var ops = {
  [Left, {op ("!!")}],
  [Left, {op ("&&")}],
  [Nona, map (op, {"==", "!=", "<", "<=", ">", ">="})],
  [Left, map (op, {"+", "-"})],
  [Left, map (op, {"*", "/", "%"})]
};

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ eta (expr (ops, primary));

var elseIf = memo $ eta syntax (kElse body=parse kFi {body} |
                                kElif b=basicIf      {b}    |
                                kFi                  {Skip}),
    basicIf = memo $ eta syntax (c=exp kThen t=parse e=elseIf {If (c, t, e)}),
    basicStmt = memo $ eta syntax (x=lident s[":="] v=exp               {Assn (x, v)}    |
                                   kSkip                                {Skip}           |
                                   kRead x=inbr[s("("), lident, s(")")] {Read (x)}       |
                                   kWrite e=inbr[s("("), exp, s(")")]   {Write (e)}      |
                                   kIf res=basicIf                      {res}            |
                                   kWhile c=exp kDo b=parse kOd         {While (c, b)}   |
                                   kDo b=parse kWhile c=exp kOd         {DoWhile (b, c)} |
                                   kFor i=parse s[","] c=exp s[","] n=parse kDo b=parse kOd {Seq (i, While (c, Seq (b, n)))}),
    stmt = memo $ eta syntax (basicStmt |
                              l=basicStmt s[";"] r=stmt {Seq (l, r)});

-- Public top-level parser
public parse = stmt;
