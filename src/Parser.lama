-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (l, op, r) { Binop (op, l, r) }

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr (
          {
            [Left, {[s ("!!"), binop ]}],
            [Left, {[s ("&&"), binop ]}],

            [Nona, {[s ("=="), binop],
                    [s ("!="), binop],
                    [s (">"),  binop],
                    [s ("<"),  binop],
                    [s (">="), binop],
                    [s ("<="), binop]}],

            [Left, {[s ("+"), binop],
                    [s ("-"), binop]}],

            [Left, {[s ("*"), binop],
                    [s ("/"), binop],
                    [s ("%"), binop]}]
          }
          , primary
        );
      -- exp = primary;

var simpleStmt = memo $ eta syntax (
    kRead x=inbr[s("("), lident, s(")")] { Read (x) } |
    kSkip { Skip } |
    x=lident s[":="] e=exp { Assn (x, e) } |
    kWrite e=inbr[s("("), exp, s(")")] { Write (e) }
  );

var stmtBlock = memo $ eta syntax ( simpleStmt | s1=simpleStmt s[";"] s2=stmtBlock { Seq(s1,s2) } ); 
var stmtCtrlInner = memo $ eta syntax (
      kWhile e=exp kDo s1=stmt kOd { While(e,s1) } 
    );

      -- kIf e=exp kThen s1=stmtBlock kElse s2=stmtBlock kFi { If(e,s1,s2) } 
-- var stmtCtrl = memo $ eta syntax ( stmtCtrlInner |  );
var a = memo $ eta syntax ( simpleStmt | stmtCtrlInner );
var stmt = memo $ eta syntax (a |
        s1=a s[";"] s2=stmt { Seq(s1, s2) } 
        );

-- var stmt = memo $ eta syntax (stmtCtrlInner | s1=stmtCtrlInner s[";"] s2=simpleStmt { Seq(s1, s2) } );
        -- kIf e=exp kThen s1=stmtCtrlInner kElse s2=stmtCtrlInner  kFi { If(e,s1,s2) } |


        -- | kIf e=exp kThen s1=stmtBlock kElse s2=stmtBlock kFi { If(e,s1,s2) } 
-- | kIf e=exp kThen s1=stmt kElse s2=stmt kFi { If(e,s1,s2) } | kWhile e=exp kDo s1=stmt kOd { While(e,s1) });

-- var stmt2 = memo $ eta syntax ( stmt  );
   

-- Public top-level parser
public parse = stmt;
             
