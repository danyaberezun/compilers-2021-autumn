-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}


fun binops() {
  var ops = {
    [Left, {"!!"}],
    [Left, {"&&"}],
    [Nona, {"==", "!=", "<=", "<", ">=", ">"}],
    [Left, {"+", "-"}],
    [Left, {"*", "/", "%"}]
  };
  
  fun prefBinop (x, op, y) {
    Binop (op, x, y)
  }

  fun binop (assoc, ops) {
    [assoc,
     map (fun (op) { [s (op), prefBinop] }, ops)
    ]
  }
  
  map (fun ([assoc, lops]) { binop (assoc, lops) }, ops)
}

-- Primary expression
var primary = memo $ eta syntax 
            (  
              x=decimal { Const (stringInt (x)) } |
              x=lident  { Var (x) }               |
              inbr[s ("("), exp, s (")")]
            ),
        exp = memo $ eta (expr (binops (), primary));

var stmt    = memo $ eta syntax 
            (
              x=lident s [":="] e=exp      { Assn (x, e) }          |
              x=stmt   s [";"]  y=stmt end { Seq  (x, y) }          |
              kSkip { Skip }                                        |
              kRead  x=inbr[s ("("), lident, s (")")] { Read  (x) } |
              kWrite x=inbr[s ("("), exp   , s (")")] { Write (x) }
            );

-- Public top-level parser
public parse = stmt;
             
