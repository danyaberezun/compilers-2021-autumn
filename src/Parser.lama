-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop(lhs, op, rhs) {
  Binop(op, lhs, rhs)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal { Const (stringInt (x)) } |
                                 x=lident  { Var (x) }               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr ({
              [Left, { [s ("&&"), binop], [s ("!!"), binop] }],
              [Nona, { [s ("=="), binop], [s ("!="), binop], [s ("<"),  binop], [s (">"), binop], [s ("<="),  binop], [s (">="), binop] }],
              [Left, { [s ("+"), binop],  [s ("-"), binop] }],
              [Left, { [s ("*"), binop], [s ("/"), binop],  [s ("%"), binop] }]
          },
          primary
        );

var baseStmt = memo $ eta syntax (
      kRead  x=inbr[s("("), lident, s(")")] { Read (x) }
    | kWrite x=inbr[s("("), exp, s(")")] { Write (x) }
    | kSkip  { Skip }
    | x=lident s[":="] res=exp { Assn (x, res) }
);

var stmt = memo $ eta syntax (
  baseStmt |
  h = baseStmt s[";"] t=stmt { Seq(h, t) }
);
   

-- Public top-level parser
public parse = stmt;
             
