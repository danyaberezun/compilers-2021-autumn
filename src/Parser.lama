-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun mkOps() {
  var ops = {
    [Left, {"!!"}],
    [Left, {"&&"}],
    [Nona, {"<", ">", "<=", ">=", "==", "!="}],
    [Left, {"+", "-"}],
    [Left, {"*", "/", "%"}]
  };
  var res = map (fun ([prec, oops]) {
    [prec, map (fun (op) {
      [s(op), fun (l, op, r) { Binop(op, l, r) }]
    }, oops)]
  }, ops);
--   printf("%s\n", res.string);
  res
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr(mkOps(), primary));

var stmt = memo $ eta syntax (kRead x=inbr[s("("), lident, s(")")] { Read(x) } |
                              kWrite x=inbr[s("("), exp, s(")")] { Write(x) }  |
                              kSkip { Skip }                                   |
                              x=lident s[":="] y=exp { Assn(x, y) }
                              );
var stmts = memo $ eta syntax (stmt | x=stmt s[";"] y=stmts {Seq(x, y)});


-- Public top-level parser
public parse = stmts;
             
