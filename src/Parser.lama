-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- <<<<<<< HEAD
-- fun binopExpr(op) {
 --  [s(op), fun (l, op, r) {Binop (op, l, r)}]
-- }

-- Primary expression
-- var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
--                                 x=lident  {Var (x)}               |
--                                 inbr[s ("("), exp, s (")")]),
--      exp = memo $ eta expr ({
--                               [Left, map(binopExpr,{"&&", "!!"})],
--                               [Nona, map(binopExpr,{"==", "!=", "<", "<=", ">", ">="})],
--                               [Left, map(binopExpr,{"+", "-"})],
--                               [Left, map(binopExpr,{"*", "/", "%"})]
--                             },
--                             primary);

--var stmtSeq = memo $ eta syntax (stmt                              |
--                                 x=stmt s[";"] y=stmtSeq {Seq (x, y)}),
--      stmt = memo $ eta syntax(kRead x=inbr[s ("("), lident, s (")")]                                  {Read (x)} |
--                               kWrite x=inbr[s ("("), exp, s (")")]                                   {Write (x)} |
--                               kSkip                                                                       {Skip} |
--                               kIf cond=exp kThen ifBr=stmtSeq elseBr=ifChain           {If (cond, ifBr, elseBr)} |
--                               kWhile cond=exp kDo body=stmtSeq kOd                          {While (cond, body)} |
--                               kDo body=stmtSeq kWhile cond=exp kOd                        {DoWhile (body, cond)} |
--                               kFor init=stmtSeq s[","] cond=exp s[","] post=stmtSeq kDo body=stmtSeq kOd
--                                                                     {Seq (init, While (cond, Seq (body, post)))} |
--                               x=lident s[":="] y=exp                                               {Assn (x, y)}),
--      ifChain = memo $ eta syntax (kFi                                                                {Skip} |
--                                   kElse elseBr=stmtSeq kFi                                         {elseBr} |
--                                   kElif cond=exp kThen ifBr=stmtSeq elseBr=ifChain {If (cond, ifBr, elseBr)});


-- Public top-level parser
-- public parse = stmtSeq;
--=======
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                  -- identifier
                                  x=lident                                          {fun (a) {
                                                                                       case a of
                                                                                         Ref  -> Ref (x)
                                                                                       | Void -> Ignore (Var (x))
                                                                                       | _    -> Var (x)
                                                                                       esac
                                                                                    }} |
                                  $(failure ("the rest of primary parsing in not implemented\n"))),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
