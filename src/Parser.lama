-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun opStr (op) {
  syntax (token[op] {op})
}

var binop = syntax (
  opStr["+"] |
  opStr["-"] |
  opStr["*"]
);

-- Primary expression
(*var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
    exp = memo $ eta (failure ("expression parsing not implemented\n"));*)

var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
  exp = memo $ eta syntax (
    l=primary op=binop r=exp {Binop (op, l, r)} |
    primary
  );

var readPat  = memo $ eta syntax ( kRead x=inbr[s("("), lident, s(")")] {Read (x)} );
var writePat = memo $ eta syntax ( kWrite x=inbr[s("("), exp, s(")")] {Write (x)} );
var assnPat  = memo $ eta syntax ( l=lident s[":="] r=exp {Assn (l, r)} );
var stmtFirst = memo $ eta syntax (assnPat | readPat | writePat);

var stmt = memo $ eta syntax (
    l=stmtFirst s[";"] r=stmt end {Seq (l, r)} | stmtFirst end
);


-- Public top-level parser
public parse = stmt;
