-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

--var atomicStmt = memo $ eta syntax (kRead x=inbr[ s("("), lident, s(")") ] { Read(x) } |
--                                     kWrite x=inbr[ s("("), exp, s(")") ]  { Write(x) } |
--                                     x=lident s[":="] e=exp { Assn (x, e) } |
--                                     kSkip { Skip } ),
--        stmts = memo $ eta syntax (l=atomicStmt s[";"] r=stmts { Seq(l, r) } |
--                                    atomicStmt);

var elseBlock = memo $ eta syntax (kElif cond=exp kThen tb=exp fb=elseBlock {fun (a) { If (cond(Val), tb(a), fb(a))}} |
                                  kElse s=exp { eta (s) } |
                                  loc=pos empty {fun (a) {assertVoid (a, Skip, loc)} } );



--var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
--                                 x=lident  {Var (x)}               |
--                                 inbr[s("("), exp, s(")")]),
--      exp = memo $ eta expr (map(mapper, operations), primary);


var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                  -- identifier
                                  x=lident                                          {fun (a) {
                                                                                       case a of
                                                                                         Ref  -> Ref (x)
                                                                                       | Void -> Ignore (Var (x))
                                                                                       | _    -> Var (x)
                                                                                       esac
                                                                                    }} |
                                  inbr[s("("), exp, s(")")] |
                                  loc=pos kSkip   {fun (a) {assertVoid (a, Skip, loc)} } |
                                  loc=pos kRead x=inbr[s("("), lident, s(")")] {fun (a) {assertVoid (a, Read(x), loc) } } |
                                  loc=pos kWrite x=inbr[s("("), exp, s(")")] {fun (a) {assertVoid (a, Write(x(Val)), loc) }} |
                                  loc=pos kWhile cond=exp kDo st=exp kOd {fun (a) {assertVoid (a, While (cond(Val), st(Void)), loc) }} |
                                  loc=pos kDo st=exp kWhile cond=exp kOd {fun (a) {assertVoid (a, DoWhile (st(Void), cond(Val)), loc)}} |
                                  loc=pos kIf cond=exp kThen tb=exp fb=elseBlock kFi {fun (a) { If (cond(Val), tb(a), fb(a))} } |
                                  loc=pos kFor init=exp s[","] cond=exp s[","] inc=exp
                                                kDo st=exp kOd {fun (a) {assertVoid(a,
                                                                                    Seq (init(Void), While (cond(Val), Seq ( st(Void), inc(Void)) ) ),
                                                                                    loc)
                                                                         }}),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});


-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
