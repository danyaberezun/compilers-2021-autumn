-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop(l, op, r) {
    Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
        exp = memo $ eta expr ({
              [Left, { [s ("&&"), binop], [s ("!!"), binop] }],
              [Nona, { [s ("=="), binop], [s ("!="), binop], [s ("<"),  binop], [s (">"), binop], [s ("<="),  binop], [s (">="), binop] }],
              [Left, { [s ("+"), binop],  [s ("-"), binop] }],
              [Left, { [s ("*"), binop], [s ("/"), binop],  [s ("%"), binop] }]
          },
          primary
        );

var ifSecondPartStmt = memo $ eta syntax (
  kFi {Skip}
  | kElse body2=stmt kFi {body2}
  | kElif expr=exp kThen body=stmt it=ifSecondPartStmt {If (expr, body, it)}
);

var baseStmt = memo $ eta syntax (
    kRead x=inbr[s("("), lident, s(")")] {Read (x)}
    | kWrite x=inbr[s("("), exp, s(")")] {Write (x)}
    | kSkip {Skip}
    | x=lident s[":="] res=exp { Assn (x, res) }
    | kWhile expr=exp kDo body=stmt kOd {While (expr, body)}
    | kDo body=stmt kWhile expr=exp kOd {DoWhile (body, expr)}
    | kIf expr=exp kThen body1=stmt it=ifSecondPartStmt {If (expr, body1, it)}
    | kFor init=stmt s[","] cond=exp s[","] succ=stmt kDo body=stmt kOd {Seq (init, While (cond, Seq(body, succ)))}
);

var stmt = memo $ eta syntax (
  baseStmt |
  h=baseStmt s[";"] t=stmt { Seq(h, t) }
);

-- Public top-level parser
public parse = stmt;
