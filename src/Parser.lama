-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binOp(symb) {
  [s(symb), fun (l, op, r) {Binop(symb, l, r)}]
}



-- Primary expression
var primary = memo $ eta syntax ( x=decimal{Const (stringInt (x))} 
                                | x=lident {Var (x)}               
                                | inbr[s("("), exp, s(")")]
    ),
    exp     = memo $ eta (expr({
								[Left, {binOp("!!")}],
								[Left, {binOp("&&")}],
								[Nona, {binOp("<"),
								        binOp(">"),
										binOp("<="),
										binOp(">="),
										binOp("=="),
										binOp("!=")}],
								[Left, {binOp("+"),
								        binOp("-"),
										binOp("^")}],
								[Left, {binOp("*"), 
										binOp("/"),
										binOp("%")}]

							}, primary)
    );

var stmt     = memo $ eta syntax ( singleStmt     
                                 | l=singleStmt s[";"] r=stmt {Seq (l, r)}
    ),
	elifStmt = memo $ eta syntax (
		kElse s2=stmt							   {s2}
	  | kElif e=exp kThen s1=stmt s2=elifStmt	   {If (e, s1, s2)}
	  | s[""]									   {Skip}
	),
    singleStmt = memo $ eta syntax (
		kRead x=inbr[s("("), lident, s(")")]       {Read (x)} 
      | kWrite e=inbr[s("("), exp, s(")")]         {Write (e)} 
      | kSkip                                      {Skip} 
      | x=lident s[":="] e=exp                     {Assn(x, e)}
      | kWhile e=exp kDo st=stmt kOd               {While (e, st)}
	  | kDo s=stmt kWhile e=exp kOd                {DoWhile (s, e)}
	  | kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd 
			{Seq(s1, While(e, Seq(s3, s2)))}
	  | kIf e=exp kThen s1=stmt s2=elifStmt kFi    {If (e, s1, s2)}
    );
-- Public top-level parser
public parse = stmt;

