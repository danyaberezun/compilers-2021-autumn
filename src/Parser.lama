-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binopWrapper (l, op, r) {
  Binop (op, l, r)
}

fun opBuilder(assoc, op) {
  [assoc, {[op, binopWrapper]}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr 
        (
          {
            opBuilder (Left, s ("!!")),
            opBuilder (Left, s ("&&")),
            opBuilder (Nona, s ("==") | s ("!=") | s ("<=") | s ("<") | s (">=") | s (">")),
            opBuilder (Left, s ("+") | s ("-")),
            opBuilder (Left, s ("*") | s ("/") | s ("%"))
          },
          primary
        ));

fun brackets(p) {
  inbr (s ("("), p, s (")"))
}

var basicStmt = memo $ eta (syntax 
  (
    kSkip { Skip }
  | kRead x=brackets[lident] {Read (x)}
  | kWrite x=brackets[exp] {Write (x)}
  | to=lident s[":="] x=exp {Assn (to, x)}
  )),
  stmt = memo $ eta (syntax (l=basicStmt s[";"] r=stmt {Seq (l, r)} | basicStmt));
   

-- Public top-level parser
public parse = stmt;
             
