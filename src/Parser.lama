-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr ({
        [Right, {
            [s(":="), fun(l, op, r) {Assn (l, r)}]}]
      , [Left, {
            [s("!!"), fun (l, op, r) {Binop (op, l ,r)}]}]
      , [Left, {
            [s("&&"), fun (l, op, r) {Binop (op, l ,r)}]}]
      , [Nona, { 
            [s("<"),  fun (l, op, r) {Binop (op, l ,r)}]
          , [s("<="), fun (l, op, r) {Binop (op, l ,r)}]
          , [s("=="), fun (l, op, r) {Binop (op, l ,r)}]
          , [s("!="), fun (l, op, r) {Binop (op, l ,r)}]
          , [s(">="), fun (l, op, r) {Binop (op, l ,r)}]
          , [s(">"),  fun (l, op, r) {Binop (op, l ,r)}]}]
      , [Left, { 
            [s("+"), fun (l, op, r) {Binop (op, l ,r)}]
          , [s("-"), fun (l, op, r) {Binop (op, l ,r)}]}]
      , [Left, { 
            [s("*"), fun (l, op, r) {Binop (op, l ,r)}]
          , [s("/"), fun (l, op, r) {Binop (op, l ,r)}]
          , [s("%"), fun (l, op, r) {Binop (op, l ,r)}]}]
      }, primary);
      --(failure ("expression parsing not implemented\n"));

var singularStmt = memo $ eta syntax( kSkip {Skip} | 
                          kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
                          kWrite x=inbr[s("("), exp, s(")")] {Write(x)} |
                          x=lident s[":="] ex=exp {Assn(x, ex)});

var stmt = memo $ eta syntax (singularStmt | x=singularStmt s[";"] xs=stmt {Seq(x, xs)});
   

-- Public top-level parser
public parse = stmt;
             
