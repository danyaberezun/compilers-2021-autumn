-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr ({     
        [Left, {[ s ("!!"), fun (l, op, r) {Binop (op, l, r)}] }],
        [Left, {[ s ("&&"), fun (l, op, r) {Binop (op, l, r)}] }],   

        [Nona, {[ s ("=="), fun (l, op, r) {Binop (op, l, r)}],
                [ s ("!="), fun (l, op, r) {Binop (op, l, r)}],
                [ s ("<"), fun (l, op, r) {Binop (op, l, r)}],
                [ s ("<="), fun (l, op, r) {Binop (op, l, r)}],
                [ s (">"), fun (l, op, r) {Binop (op, l, r)}],
                [ s (">="), fun (l, op, r) {Binop (op, l, r)}] }],

        [Left, {[ s ("+"), fun (l, op, r) {Binop (op, l, r)}],
                [ s ("-"), fun (l, op, r) {Binop (op, l, r)}] }],

        [Left, {[ s ("*"), fun (l, op, r) {Binop (op, l, r)}],
                [ s ("/"), fun (l, op, r) {Binop (op, l, r)}],
                [ s ("%"), fun (l, op, r) {Binop (op, l, r)}] }]
      }, primary);

var stmtUnit = memo $ eta syntax (
  kSkip {Skip} |
  kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
  kWrite e=inbr[s("("), exp, s(")")] {Write (e)} |
  x=lident s[":="] e=exp {Assn (x, e)} |
  kIf e=exp kThen s1=stmt s2=elseStmt {If (e, s1, s2)} |
  kWhile e=exp kDo s=stmt kOd {While (e, s)} |
  kDo s=stmt kWhile e=exp kOd {DoWhile (s, e)} |
  kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd {Seq (s1, While (e, Seq (s3, s2)))}
), 
elseStmt = memo $ eta syntax (
  kFi {Skip} |
  kElse s=stmt kFi {s} |
  kElif e=exp kThen s1=stmt s2=elseStmt {If (e, s1, s2)}
);

var stmt = memo $ eta syntax (
  stmtUnit | 
  x=stmtUnit s[";"] xs=stmt {Seq (x, xs)}
);
   

-- Public top-level parser
public parse = stmt;
             