-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

fun mkOps() {
  var ops = {
    [Left, { "!!" }],
    [Left, { "&&" }],
    [Nona, { "<", ">", "<=", ">=", "==", "!=" }],
    [Left, { "+", "-" }],
    [Left, { "*", "/", "%" }]
  };
  var res = map(fun ([prec, oops]) {
    [prec, map(fun (op) {
      [s(op), fun (l, op, r) { Binop(op, l, r) }]
    }, oops)]
  }, ops);
  --   printf("%s\n", res.string);
  res
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal { Const(stringInt(x)) } |
  x=lident { Var(x) }                                              |
  inbr[s("("), exp, s(")")]),
    exp = memo $ eta (expr(mkOps(), primary));
var elseParser = memo $ eta syntax (
  -kElse stmts -kFi                                                                      |
  kElif cond=exp kThen body=stmts falseBranch=elseParser { If(cond, body, falseBranch) } |
  kFi { Skip });

var stmt = memo $ eta syntax (kRead x=inbr[s("("), lident, s(")")] { Read(x) }           |
  kWrite x=inbr[s("("), exp, s(")")] { Write(x) }                                        |
  kSkip { Skip }                                                                         |
  x=lident s[":="] y=exp { Assn(x, y) }                                                  |
  kWhile cond=exp kDo body=stmts kOd { While(cond, body) }                               |
  kDo body=stmts kWhile cond=exp kOd { DoWhile(body, cond) }                             |
  kIf cond=exp kThen trueS=stmts falseBranch=elseParser { If(cond, trueS, falseBranch) } |
  kFor init=stmt s[","] cond=exp s[","] succ=stmt kDo body=stmts kOd { Seq(init, While(cond, Seq(body, succ))) }

);
var stmts = memo $ eta syntax (stmt | x=stmt s[";"] y=stmts { Seq(x, y) });


-- Public top-level parser
public parse = stmts;
