-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;
import STM;

public fun showDbg1 (x) {
  var f = fopen("/proc/self/fd/2", "a");
  fprintf(f, "%s\n", string(x));
  fclose(f);
  x
}

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- AST environment
fun createEnv (id) {
  fun freshName () {
    [createEnv (id+1), sprintf ("_tmp%d", id)]
  }

  [freshName]
}

fun emptyEnv () {
  createEnv (0)
}

fun freshName (env) {
  env [0] ()
}

-- Attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertBoxed (atr, vl, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> vl => fun (vl) {Ignore (vl)}
  | Unboxed -> vl => fun (vl) {Unbox (vl)}
  | Boxed -> vl
  | Weak -> vl
  esac
}

fun assertUnboxed (atr, vl, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> vl => fun (vl) {Ignore (vl)}
  | Unboxed -> vl
  | Boxed -> vl => fun (vl) {Box (vl)}
  | Weak -> vl => fun (vl) {Box (vl)}
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, vl, loc) {
  case atr of
    Void -> vl
  | Boxed   -> error ("value expected", loc)
  | Unboxed -> error ("value expected", loc)
  | Weak -> vl => fun (vl) {Seq (vl, Const (0))}
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertUnboxed (a, l (Unboxed) =>> fun (l) {
                                            r (Unboxed) =>  fun (r) {
                                              Binop (op, l, r)
                                            }}, loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandVarDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn ( Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  fun expandValDefs (defs, expr) {
    foldr (fun ([defs, expr], [ident, value]) {
             [ident : defs, Seq (Ignore (Assn ( Ref (ident), value)), expr)]
           },
           [{}, expr],
           defs)
  }

  case
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Val (ds) ->
                 case expandValDefs (ds, expr) of
                   [ds, expr] -> [Val (ds) : defs, expr]
                 esac
             | Var (ds) ->
                 case expandVarDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

-- Helper AST function: reifies pattern bindings into scope
-- definitions and assignments; takes an returns lists of
-- pattern-branch pairs
fun reifyPatternBindings (matched, brs) {
  map (
    fun ([pat, br]) {
      fun collectBindings (path, p) {
        fun collectList (path, ps) {
          case
            foldl (fun ([acc, i], p) {
                     [collectBindings (i : path, p) : acc, i+1]
                   },
                   [{}, 0],
                   ps) of
            [acc, _] -> flatten (acc)
          esac
        }

        case p of
          Sexp  (_, ps)   -> collectList (path, ps)
        | Array (ps)      -> collectList (path, ps)
        | Named (name, p) -> [name, path] : collectBindings (path, p)
        |  _              -> {}
        esac
      }

      case collectBindings ({}, pat) of
        {}       -> [pat, br]
      | bindings ->
           [pat,
             expandScope (
               {Val (map (
                      fun ([name, path]) {
                        [name, foldr (fun (p, i) {Elem (p, Const (i))}, Var (matched), path)]
                      },
                      bindings))},
               br
             )]
      esac
    },
    brs
  )
}

fun unzip(l) {
  case l of
    [a, b] : t -> case unzip(t) of [l, r] -> [a:l, b:r] esac
  | {} -> [{}, {}]
  esac
}

fun zip(l, r) {
  case l of
    lh : lt ->
      case r of
        rh : rt ->
          [lh, rh] : zip(lt, rt)
      esac
  | {} -> case r of {} -> {} esac
  esac
}

var
  primary = memo $ eta syntax (
    -- array constant
    loc=pos x=inbr[s("["), list0(syntax (e=exp {e(Boxed)})), s("]")] {
      fun (a) {assertBoxed (a, chainST (x) => fun (x) {Array (x)}, loc)}
    } |

    -- string constant
    loc=pos x=strlit {
      fun (a) {assertBoxed (a, returnST $ String (x), loc)}
    } |

    -- character literal
    loc=pos x=chrlit {
      fun (a) {assertUnboxed (a, returnST $ Const (x), loc)}
    } |

    -- decimal constant
    loc=pos x=decimal {
      fun (a) {assertUnboxed (a, returnST $ Const (stringInt (x)), loc)}
    } |

    -- identifier
    loc=pos x=lident args=inbr[s("("), list0(syntax(e=exp {e(Boxed)})), s(")")]? {
      fun (a) {
        case args of
          None -> returnST $ case a of
                               Ref     -> Ref (x)
                             | Void    -> Ignore (Var (x))
                             | Unboxed -> Unbox (Var (x))
                             | _       -> Var (x)
                             esac
        | Some (args) -> assertBoxed (a, chainST (args) => fun (args) {Call (x, args)}, loc)
        esac}
    } |

    -- S-expression
    loc=pos x=uident args=inbr[s("("), list0(syntax(e=exp {e (Boxed)})), s(")")]? {
      fun (a) {
        assertBoxed (a, case args of
                          None        -> returnST $ Sexp (x, {})
                        | Some (args) -> chainST (args) => fun (args) {Sexp (x, args)}
                        esac, loc)}
    }

    | inbr[s("("), scopeExpr, s(")")]
    | kIf res=someIf { res }
    | loc=pos kWhile e=exp kDo s=scopeExpr kOd { fun(a) { assertVoid(a, e (Unboxed) =>> fun (e) { s (Void) => fun (s) { While (e, s) } }, loc) } }
    | loc=pos kWhile e=exp kDo s=scopeExpr kOd { fun(a) { assertVoid(a, e (Unboxed) =>> fun (e) { s (Void) => fun (s) { While (e, s) } }, loc) } }
    | loc=pos kDo s=scopeExpr kWhile e=exp kOd { fun(a) { assertVoid(a, s (Void) =>> fun (s) { e (Unboxed) => fun (e) { distributeScope(s, fun (s) { DoWhile (s, e) } ) } }, loc) } }
    | loc=pos kSkip { fun(a) { assertVoid(a, returnST $ Skip, loc) } }
    | loc=pos kFor bef=scopeExpr? s[","] cond=exp s[","] aft=exp? kDo body=scopeExpr kOd { fun(a) {
          bef := case bef of None -> fun (a) { assertVoid(a, returnST $ Skip) } | Some (b) -> b esac;
          aft := case aft of None -> fun (a) { assertVoid(a, returnST $ Skip) } | Some (b) -> b esac;
          assertVoid(a, chainST({bef(Void), cond(Unboxed), body(Void), aft(Void)}) => fun ({bef, cond, body, aft}) { distributeScope(bef, fun (bef) { Seq (bef, While (cond, Seq (body, aft))) } ) }, loc)
        } }
    | loc=pos kCase ex=exp kOf o=patterns kEsac { fun(a) { chainST({o (a), ex (Boxed)}) =>> fun ({o, ex}) { fun (state) {
        case freshName(state) of
          [state, name] -> [state, expandScope({Val ({[name, ex]})}, Case (name, reifyPatternBindings (name, o)))]
        esac
      } } } }
  ),

  patterns = memo $ eta syntax (
    o=list0By[syntax(p=pattern s["->"] b=scopeExpr { [p, b] }), s("|")] { fun (a) { case unzip(o) of [p, b] -> chainST (map (fun (x) { x (a) }, b)) => fun (b) { zip (p, b) } esac } }
  ),

  pattern = memo $ eta syntax (
      x=decimal { Dec (stringInt(x)) }
    | s["_"] { Wild }
    | x=inbr[s("["), list0(pattern), s("]")] { Array (x) }
    | x=uident args=inbr[s("("), list0(pattern), s(")")]? { Sexp (x, case args of None -> {} | Some (args) -> args esac) }
    | x=lident p=(-s["@"] pattern)? { Named (x, case p of None -> Wild | Some (p) -> p esac) }
  ),

  basic = memo $ eta (
    expr ({[Right, {[s (":="), fun (l, loc, r) {
                                 fun (a) {assertBoxed (a, l (Ref) =>> fun (l) {
                                                          r (Boxed) =>  fun (r) {
                                                          Assn (l, r)
                                                          }},
                                                        loc)
                                 }
                               }]}],
           [Left , map (binop, {"!!"})],
           [Left , map (binop, {"&&"})],
           [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
           [Left , map (binop, {"+", "-"})],
           [Left , map (binop, {"*", "/", "%"})]
          },
          postfix)
  ),

  postfix = memo $ eta syntax (
    loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] {Index (i (Unboxed))})* {
      fun (a) {
        foldl (fun (e, p) {
                 case p of
                   Index (i) ->
                    fun (a) {
                      case a of
                        Ref -> e (Boxed) =>> fun (e) {
                               i       =>  fun (i) {
                                 ElemRef (e, i)
                               }}
                      | _   -> assertBoxed (a, e (Boxed) =>> fun (e) {
                                               i       =>  fun (i) {
                                               Elem (e, i)
                                               }},
                                            loc)
                      esac
                    }
                 esac
               }, e, ps) (a)
      }}
  ),

  scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {
    fun (a) {
      fun (e) {
        case ds of
          {} -> e
        | _  -> chainST (ds) =>> fun (ds) {
                e            =>  fun (e)  {
                  expandScope (ds, e)
                }}
        esac
      }
      (case e of
        Some (e) -> e (a)
      | _        -> returnST $ Skip
      esac)
    }}
  ),

  definition = memo $ eta syntax (
    kVar ds=list[syntax (x=lident e=(-s["="] basic)? {case e of
                                                        None -> returnST $ [x, None]
                                                      | Some (e) ->
                                                          e (Boxed) => fun (e) {[x, Some (e)]}
                                                      esac})] s[";"] {
      chainST (ds) => fun (ds) {Var (ds)}
    } |
    kVal ds=list[syntax (x=lident s["="] e=basic {e (Boxed) => fun (e) {[x, e]}})] s[";"] {
      chainST (ds) => fun (ds) {Val (ds)}
    } |
    kFun name=lident args=inbr[s("("), list0 (lident), s(")")] body=inbr[s("{"), scopeExpr, s("}")] {
      body (Weak) => fun (body) {Fun (name, args, body)}
    }
  ),

  exp = memo $ eta syntax (
    basic
  | s1=basic s[";"] s2=exp {
     fun (a) {
       s1 (Void) =>> fun (s1) {
       s2 (a)    =>  fun (s2) {
         Seq (s1, s2)
       }}
     }
   }
  ),

  mkElse = fun (f) { fun(cond, tr) { fun (a) {
      cond (Unboxed) =>> fun (cond) { tr (a) =>> fun (tr) { f (a) => fun (f) { If (cond, tr, f) } } }
    } } },
  elsePart = memo $ eta syntax ( kElse f=scopeExpr kFi { mkElse(f) }
                               | kElif f=someIf  { mkElse(f) }
                               | loc=pos kFi { mkElse ( fun (a) { assertVoid (a, returnST (Skip)) } ) } -- fun(cond, tr) { fun(a) { assertVoid (a, If (cond(Unboxed), tr (Void), Skip), loc) } } }
                               ),
  someIf   = memo $ eta syntax (e=exp kThen t=scopeExpr f=elsePart { f(e, t) })

  ;

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void) (emptyEnv ()) [1]});
