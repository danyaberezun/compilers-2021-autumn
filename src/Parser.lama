-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binopRun (l, op, r) {
  Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")")));
var exp = memo $ eta expr(
  {
    [Left, {[s ("!!"), binopRun]}],
    [Left, {[s ("&&"), binopRun]}],
    [Nona, {
      [s ("<"), binopRun],
      [s ("<="), binopRun],
      [s (">"), binopRun],
      [s (">="), binopRun],
      [s ("=="), binopRun],
      [s ("!="), binopRun]
    }],
    [Left, {[s ("+"), binopRun], [s ("-"), binopRun]}],
    [Left, {
      [s ("*"), binopRun],
      [s ("/"), binopRun],
      [s ("%"), binopRun]
    }]
  },
  primary
);

fun addBrackets(p) {
  inbr (s ("("), p, s (")"))
}

var variantIfTailStmt = memo $ eta syntax (
  kElse st = stmt kFi {st}
| kFi {Skip}
| kElif ex = exp kThen thenSt = stmt varTailStmt = variantIfTailStmt { If(ex, thenSt, varTailStmt)}
);

var baseStmt = memo $ eta syntax
  (
    kSkip { Skip }
  | kRead x = addBrackets [lident] { Read(x) }
  | kWrite x = addBrackets [exp] { Write(x) }
  | to = lident s[":="] x = exp { Assn (to, x) }
  | kWhile whileExpr = exp kDo whileStmt = stmt kOd { While(whileExpr, whileStmt) }
  | kDo doWhileStmt = stmt kWhile doWhileExpr = exp kOd { DoWhile(doWhileStmt, doWhileExpr) }
  | kIf ifExpr = exp kThen ifStmt = stmt varTailStmt = variantIfTailStmt { If(ifExpr, ifStmt, varTailStmt) }
  | kFor initStmt = stmt s[","] forExpr = exp s[","] incrStmt = stmt kDo forStmt = stmt kOd { Seq(initStmt, While(forExpr, Seq(forStmt, incrStmt))) }
  ),
  stmt = memo $ eta syntax (
    l = baseStmt s[";"]
    r = stmt { Seq(l, r) } | baseStmt
  );

-- Public top-level parser
public parse = stmt;
