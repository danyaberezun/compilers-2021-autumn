-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  var stack = c[0];
  var state = c[1];
  var world = c[2];
  case insns of
    {}          -> c
  | insn : tail -> eval (
      case insn of
          READ      -> (
            var readResult = readWorld (world);
            [readResult.fst : stack, state, readResult.snd]
          )
        | WRITE     -> case stack of
            top : newStack -> [newStack, state, writeWorld (top, world)]
          esac
        | BINOP (s) -> case stack of
            b : a : newStack -> [evalBinop (s, a, b) : newStack, state, world]
          esac
        | LD    (x) -> [state (x) : stack, state, world]
        | ST    (x) -> case stack of
            top : newStack -> [newStack, state <- [x, top], world]
          esac
        | CONST (n) -> [n : stack, state, world]
      esac,
      tail
    )
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  getBuffer (compileExprBuf (expr))
}

fun compileExprBuf (expr) {
  case expr of
    Var (x)           -> singletonBuffer (LD (x))
  | Const (n)         -> singletonBuffer (CONST (n))
  | Binop (op, a, b)  -> compileExprBuf (a) <+> compileExprBuf (b) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (compileSMBuf (stmt))
}

fun compileSMBuf (stmt) {
  case stmt of
    Assn (s, expr)     -> compileExprBuf (expr) <+ ST (s)
  | Seq (a, b)      -> compileSMBuf (a) <+> compileSMBuf (b)
  | Skip            -> emptyBuffer ()
  | Read (varName)  -> listBuffer ({READ, ST (varName)})
  | Write (expr)    -> compileExprBuf (expr) <+ WRITE
  esac
}
