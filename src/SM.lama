-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

fun evalInstr(c@[stack, cStack, st@[a, b], world], instr) {
  case instr of
      READ      -> 
      case readWorld(world) of
        [v, newWorld] -> [v:stack, cStack, st, newWorld]
      esac                                      
    | WRITE     -> 
      case stack of
        v : vals -> [vals, cStack, st, writeWorld(v, world)]
      esac
    | BINOP (op) -> 
      case stack of 
        a : b : vals -> [evalOp(op, b, a) : vals, cStack, st, world]
      esac
    | LD (x) -> [st.lookup(x): stack, cStack, st, world]
    | LDA (x) -> [x : stack, cStack, st, world]
    | ST (x) -> 
      case stack of
        v : vals ->
         st.assign(x, v);
        [vals, cStack, st, world]
      esac 
    | STI -> 
      case stack of
        v : u : vals -> 
          st.assign(u, v);
          [v :vals, cStack, st, world]
      esac 
    | CONST (n) -> [n:stack, cStack, st, world]
    | LABEL (s) -> c
    | DROP -> 

      case stack of
        v : vals -> [vals, cStack, st, world]
        | _ -> c
      esac 
    | DUP -> 
      case stack of
        v : vals -> [v : v : vals, cStack, st, world] 
      esac 
    | GLOBAL (x) -> (
      assign(st, Glb(x), 0);
      [stack, cStack, st, world]
    )
    | BEGIN (f, n, l) -> 
      case take(stack, n) of
        [stack, p] -> 
          fun makeArgs(s, args, i) {
            case args of
              a : rest -> 
                assign(s, Arg(i) , a);
                makeArgs(s, rest, i + 1)
              | {} -> i
            esac
          }


          var nSt = makeState(n, l);
          makeArgs(nSt, p, 0);
          [stack, cStack, nSt, world]
      esac
    | _ -> "Not implemented"
  esac
}

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
     case insns of
        instr : prog ->
          case instr of
            JMP (l) -> eval(c, fromLabel(env, l))
            | CJMP (c, l) ->
                case st of
                  v : vals -> eval([vals, cst, s, w], if v == c then fromLabel(env, l) else prog fi)
                esac
            | END -> 
              case cst of
                {} -> c |
                [nS, insns]: cst -> eval([st, cst, nS, w], insns)
              esac
            | CALL (f, p) -> eval([st, [s, prog] : cst, s, w], fromLabel(env, f))
            | _ -> eval(evalInstr(c, instr), prog)
          esac
        | {} -> c
      esac
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Var (v) -> [false, env, singletonBuffer(LD(lookupVar(env, v)))]                        
    | Ref (v) -> [false, env, singletonBuffer(LDA(lookupVar(env, v)))]                     
    | Const (c) -> [false, env, singletonBuffer(CONST(c))]
    | Binop (op, x, y) -> 
        case env.genLabels(2) of
          [aLab, bLab, env] ->
            case compile(aLab, env, x) of
              [aLabUsed, env, aCode] ->
                case compile(bLab, env, y) of
                  [bLabUsed, env, bCode] ->
                    [false, env, aCode <+> label(aLab, aLabUsed) <+> bCode <+> label(bLab, bLabUsed) <+ BINOP(op)]
                esac
            esac
        esac           
    | Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> 
      case env.genLabel of
            [xLab, env] -> 
              case compile (xLab, env, x) of
                [xLabUsed, env, xCode] ->[false, env, xCode <+ READ <+ STI <+ DROP]
              esac
      esac
    | Write (e)      -> 
        case env.genLabel of
          [aLab, env] -> 
            case compile (aLab, env, e) of
              [aLabUsed, env, code] -> [false, env, code <+> label(aLab, aLabUsed) <+ WRITE]
            esac
        esac
    | Assn  (x, e)   -> 
        case env.genLabels(2) of
          [xLab, eLab, env] -> 
            case compile (xLab, env, x) of
              [xLabUsed, env, xCode] -> 
                case compile (eLab, env, e) of
                  [labUsed, env, eCode] -> [false, env, xCode <+> label (xLab, xLabUsed) <+> eCode <+> label(eLab, labUsed) <+ STI]
                esac
            esac
        esac 
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (c, a, b) ->
        case env.genLabels(4) of
          [cLab, thenLab, elseLab, bLab, env] ->
            case compile(cLab, env, c) of
              [cLabUsed, env, cCode] ->
                case compile(thenLab, env, a) of 
                  [thenLabUsed, env, aCode] ->
                    case compile(bLab, env, b) of
                      [bLabUsed, env, bCode] ->
                        [true, env, 
                        cCode <+> label(cLab, cLabUsed) <+ CJMP (0, elseLab) <+> aCode <+> label(thenLab, thenLabUsed) <+ JMP(lab) <+> label(elseLab, true) <+> bCode <+> label(bLab, bLabUsed)]
                    esac
                esac
            esac
        esac
    | While (c, b) -> 
        case env.genLabels(3) of
          [cLab, startLab, bodyLab, env] ->
            case compile(cLab, env, c) of 
              [cLabUsed, env, cCode] ->
                case compile(bodyLab, env, b) of
                  [bodyLabUsed, env, bCode] -> 
                    [true, env,
                    label(startLab, true) <+> cCode <+> label(cLab, cLabUsed) <+ CJMP (0, lab) <+> bCode <+> label(bodyLab, bodyLabUsed) <+ JMP (startLab)]
                esac
            esac
        esac
    | DoWhile (b, c) -> 
        case env.genLabels(3) of
          [cLab, bodyLab, startLab, env] -> 
            case compile(cLab, env, c) of
              [cLabUsed, env, cCode] -> 
                case compile(bodyLab, env, b) of
                  [bodyLabUsed, env, bCode] ->
                    [true, env,
                    label(startLab, true) <+> bCode <+> label(bodyLab, bodyLabUsed) <+> cCode <+> label(cLab, cLabUsed) <+ CJMP(0, lab) <+ JMP(startLab)]
                esac
            esac
        esac
    | Ignore (e) -> 
        case env.genLabel of
          [aLab, env] -> 
            case compile(aLab, env, e) of
              [aLabUsed, env, eCode] -> [false, env, eCode <+> label(aLab, aLabUsed) <+ DROP]
            esac
        esac
    | Scope (defs, exp) -> 
        fun addDefsEnv(e, ds) {
          case ds of
            {} -> e |
            d : rest -> 
              case d of
                Var (x) -> addDefsEnv(e.addVars(x), rest) |
                Fun (n, p, b) -> addDefsEnv(e.addFun(n, n, p), rest)
              esac
          esac
        }

        fun rememberFunsEnv(env, ds) {
          case ds of
            {} -> env |
            d : rest -> 
              case d of
                Var (x) -> rememberFunsEnv(env, rest) |
                Fun (n, p, b) -> rememberFunsEnv(env.rememberFun(n, p, b), rest)
              esac
          esac
        }

        fun addGlobalsVar(ds) {
          case ds of
            {} -> emptyBuffer() |
            d : rest -> singletonBuffer(GLOBAL (d)) <+> addGlobalsVar(rest)
          esac
        }

        fun addGlobals(ds) {
          case ds of
            d : rest ->
              case d of
                Var (vs) -> addGlobalsVar(vs) <+> addGlobals(rest)
                | Fun (n, p, b) -> addGlobals(rest)
              esac
            | {} -> emptyBuffer()
          esac
        }

        var globalsCode = emptyBuffer();
        env := beginScope(env);
        env := addDefsEnv(env, defs);
        env := rememberFunsEnv(env, defs);
        if env.isGlobal
        then globalsCode := addGlobals(defs)
        fi;
        case compile (lab, env, exp) of
          [labUsed, env, code] -> [labUsed, endScope(env), globalsCode <+> code]
        esac  
    | Call (f, args) -> 
        case env.genLabel of
          [lab, env] -> 
            fun compArgs(c@[labUsed, env, code], ars) {
                case ars of
                  a : rest -> 
                    case compile(lab, env, a) of
                      [lUsed, env, aCode] -> compArgs([lUsed !! labUsed, env, code <+> aCode], rest)
                    esac
                  | _ -> c
                esac
            }
            case compArgs([false, env, emptyBuffer()], args) of
              [labUsed, env, argsCode] -> 
                case env.lookupFun(f) of
                  Fun (f, n) -> [false, env, argsCode <+> label(lab, labUsed) <+ CALL (f, size(n))]
                esac
            esac
        esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }
  
  fun funsCode(env, fc) {
    fun funCode(env, Fun(f, p, b, st)) {
      case env.beginFun(st).addArgs(p).genLabel of 
        [bLab, env] ->
          case compile(bLab, env, b) of
            [bLabUsed, env, bCode] -> 
              funsCode (env, singletonBuffer(LABEL(f))
              <+ BEGIN (f, p.size, env.getLocals)
              <+> bCode
              <+> label (bLab, bLabUsed)
              <+ END
              )
          esac
      esac
    }

    case env.getFuns of
      [funs, env] -> (
        fun genCode(fs, c) {
          case fs of
            {} -> c |
            f : rest -> genCode(rest, c <+> funCode(env, f))
          esac
        }
        genCode(funs, fc)
      )
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> 
         getBuffer(
         label("main", true) <+
         BEGIN ("main", 0, env.getLocals)
         <+> 
         code 
         <+> label (endLab, endLabUsed) 
         <+ END
         <+> funsCode (env, emptyBuffer())
         )
       esac
  esac
}

