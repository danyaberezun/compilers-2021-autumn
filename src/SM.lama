-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    {}        -> c
  | head:tail -> case evalInsn (env, c, head, tail) of [c, tail] -> eval (env, c, tail) esac
  esac
}

fun evalInsn (env, c@[stack, st, w], insn, tail) {
  case insn of
    READ           -> [case readWorld (w) of [value, w2] -> [value:stack, st, w2] esac, tail]
  | WRITE          -> [case stack of head:tail -> [tail, st, writeWorld (head, w)] esac, tail]
  | BINOP (op)     -> [case stack of x:y:tail  -> [binop (op) (y, x) : tail, st, w] esac, tail]
  | DROP           -> [[case stack of _:tail -> tail esac, st, w], tail]
  | DUP            -> [[case stack of value:tail -> value:value:tail esac, st, w], tail]
  | LD    (name)   -> [[st (name) : stack, st, w], tail]
  | LDA   (name)   -> [[Ref (name):stack, st, w], tail]
  | ST    (name)   -> [case stack of head:tail -> [tail, st <- [name, head], w] esac, tail]
  | STI            -> [case stack of value:Ref (name):tail -> [value:tail, st <- [name, value], w] esac, tail]
  | CONST (value)  -> [[value:stack, st, w], tail]
  | LABEL (name)   -> [c, tail]
  | JMP   (lab)    -> [c, fromLabel (env, lab)]
  | CJMP  (f, lab) -> case stack of
                        h:t -> if h != 0 && compare ("nz", f) == 0 !! h == 0 && compare ("z", f) == 0
                                 then [[t, st, w], fromLabel (env, lab)]
                                 else [[t, st, w], tail]
                               fi
                      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip             -> [false, env, emptyBuffer ()]
    | Var    (x)       -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)       -> [false, env, singletonBuffer (LDA (x))]
    | Ignore (e)       -> case genLabel (env) of [lab1, env] ->
                            case compile (lab1, env, e) of 
                              [lab1Used, env, code] -> [false, env, code <+> label (lab1, lab1Used) <+ DROP]
                            esac
                          esac
    | Const  (n)       -> [false, env, singletonBuffer (CONST (n))]
    | Binop (op, l, r) -> case genLabels (env, 2) of [lab1, lab2, env] ->
                            case compile (lab1, env, l) of [lab1Used, env, code1] ->
                              case compile (lab2, env, r) of [lab2Used, env, code2] ->
                                [false,
                                 env,
                                 code1 <+> label (lab1, lab1Used)
                                       <+> code2 <+> label (lab2, lab2Used) <+ BINOP (op)
                                ]
                              esac
                            esac
                          esac
    | Read  (x)        -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)        -> case genLabel (env) of [lab1, env] ->
                            case compile (lab1, env, e) of
                              [lab1Used, env, code] -> [false, env, code <+> label (lab1, lab1Used) <+ WRITE]
                            esac
                          esac
    | Assn  (x, e)     -> case genLabels (env, 2) of [lab1, lab2, env] ->
                            case compile (lab1, env, x) of [lab1Used, env, xCode] ->
                              case compile (lab2, env, e) of [lab2Used, env, eCode] -> 
                                [false, 
                                 env, 
                                 xCode <+> label (lab1, lab1Used) <+> eCode <+> label (lab2, lab2Used) <+ STI
                                ]
                              esac
                            esac
                          esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2) -> case genLabels (env, 2) of [lab1, lab2, env] ->
                          case compile (lab2, env, e) of [lab2Used, env, eCode] ->
                            case compile (lab, env, s1) of [_, env, code1] ->
                              case compile (lab, env, s2) of [_, env, code2] ->
                                [true, 
                                  env, 
                                  eCode <+> label (lab2, lab2Used) <+ CJMP ("z", lab1) <+> code1 
                                        <+ JMP (lab) <+ LABEL (lab1) <+> code2 -- <+ JMP (lab)
                                ]
                              esac 
                            esac
                          esac
                        esac
    | While (e, s)   -> case genLabels (env, 3) of [cond, st, expr, env] ->
                          case compile (expr, env, e) of [exprLabUsed, env, eCode] ->
                            case compile (cond, env, s) of [_, env, sCode] ->
                              [false,
                               env,
                               singletonBuffer (JMP (cond)) 
                                       <+ LABEL (st) <+> sCode <+ LABEL (cond) <+> eCode
                                       <+> label (expr, exprLabUsed) <+ CJMP ("nz", st)
                              ]
                            esac
                          esac
                        esac
    | DoWhile (s, e) -> case genLabels (env, 2) of [lab1, lab2, env] ->
                          case compile (lab1, env, s) of [_, env, sCode] ->
                            case compile (lab2, env, e) of [lab2Used, env, eCode] ->
                              [false,
                               env,
                               singletonBuffer (LABEL (lab1)) <+> sCode <+> eCode 
                                       <+> label (lab2, lab2Used) <+ CJMP ("nz", lab1)
                              ]
                            esac
                          esac
                        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
