-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (cfg @ [stack, state, world], insns) {
  case insns of
    {} -> cfg
  | i : is -> eval(case i of
      READ -> case readWorld (world) of
        [value, world] -> [value : stack, state, world]
      esac
    | WRITE -> case stack of
        value : tail -> [tail, state, writeWorld (value, world)]
      esac
    | BINOP (opStr) -> case stack of
        right : left : tail -> [evalBinop (opStr) (left, right) : tail, state, world]
      esac
    | LD (name) -> [state (name) : stack, state, world]
    | ST (name) -> case stack of
        value : tail -> [stack, state <- [name, value], world]
      esac
    | CONST (value) -> [value : stack, state, world]
    esac, is)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name) -> {LD (name)}
  | Const (value) -> {CONST (value)}
  | Binop (op, left, right) -> compileExpr (left) +++ compileExpr (right) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (name, expr) -> compileExpr (expr) +++ {ST (name)}
  | Seq (leftStmt, rightStmt) -> compileSM (leftStmt) +++ compileSM (rightStmt)
  | Skip -> {}
  | Read (name) -> {READ, ST (name)}
  | Write (expr) -> compileExpr (expr) +++ {WRITE}
  esac
}
