-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns){
  case insns of
  {} -> c
  | READ:other       -> case readWorld(world) of
                        [n, world2] -> eval([n:stack, state, world2], other)
                        esac
  | WRITE:other      -> case stack of
                        top:stack2 -> eval([stack2, state, writeWorld(top, world)], other)
                        esac
  | BINOP(op): other -> case stack of
                        top:top2:stack2 -> eval([evalOp(op)(top2, top):stack2, state, world], other)
                        esac
  | LD (x):other     -> eval( [state(x):stack, state , world], other)
  | ST (x):other     -> case stack of
                        top:stack2 -> eval([stack2, state <- [x, top], world], other)
                        esac
  | CONST(n):other   -> eval( [n:stack, state, world], other)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
   Var (x) -> {LD (x)}
  | Const (n) -> {CONST (n)}
  | Binop (op, l, r) -> (compileExpr(l) +++ compileExpr(r)) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case (stmt) of
    Assn  (x, e)    -> compileExpr(e) +++ {ST(x)}
  | Seq   (s1, s2)  -> compileSM(s1) +++ compileSM(s2)
  | Skip            -> {}
  | Read  (x)       -> {READ} +++ {ST(x)}
  | Write (e)       -> compileExpr(e) +++ {WRITE}
  esac
}
