-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], insns) {
  case insns of
    ins : rest_insns ->
      case ins of
          READ ->
          case readWorld(world) of
            [value, new_world] -> eval([value:stack, state, new_world], rest_insns)
          esac
        | WRITE ->
          case stack of
            fst : rest -> eval([rest, state, writeWorld(fst, world)], rest_insns)
          esac
        | BINOP(op) ->
          case stack of
            fst : snd : rest -> eval([evalOp(op, snd, fst):rest, state, world], rest_insns)
          esac
        | LD (name) -> eval([state(name):stack, state, world], rest_insns)
        | ST (name) ->
          case stack of
            fst : rest -> eval([rest, state <- [name, fst], world], rest_insns)
          esac
        | CONST (value) -> eval([value:stack, state, world], rest_insns)
      esac
    | {} -> [stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (name) -> { LD(name) }
    | Const (value) -> { CONST(value) }
    | Binop (op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ { BINOP(op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (name, expr) -> compileExpr(expr) +++ { ST(name) }
    | Seq (expr1, expr2) -> compileSM(expr1) +++ compileSM(expr2)
    | Skip -> []
    | Read (name) -> { READ, ST(name) }
    | Write (expr) -> compileExpr(expr) +++ { WRITE }
  esac
}
