-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[s, st, w], insns) {
  case insns of
    i:is -> case i of
      READ ->
        case readWorld(w) of
          [n, nw] -> eval(env, [n:s, st, nw], is)
        esac
      | WRITE ->
        case s of
          x:xs -> eval(env, [xs, st, writeWorld(x, w)], is)
        esac
      | BINOP (op) ->
        case s of
          y:x:zs -> eval(env, [evalOp(op, x, y):zs, st, w], is)
        esac
      | LD (ident) -> eval(env, [st(ident):s, st, w], is)
      | ST (ident) ->
        case s of
          x:xs -> eval(env, [s, st <- [ident, x], w], is)
        esac
      | CONST (n) -> eval(env, [n:s, st, w], is)
      | JMP (l) -> eval(env, c, env.fromLabel(l))
      | CJMP ("nz", l) ->
        case s of
          x:xs -> eval(env, [xs, st, w], if x != 0 then env.fromLabel(l) else is fi)
        esac
      | CJMP ("z", l) ->
        case s of
          x:xs -> eval(env, [xs, st, w], if x == 0 then env.fromLabel(l) else is fi)
        esac
      | LABEL (_) -> eval(env, c, is)
      | LDA (ident) -> eval(env, [ident:s, st, w], is)
      | STI ->
        case s of
          y:x:zs -> eval(env, [y:zs, st <- [x, y], w], is)
        esac
      | DROP ->
        case s of
          x:xs -> eval(env, [xs, st, w], is)
        esac
    esac
    | _ -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (expr) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileSeq (lab, env, lexp, rexp) {
    case env.genLabel of
      [lLab, env] ->
        case compile (lLab, env, lexp) of
          [lLabUsed, env, lCode] ->
            case compile (lab, env, rexp) of
              [labUsed, env, rCode] -> [labUsed, env, lCode <+> label (lLab, lLabUsed) <+> rCode]
            esac
        esac
    esac
  }
  
  fun compile (lab, env, expr) {
    case expr of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Binop (op, lexp, rexp) ->
      case env.genLabel of
        [cLab, env] ->
          case compileSeq(cLab, env, lexp, rexp) of
            [cLabUsed, env, code] -> [false, env, code <+> label(cLab, cLabUsed) <+ BINOP (op)]
          esac
      esac
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e)      ->
      case env.genLabel of
        [cLab, env] ->
          case compile(cLab, env, e) of
            [cLabUsed, env, code] -> [false, env, code <+> label (cLab, cLabUsed) <+ WRITE]
          esac
      esac
    | Assn  (lexp, rexp) ->
      case env.genLabel of
        [cLab, env] ->
          case compileSeq(cLab, env, lexp, rexp) of
            [cLabUsed, env, code] -> [false, env, code <+> label(cLab, cLabUsed) <+ STI]
          esac
      esac
    | Seq   (s1, s2) -> compileSeq(lab, env, s1, s2)
    | If (exp, ifTrue, ifFalse) ->
      case env.genLabels(2) of
        [expLab, elseLab, env] ->
          case compile(expLab, env, exp) of
            [expLabUsed, env, expCode] ->
              case compile(lab, env, ifTrue) of
                [_, env, ifTrueCode] ->
                  case compile(lab, env, ifFalse) of
                    [_, env, ifFalseCode] -> [true, env, expCode <+> label(expLab, expLabUsed) <+ CJMP ("z", elseLab)
                                                        <+> ifTrueCode <+ JMP (lab) <+ LABEL (elseLab) <+> ifFalseCode]
                  esac
              esac
          esac
      esac
    | While (exp, s) ->
      case env.genLabels(3) of
        [startLab, expLab, sLab, env] ->
          case compile(expLab, env, exp) of
            [expLabUsed, env, expCode] ->
              case compile(sLab, env, s) of
                [sLabUsed, env, sCode] -> [true, env, singletonBuffer(LABEL (startLab)) <+> expCode <+> label(expLab, expLabUsed)
                                                      <+ CJMP ("z", lab) <+> sCode <+> label(sLab, sLabUsed) <+ JMP (startLab)]
              esac
          esac
      esac
    | DoWhile (s, exp) ->
      case env.genLabels(2) of
        [startLab, cLab, env] ->
          case compileSeq(cLab, env, s, exp) of
            [cLabUsed, env, code] -> [false, env, singletonBuffer(LABEL (startLab)) <+> code
                                                  <+> label(cLab, cLabUsed) <+ CJMP ("nz", startLab)]
          esac
      esac
    | Ignore (exp) ->
      case env.genLabel of
        [cLab, env] ->
          case compile(cLab, env, exp) of
            [cLabUsed, env, code] -> [false, env, code <+> label (cLab, cLabUsed) <+ DROP]
          esac
      esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, expr) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
