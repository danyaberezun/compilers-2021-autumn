-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of 
    {} -> c
  | head:tail -> 
    case head of 
      READ -> case readWorld(world) of [v, w] -> eval (env, [v:stack, state, w], tail) esac 
    | WRITE -> case stack of v:rest -> eval (env, [rest, state, writeWorld(v, world)], tail) esac
    | BINOP (op) -> case stack of r:l:rest -> 
        var top = evalExpr(state, Binop(op, Const(l), Const(r)));
        eval (env, [top:rest, state, world], tail)
      esac
    | LD (s) -> eval (env, [state (s):stack, state, world], tail)
    | ST (s) -> case stack of v:rest -> eval (env, [stack, state <- [s, v], world], tail) esac
    | CONST (x) -> eval (env, [x:stack, state, world], tail)
    | LABEL (_) -> eval (env, c, tail)
    | JMP (lab) -> eval(env, c, fromLabel(env, lab))
    | CJMP ("z", lab) -> 
        case stack of t:bot -> case t of  
            0 -> eval(env, [bot, state, world], fromLabel(env, lab))
          | _ -> eval(env, [bot, state, world], tail)
        esac esac
    | CJMP ("nz", lab) -> 
        case stack of t:bot -> case t of  
            0 -> eval(env, [bot, state, world], tail)
          | _ -> eval(env, [bot, state, world], fromLabel(env, lab))
        esac esac
    esac 
  esac 
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var(v)    -> singletonBuffer(LD (v))
  | Const (x) -> singletonBuffer(CONST (x))
  | Binop (op, lhs, rhs) -> compileExpr (lhs) <+> compileExpr (rhs) <+  BINOP (op)
  esac 
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | While (e, s) ->
        case env.genLabels(2) of [cl, bl, env] -> case compile(cl, env, s) of [_, env, code] ->
              [false, env, singletonBuffer(JMP (cl)) <+ LABEL(bl) <+> code <+ LABEL(cl) <+> compileExpr(e) <+ CJMP("nz", bl)]
        esac esac
    | If (e, thenBranch, elseBranch) ->
        case env.genLabel of
          [elseLab, env] ->
            case compile(lab, env, thenBranch) of [_, env, thenCode] -> case compile(lab, env, elseBranch) of [_, env, elseCode] ->
                  [true, env, compileExpr(e) <+ CJMP("z", elseLab) <+> thenCode <+ JMP (lab) <+ LABEL(elseLab) <+> elseCode]
            esac esac
        esac
    | DoWhile (s, e) ->
        case env.genLabels(2) of [cl, bl, env] -> case compile(cl, env, s) of [_, env, code] ->
              [false, env, singletonBuffer(LABEL(bl)) <+> code <+ LABEL(cl) <+> compileExpr(e) <+ CJMP("nz", bl)]
        esac esac
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}