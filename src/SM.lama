-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl(evalSMInsn, c, getBuffer(insns))
}

fun evalSMInsn (c, insn) {
  var l  = c[0];
  var st = c[1];
  var w  = c[2];

  case insn of
    READ -> (
      var rw       = readWorld(w);
      var varValue = rw[0];
      var updw     = rw[1];
      [varValue : l, st, updw]
    )
  | WRITE           -> [l.tl, st, writeWorld(l.hd, w)]
  | BINOP (op)      -> [applyBinop(op, l.tl.hd, l.hd) : l.tl.tl, st, w]
  | LD    (varName) -> [st(varName) : l, st, w]
  | ST    (varName) -> [l.tl, st <- [varName, l.hd], w]
  | CONST (value)   -> [value : l, st, w]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (varName)         -> singletonBuffer(LD(varName))
  | Const (value)           -> singletonBuffer(CONST(value))
  | Binop (op, left, right) -> compileExpr(left) <+> compileExpr(right) <+> singletonBuffer(BINOP(op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (varName, expr) -> compileExpr(expr) <+> singletonBuffer(ST(varName))
  | Seq   (fst, snd)      -> compileSM(fst) <+> compileSM(snd)
  | Skip                  -> emptyBuffer()
  | Read  (varName)       -> singletonBuffer(READ) <+> singletonBuffer(ST(varName))
  | Write (expr)          -> compileExpr(expr) <+> singletonBuffer(WRITE)
  esac
}
