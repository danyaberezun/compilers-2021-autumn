-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, returns a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Interpret config parameter change for eval
  fun evalUpdateConfiguration(c @ [stack, callStack, st, world], insn, insnsTail) {
    case insn of
      READ -> 
        case readWorld(world) of 
          [v, newWorld] -> [v : stack, callStack, st, newWorld]
        esac
    | WRITE -> 
        case stack of
          z : newStack -> [newStack, callStack, st, writeWorld(z, world)]
        esac
    | BINOP (op) -> 
        case stack of 
          y : x : newStackTail -> [
            evalOp(op, x, y) : newStackTail,
            callStack,
            st,
            world
          ]
        esac
    | LD (x) -> [lookup(st, x):stack, callStack, st, world]
    | ST (x) -> 
        case stack of 
          taken : _ -> assign(st, x, taken); [stack, callStack, st, world]
        esac
    | CONST (n) -> [n : stack, callStack, st, world]
    | LABEL (lab) -> c
    | JMP (lab) -> c
    | CJMP (cond, lab) -> 
      case stack of 
        _ : newStack -> [newStack, callStack, st, world]
      esac
    | LDA (x) -> [x : stack, callStack, st, world]  -- TODO: x -> Ref(x)
    | STI -> 
        case stack of 
          n : x : tail -> assign(st, x, n); [n:tail, callStack, st, world]
        esac
    | DROP ->
        case stack of 
          v:tail -> [tail, callStack, st, world]
        esac
    | GLOBAL (x) -> c
    | CALL (funName, n) -> [stack, [st, insnsTail]:callStack, st, world]
    | BEGIN (f, argsCnt, localsCnt) -> 
      case take(stack, argsCnt) of
        [stack, args] -> [
          stack,
          callStack,
          [listArray(args), initArray(localsCnt, fun(_){0})],
          world
        ]
      esac
    | END ->
      case stack of
        {} -> [0 : stack, callStack, st, world]
      | _ -> 
        var newCallStack =
          case callStack of
            {} -> callStack
          | [st, insnsTail] : newCallStack -> newCallStack
          esac;
        var newSt =
          case callStack of
            {} -> st
          | [st, insnsTail] : newCallStack -> st
          esac;
        [stack, newCallStack, newSt, world]
      esac
    esac
  }

  ------------------------------------------------------------------------------
  -- <From A06>                                                               --
  ------------------------------------------------------------------------------

  -- Interpret insn parameter change for eval.
  fun evalUpdateInsns(stack, callStack, insn, insnsTail) {
    case insn of
      READ -> insnsTail
    | WRITE -> insnsTail
    | BINOP (op) -> insnsTail
    | LD (x) -> insnsTail
    | ST (x) -> insnsTail
    | CONST (n) -> insnsTail
    | LABEL (lab) -> insnsTail
    | JMP (lab) -> fromLabel(env, lab)
    | CJMP (cond, lab) -> 
      case stack of 
        0:tail -> 
          case cond of 
            "z" -> fromLabel(env, lab) |
            "nz" -> insnsTail
          esac
        | nz:tail -> 
          case cond of 
            "nz" -> fromLabel(env, lab) |
            "z" -> insnsTail
          esac
      esac
    | LDA (x) -> insnsTail
    | STI -> insnsTail
    | DROP -> insnsTail
    | GLOBAL (x) -> insnsTail
    | CALL (funName, n) -> fromLabel(env, funName)
    | BEGIN(f, argsCnt, localsCnt) -> insnsTail
    | END ->
      case stack of
        {} -> insn : insnsTail
      | _ ->
        case callStack of
          {} -> {}
        | [_, insnsTail]:cst -> insnsTail
        esac
      esac
    | _ -> failure(
             "Operation %s is not supported at evalUpdateInsns",
             showSMInsn(insn)
           )
    esac
  }

  ------------------------------------------------------------------------------
  -- <\from A06>                                                              --
  ------------------------------------------------------------------------------

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c @ [stack, cst, st@[args, locs], world], insns) {
    case insns of
      {} -> c
    | insn : insnsTail ->
      eval(
        evalUpdateConfiguration(c, insn, insnsTail),
        evalUpdateInsns(stack, cst, insn, insnsTail)
      )
    esac
  }
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  ------------------------------------------------------------------------------
  -- <From A06>                                                               --
  ------------------------------------------------------------------------------

  fun compileFunctions([funs, envE]) {
    fun compileFunction(Fun (name, args, body, state),
                        labelsGenerated @ [lab, env]) {
      var beginFuncEnv = env.beginFun(state);
      var addArgsEnv = addArgs(beginFuncEnv, args);
      case compile (lab, addArgsEnv, body) of
        [labUsed, env, code] ->
          var argsCnt = size(args);
          var locals = getLocals(env);
          var compiled =
            singletonBuffer(LABEL(name))
            <+ BEGIN(name, argsCnt, locals)
            <+> code
            <+> label (lab, labUsed)
            <+ END;
          [env, compiled]
      esac
    }
    case funs of
      func : restFuncs ->
        case compileFunction(func, genLabel(envE)) of
          [env, codeFun] ->
            case getFuns(env) of
              [innerFuns, envE] ->
                var currFuns = innerFuns +++ restFuncs;
                case compileFunctions([currFuns, envE]) of
                  [codeFuns, env] ->
                    var compiled = codeFun <+> codeFuns;
                    [compiled, env]
                esac
            esac
        esac
    | {} -> [emptyBuffer(), envE]
    esac
  }

  ------------------------------------------------------------------------------
  -- <\From A06>                                                              --
  ------------------------------------------------------------------------------ 

  fun compile (lab, env, stmt) {
    ----------------------------------------------------------------------------
    -- <From A06>                                                             --
    ----------------------------------------------------------------------------

    fun compileIgnore(expr, labelsGenerated @ [lab, env]) {
      case compile(lab, env, expr) of
        [labIsUsed, env, exprCompiled] ->
          var compiled = exprCompiled
            <+> label(lab, labIsUsed)
            <+ DROP;
          [false, env, compiled]
      esac
    }

    fun compileBinOp(op, expr1, expr2) {
      case env.genLabel of
        [lab, env] ->
          case compile(lab, env, Seq (expr1, expr2)) of
            [labIsUsed, env, seqCompiled] ->
              var compiled = seqCompiled <+> label(lab, labIsUsed) <+ BINOP(op);
              [false, env, compiled]
          esac
      esac
    }

    fun compileRead(x) {
      var compiled = singletonBuffer(READ) <+ ST (lookupVar(env, x)) <+ DROP;
      [false, env, compiled]
    }

    fun compileWrite(expr) {
      case compile(lab, env, expr) of
        [labIsUsed, env, exprCompiled] ->
          var compiled = exprCompiled <+> label(lab, labIsUsed) <+ WRITE;
          [false, env, compiled]
      esac
    }

    fun compileAssn(refE, toAssignExpr) {
      case env.genLabel of
        [eLab, env] ->
          case compile(eLab, env, Seq (refE, toAssignExpr)) of
            [labIsUsed, env, toAssignExprCompiled] ->
              var compiled = toAssignExprCompiled
                <+> label(eLab, labIsUsed)
                <+ STI;
              [false, env, compiled]
          esac
      esac
    }

    fun compileSeq(expr1, expr2, labelsGenerated @ [expr2Lab, env]) {
      case compile (expr2Lab, env, expr1) of
        [expr2LabIsUsed, env, expr1Compiled] ->
          case compile (lab, env, expr2) of
            [labIsUsed, env, expr2Compiled] ->
              var compiled = expr1Compiled
                <+> label (expr2Lab, expr2LabIsUsed)
                <+> expr2Compiled;
              [labIsUsed, env, compiled]
          esac
      esac
    }

    fun compileIf(conditionExpr, thenExpr, elseExpr,
                  labelsGenerated @ [falseLab, condLab, env]) {
      case compile (lab, env, thenExpr) of
        [_, env, thenExprCompiled] ->
          case compile (lab, env, elseExpr) of
            [_, env, elseExprCompiled] ->
              case compile(condLab, env, conditionExpr) of
                [condLabUsed, env, condCode] ->
                  var compiled = condCode
                    <+> label(condLab, condLabUsed)
                    <+ CJMP ("z", falseLab)
                    <+> thenExprCompiled
                    <+ JMP (lab)
                    <+ LABEL (falseLab)
                    <+> elseExprCompiled;
                  [true, env, compiled]
              esac
          esac
      esac
    }

    fun compileWhile(conditionExpr, loopExpr,
                     labelsGenerated @ [cycleLab, condLab, env]) {
      case compile (cycleLab, env, loopExpr) of
        [_, env, loopExprCompiled] ->
          case compile(condLab, env, conditionExpr) of
            [condLabUsed, env, conditionExprCompiled] ->
              var compiled = singletonBuffer(LABEL (cycleLab))
                <+> conditionExprCompiled
                <+> label(condLab, condLabUsed)
                <+ CJMP("z", lab)
                <+> loopExprCompiled
                <+ JMP(cycleLab);
              [true, env, compiled]
          esac
      esac
    }

    fun compileDoWhile(loopExpr,
                       conditionExpr,
                       labelsGenerated @ [cycleLab, condLab, env]) {
      case compile (cycleLab, env, loopExpr) of
        [_, env, loopExprCompiled] ->
          case compile(condLab, env, conditionExpr) of
            [condLabUsed, env, conditionExprCompiled] ->
              var compiled = singletonBuffer(LABEL (cycleLab))
                <+> loopExprCompiled
                <+> conditionExprCompiled
                <+> label(condLab, condLabUsed)
                <+ CJMP ("nz", cycleLab);
              [false, env, compiled]
          esac
      esac
    }

    fun compileScope(defs, expr, labelGenerated @ [scopeLab, env]) {
      fun addDefs(env, defs) {
        fun addDefImpl ([funs, env, code], def) {
          fun addGlobalVars(env, vars) {
            case isGlobal(env) of
              _ -> 
                foldl(fun (code, v) { code <+ GLOBAL (v) }, emptyBuffer(), vars)
            | 0 -> emptyBuffer()
            esac
          }
          case def of
            Var (ds) -> 
              var generatedCode = code <+> addGlobalVars(env, ds);
              [funs, addVars(env, ds), generatedCode]
          | Fun (name, args, body) ->
            case genFunLabel(env, name) of
              [funLab, env] ->
                var newFuns = Fun(funLab, args, body):funs;
                var newEnv = addFun(env, name, funLab, size(args));
                [newFuns, newEnv, code]
            esac
          esac
        }
        foldl(
          fun ([funs, env, code], def) { addDefImpl([funs, env, code], def) },
          [{}, env, emptyBuffer()],
          defs
        )
      }
      case addDefs(beginScope(env), defs) of
        [funs, env, defCompiled] ->
          var envWithFuns =
            foldl(
              fun(env, Fun(funLab, args, body)) {
                rememberFun(env, funLab, args, body)
              },
              env,
              funs
            );
          case compile(scopeLab, envWithFuns, expr) of
            [scopeLabIsUsed, env, exprCompiled] -> 
              var compiled = defCompiled
                <+> exprCompiled
                <+> label(scopeLab, scopeLabIsUsed);
              [false, endScope(env), compiled]
          esac
      esac
    }

    fun compileCall(name, exprs, labelGenerated @ [genLab, env]) {
      var callExpr = foldl(
                       fun (stmt, e) { Seq(stmt, e) },
                       Skip,
                       exprs
                     );
      case compile(genLab, env, callExpr) of
        [genLabIsUsed, env, callCompiled] ->
          case lookupFun(env, name) of
            Fun (name, nargs) ->
              var compiled = callCompiled
                <+> label(genLab, genLabIsUsed)
                <+ CALL(name, nargs);
              [false, env, compiled]
          esac
      esac
    }

    ----------------------------------------------------------------------------
    -- <\From A06>                                                            --
    ----------------------------------------------------------------------------

    case stmt of
      Skip -> [false, env, emptyBuffer ()]                                  |
      Var (x) -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]     |
      Ref (x) -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]    |
      Const (n) -> [false, env, singletonBuffer (CONST (n))]                |
      Ignore (e) -> compileIgnore(e, env.genLabel)                          |
      Binop (op, e1, e2) -> compileBinOp(op, e1, e2)                        |
      Read  (x) -> compileRead(x)                                           |
      Write (e) -> compileWrite(e)                                          |
      Assn (refE, e) -> compileAssn(refE, e)                                |
      Seq (e1, e2) -> compileSeq(e1, e2, env.genLabel)                      |
      If (cond, e1, e2) -> compileIf(cond, e1, e2, env.genLabels(2))        |
      While (cond, e) -> compileWhile(cond, e, env.genLabels(2))            |
      DoWhile (e, cond) -> compileDoWhile(e, cond, env.genLabels(2))        |
      Scope (defs, expr) -> compileScope(defs, expr, env.genLabel)          |
      Call (name, exprs) -> compileCall(name, exprs, env.genLabel)          |
      _ -> failure ("%s is not implemented\n", string(stmt))   
    esac
  }

  case initCompEnv().beginScope.addFun ("read"  , "$read"  , 0)
                               .addFun ("write" , "$write" , 1)
                               .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of
         [endLabUsed, env, code] ->
          case compileFunctions(getFuns(env)) of 
            [codeFuns, _] ->
              getBuffer (
                singletonBuffer(LABEL("main"))
                  <+ BEGIN("main", 0, getLocals(env)) 
                  <+> code
                  <+> label (endLab, endLabUsed)
                  <+ END 
                  <+> codeFuns
              )
          esac
      esac
  esac
}
