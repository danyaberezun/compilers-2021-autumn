-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
public fun eval (env, conf@[stack, state, world], prog) {
  case prog of
    {} -> conf
  | ins : prog ->
      case ins of
        READ -> case readWorld (world) of [x, world] -> eval (env, [x : stack, state, world], prog) esac
      | WRITE -> case stack of x : stack -> eval (env, [stack, state, writeWorld (x, world)], prog) esac
      | CONST (x) -> eval (env, [x : stack, state, world], prog)
      | LD (name) -> eval (env, [state (name) : stack, state, world], prog)
      | ST (name) -> case stack of x : stack -> eval (env, [stack, state <- [name, x], world], prog) esac
      | BINOP (op) ->
          case stack of y : x : stack ->
              var z = case op of
                "+" -> x + y
              | "-" -> x - y
              | "*" -> x * y
              | "/" -> x / y
              | "%" -> x % y
              | "<" -> x < y
              | ">" -> x > y
              | "<=" -> x <= y
              | ">=" -> x >= y
              | "==" -> x == y
              | "!=" -> x != y
              | "&&" -> x && y
              | "!!" -> x !! y
              esac;
              eval (env, [z : stack, state, world], prog)
          esac
      | LABEL (lab) -> eval (env, conf, prog)
      | JMP (lab) -> eval (env, conf, env.fromLabel (lab))
      | CJMP ("nz", lab) -> case stack of x : stack ->
          if x != 0
          then eval (env, conf, env.fromLabel (lab))
          else eval (env, conf, prog)
          fi esac
      | CJMP ("z", lab) -> case stack of x : stack ->
          if x == 0
          then eval (env, conf, env.fromLabel (lab))
          else eval (env, conf, prog)
          fi esac
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name) -> singletonBuffer (LD (name))
  | Const (x) -> singletonBuffer (CONST (x))
  | Binop (op, ex, ey) -> compileExpr (ex) <+> compileExpr (ey) <+ BINOP (op)
  esac
}

fun compileStmt (stmt) {
  case stmt of
    Skip -> {}
  | Assn (name, expr) -> ST (name) : compileExpr (expr)
  | Seq (stmt1, stmt2) -> compileStmt (stmt2) +++ compileStmt (stmt1)
  | Read (name) -> {ST (name), READ}
  | Write (expr) -> WRITE : compileExpr (expr)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, bodyThen, bodyElse) ->
        case env.genLabel of [elseBegLab, env] ->
        case compile (lab, env, bodyThen) of [_, env, codeBodyThen] ->
        case compile (lab, env, bodyElse) of [_, env, codeBodyElse] ->
          [ true, env,
            compileExpr (cond)
            <+ CJMP ("z", elseBegLab)
            <+> codeBodyThen
            <+ JMP (lab)
            <+ LABEL (elseBegLab)
            <+> codeBodyElse
          ]
        esac esac esac
    | While (cond, body) ->
        case env.genLabel of [bodyBegLab, env] ->
        case env.genLabel of [condLab, env] ->
        case compile (condLab, env, body) of [_, env, codeBody] ->
          [ false, env,
            emptyBuffer ()
            <+ JMP (condLab)
            <+ LABEL (bodyBegLab)
            <+> codeBody
            <+ LABEL (condLab)
            <+> compileExpr (cond)
            <+ CJMP ("nz", bodyBegLab)
          ]
        esac esac esac
    | DoWhile (cond, body) ->
        case env.genLabel of [bodyBegLab, env] ->
        case env.genLabel of [condLab, env] ->
        case compile (condLab, env, body) of [_, env, codeBody] ->
          [ false, env,
            emptyBuffer ()
            <+ LABEL (bodyBegLab)
            <+> codeBody
            <+ LABEL (condLab)
            <+> compileExpr (cond)
            <+ CJMP ("nz", bodyBegLab)
          ]
        esac esac esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
