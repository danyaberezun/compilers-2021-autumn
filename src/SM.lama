-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, icfg, iinsns) {
  -- returns next cfg and insns
  fun next(cfg@[stack, state, world], insns) {
    -- printf("stack: %s, world: %s, insns: %s\n", stack.string, world.string, insns.string);
    case insns of
      {} -> [cfg, insns]
    | instr:insns -> fun evalNext(cfg){[cfg, insns]}
          case instr of
            READ -> case readWorld(world) of [n, world] -> evalNext([n:stack, state, world]) esac

          | WRITE -> case stack of n:stack -> evalNext([stack, state, writeWorld(n, world)]) esac

          -- arguments in binop taken  VVVVV  in reverse order 
          | BINOP (s) -> case stack of 
                b:a:stack -> evalNext([evalOp(s, a, b):stack, state, world])
              | _ -> failure("No 2 vaues on stack for binop") esac

          | LD (x) -> evalNext([state(x):stack, state, world])
          | LDA(x) -> evalNext([x:stack, state, world])

          | ST (x) -> case stack of 
              a:stack -> evalNext([stack, state <- [x, a], world])
            | _ -> failure("Empty stack, but trying load") esac
          | STI -> case stack of 
              v:x:stack -> evalNext([stack, state <- [x, v], world]) 
            esac
          | DROP -> case stack of n:stack -> evalNext([stack, state, world]) esac
          | DUP ->  case stack of n:stack -> evalNext([n:n:stack, state, world]) esac

          | CONST (n) -> evalNext([n:stack, state, world])

          | JMP (lable) -> [cfg, fromLabel(env, lable)] 

          | CJMP (NZ, lable) -> case stack of n:stack -> 
                  if n != 0 then [[stack, state, world], fromLabel(env, lable)] 
                            else evalNext([stack, state, world]) 
                  fi
              | _ -> failure("Empty stack, but trying to cjump")
            esac

          | LABEL (label) -> evalNext(cfg)
          | _ -> failure("Unexpected stack machine instruction: %s", instr.string)
        esac esac
  }
  var cfg = icfg;
  var insns = iinsns;
  while insns != {} do
    case next(cfg, insns) of [newCfg, newInsns] -> 
      cfg := newCfg; insns := newInsns esac
  od;
  cfg
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- printf("Running stack machine:\n%s\n", showSM(insns));
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (s)        -> case compile (Nolab, env, s) of [_, env, sCode] -> 
          [false, env, sCode <+ DROP]
        esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | Read   (x)        -> case compile(Nolab, env, x) of [_, env, xCode] -> 
            [false, env, xCode <+ READ <+ STI]
          esac
    | Write  (n)        -> case compile(Nolab, env, n) of [_, env, nCode] -> 
            [false, env, nCode <+ WRITE]
          esac
    | Assn   (x, e)     -> case compile(Nolab, env, x) of [_, env, xCode] -> 
            case compile(Nolab, env, e) of [_, env, eCode] -> 
              [false, env, xCode <+ DUP <+> eCode <+ STI ]
            esac
          esac
    | Binop  (op, l, r) -> case compile(Nolab, env, l) of [_, env, lCode] -> 
            case compile(Nolab, env, r) of [_, env, rCode] -> 
              [false, env, lCode <+> rCode <+ BINOP (op)]
            esac
          esac
    | exp                 ->  failure ("compileSM not implemented for expr: %s\n", exp.string)
    esac
  }

  -- printf("Compiling stack machine code for:\n%s\n", stmt.string);
  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
