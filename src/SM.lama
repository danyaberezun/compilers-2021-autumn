-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack,state,world], insns) {
    case insns of head:tail -> 
        case head of
            CONST (x) -> eval([x:stack, state, world], tail)
            | READ -> case readWorld(world) of [n, newWorld] -> eval([n:stack, state, newWorld], tail) esac
            | WRITE -> case stack of value:restStack -> eval([restStack, state, writeWorld(value, world)], tail) esac
            | LD (x) -> eval([state(x):stack, state, world], tail)
            | ST (x) -> case stack of value:restStack -> eval([restStack, state <- [x, value], world], tail) esac
            | BINOP (op) -> case stack of second:first:restStack -> eval([evalExpr(state, Binop(op, Const(first),
            Const(second))) : restStack, state, world], tail) esac
       esac
     | {} -> c 
   esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
    case expr of
        Var (varName) -> {LD (varName)} 
        | Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP (op)}
        | Const (x) -> {CONST (x)}
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    case stmt of
        Assn (lable, expr) -> compileExpr (expr) +++ (ST(lable) : {})
      | Read (lable) -> READ : ST (lable) : {}
      | Write (expr) -> compileExpr (expr) +++ (WRITE : {})
      | Seq (fst_stmt, snd_stmt) -> compileSM (fst_stmt) +++ compileSM(snd_stmt)
      | Skip -> {}
    esac
}
