-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
public fun eval (env, conf@[stack, state, world], prog) {
  case prog of
    {} -> conf
  | ins : prog ->
      case ins of
        READ -> case readWorld (world) of [x, world] -> eval (env, [x : stack, state, world], prog) esac
      | WRITE -> case stack of x : stack -> eval (env, [stack, state, writeWorld (x, world)], prog) esac
      | CONST (x) -> eval (env, [x : stack, state, world], prog)
      | LD (name) -> eval (env, [state (name) : stack, state, world], prog)
      | ST (name) -> case stack of x : stack -> eval (env, [x : stack, state <- [name, x], world], prog) esac
      | BINOP (op) ->
          case stack of y : x : stack ->
              var z = evalOp (op, x, y);
              eval (env, [z : stack, state, world], prog)
          esac
      | LABEL (lab) -> eval (env, conf, prog)
      | JMP (lab) -> eval (env, conf, env.fromLabel (lab))
      | CJMP ("nz", lab) -> case stack of x : stack ->
          if x != 0
          then eval (env, conf, env.fromLabel (lab))
          else eval (env, conf, prog)
          fi esac
      | CJMP ("z", lab) -> case stack of x : stack ->
          if x == 0
          then eval (env, conf, env.fromLabel (lab))
          else eval (env, conf, prog)
          fi esac
      | DROP -> case stack of x : stack -> eval (env, [stack, state, world], prog) esac
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileInner (env, ex) {
    case env.genLabel of [lab, env] ->
      case compile (lab, env, ex) of [labUsed, env, exCode] ->
        [ env, exCode <+> label (lab, labUsed) ]
      esac
    esac
  }

  fun makeLoop (lab, env, cond, body, skipInit) {
    case env.genLabel of [bodyBegLab, env] ->
    case env.genLabel of [condLab, env] ->
    case compile (condLab, env, body) of [condLabUsed, env, bodyCode] ->
    case compile (lab, env, cond) of [labUsed, env, condCode] ->
      [ labUsed , env
      , if skipInit
        then singletonBuffer (JMP (condLab))
        else emptyBuffer()
        fi
        <+ LABEL (bodyBegLab)
        <+> bodyCode
        <+> label (condLab, skipInit !! condLabUsed)
        <+> condCode
        <+ CJMP ("nz", bodyBegLab)
      ]
    esac esac esac esac
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (ex) ->
        case compileInner (env, ex) of [env, exCode] ->
          [ false, env, exCode <+ DROP ]
        esac
    | Seq (lhs, rhs) ->
        case compileInner (env, lhs) of [env, lhsCode] ->
          case compile (lab, env, rhs) of [labUsed, env, rhsCode] ->
            [ labUsed, env, lhsCode <+> rhsCode ]
          esac
        esac
    | Assn (Ref (x), rhs) ->
        case compileInner (env, rhs) of [env, rhsCode] ->
          [ false, env, rhsCode <+ ST (x) ]
        esac
    | Assn (lhs, rhs) ->
        case compileInner (env, rhs) of [env, rhsCode] ->
        case compileInner (env, lhs) of [env, lhsCode] ->
          [ false, env, rhsCode <+> lhsCode <+ STI ]
        esac esac
    | Binop (op, lhs, rhs) ->
        case compileInner (env, lhs) of [env, lhsCode] ->
        case compileInner (env, rhs) of [env, rhsCode] ->
          [ false, env, lhsCode <+> rhsCode <+ BINOP (op) ]
        esac esac
    | If (cond, bodyThen, bodyElse) ->
        case compileInner (env, cond) of [env, condCode] ->
        case env.genLabel of [elseBegLab, env] ->
        case compile (lab, env, bodyThen) of [_, env, bodyThenCode] ->
        case compile (lab, env, bodyElse) of [_, env, bodyElseCode] ->
          [ true , env
          , condCode
            <+ CJMP ("z", elseBegLab)
            <+> bodyThenCode
            <+ JMP (lab)
            <+ LABEL (elseBegLab)
            <+> bodyElseCode
          ]
        esac esac esac esac
    | While (cond, body) -> makeLoop (lab, env, cond, body, true)
    | Read (name) -> [false, env, singletonBuffer (READ) <+ ST (name) <+ DROP]
    | Write (ex) ->
        case compileInner (env, ex) of [env, exCode] ->
          [false, env, exCode <+ WRITE]
        esac
    | _ -> failure ("Cannot compile %s\n", string(stmt))
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
