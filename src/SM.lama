-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cst, s, w], insns) {
    case insns of
      {} -> c
    | ins:prog ->
        case ins of
          READ ->
            case readWorld(w) of
              [value, w] -> eval([value : stack, cst, s, w], prog)
            esac
        | WRITE ->
          case stack of
            z:st -> eval([st, cst, s, writeWorld(z, w)], prog)
          esac
        | BINOP(op) ->
          case stack of
            y:x:st -> eval([evalOp(op, x, y) : st, cst, s, w], prog)
          esac
        | LD(x) -> eval([s.lookup(x) : stack, cst, s, w], prog)
        | LDA(x) -> eval([x : stack, cst, s, w], prog)
        | ST(x) ->
          case stack of
            z:st ->
              s.assign(x, z);
              eval(c, prog)
          esac
        | STI ->
          case stack of
            v:x:st ->
              s.assign(x, v);
              eval([v:st, cst, s, w], prog)
          esac
        | CONST(n) -> eval([n : stack, cst, s, w], prog)
        | LABEL(l) -> eval(c, prog)
        | JMP(l) -> eval(c, env.fromLabel(l))
        | CJMP(j, l) ->
          case stack of
            z:st ->
              var jmp = case j of
                "z"  -> z == 0
              | "nz" -> z != 0
              esac;
              eval([st, cst, s, w], if jmp then env.fromLabel(l) else prog fi)
          esac
        | DROP ->
          case stack of
            z:st -> eval([st, cst, s, w], prog)
          esac
        | BEGIN(_, na, nl) ->
          case take(stack, na) of
            [stack, args] ->
              case foldl(fun ([s, n], arg) { s.assign(Arg(n), arg); [s, n+1] }, [makeState(na, nl), 0], args) of
                [s, _] -> eval([stack, cst, s, w], prog)
              esac
          esac
        | END ->
          case cst of
            {} -> c
          | [s, q]:cst -> eval([stack, cst, s, w], q)
          esac
        | CALL(f, _) -> eval([stack, [s, prog] : cst, s, w], env.fromLabel(f))
        | GLOBAL(name) ->
          s.assign(Glb(name), 0);
          eval(c, prog)
        esac
    esac
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compileMany (lab, env, exprs) {
    case exprs of
      {e}    -> compile (lab, env, e)
    | e : es ->
        case env.genLabel of
          [eLab, env] ->
            case compile (eLab, env, e) of
              [eUsed, env, eCode] ->
                 case compileMany (lab, env, es) of
                   [labUsed, env, esCode] -> [labUsed, env, eCode <+> label (eLab, eUsed) <+> esCode]
                 esac
            esac
        esac
    esac
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip -> [false, env, emptyBuffer()]
    | Var(x) -> [false, env, singletonBuffer(LD(lookupVar(env, x)))]
    | Ref(x) -> [false, env, singletonBuffer(LDA(lookupVar(env, x)))]
    | Const(n) -> [false, env, singletonBuffer(CONST(n))]
    | Binop(op, lhs, rhs) ->
        case genLabels(env, 2) of
          [l1, l2, env] ->
            case compile(l1, env, lhs) of
              [l1Used, env, lhsCode] ->
                case compile(l2, env, rhs) of
                  [l2Used, env, rhsCode] ->
                    [false, env, lhsCode <+> label(l1, l1Used) <+> rhsCode <+> label(l2, l2Used) <+ BINOP(op)]
                esac
            esac
        esac
    | Ignore(e) ->
        case genLabel(env) of
          [l, env] ->
            case compile(l, env, e) of
              [used, env, code] -> [false, env, code <+> label(l, used) <+ DROP]
            esac
        esac
    | Read(x) -> [false, env, singletonBuffer(READ) <+ ST(lookupVar(env, x)) <+ DROP]
    | Write(e) ->
        case genLabel(env) of
          [l, env] ->
            case compile(l, env, e) of
              [used, env, code] -> [false, env, code <+> label(l, used) <+ WRITE]
            esac
        esac
    | Assn(x, e) ->
        case genLabels(env, 2) of
          [l1, l2, env] ->
            case compile(l1, env, x) of
              [used1, env, code1] ->
                case compile(l2, env, e) of
                  [used2, env, code2] ->
                    [false, env, code1 <+> label(l1, used1) <+> code2 <+> label(l2, used2) <+ STI]
                esac
            esac
        esac
    | Seq(s1, s2) ->
        case genLabel(env) of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile (lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
    | If(e, s1, s2) ->
        case genLabels(env, 2) of
          [condLab, elseLab, env] ->
            case compile(condLab, env, e) of
              [condUsed, env, condCode] ->
              case compile(lab, env, s1) of
                [_, env, codeThen] ->
                  case compile(lab, env, s2) of
                    [_, env, codeElse] ->
                      [true, env, condCode <+> label(condLab, condUsed) <+ CJMP("z", elseLab)
                          <+> codeThen <+ JMP(lab) <+ LABEL(elseLab) <+> codeElse]
                  esac
              esac
            esac
        esac
    | While(e, s) ->
        case genLabels(env, 3) of
          [stmtLab, condLab, condLab2, env] ->
            case compile(condLab, env, s) of
              [_, env, stmtCode] ->
                case compile(condLab2, env, e) of
                  [condUsed2, env, condCode] ->
                    [false, env, singletonBuffer(JMP(condLab)) <+ LABEL(stmtLab) <+> stmtCode <+
                        LABEL(condLab) <+> condCode <+> label(condLab2, condUsed2) <+ CJMP("nz", stmtLab)]
                esac
            esac
        esac
    | DoWhile(s, e) ->
        case genLabels(env, 3) of
          [stmtLab, condLab, condLab2, env] ->
            case compile(condLab, env, s) of
              [_, env, stmtCode] ->
                case compile(condLab2, env, e) of
                  [condUsed2, env, condCode] ->
                    [false, env, label(stmtLab, true) <+> stmtCode <+
                        LABEL(condLab) <+> condCode <+> label(condLab2, condUsed2) <+ CJMP("nz", stmtLab)]
                esac
            esac
        esac
    | Scope(defs, e) ->
        fun processDef([env, code, funcs], def) {
          case def of
            Var(names) ->
              [
                addVars(env, names),
                if isGlobal(env) then
                  foldl(fun (code, name) { code <+ GLOBAL(name) }, code, names)
                else
                  code
                fi,
                funcs
              ]
          | Fun(name, args, body) ->
              case genFunLabel(env, name) of
                [label, env] -> [addFun(env, name, label, args.size), code, [label, args, body]:funcs]
              esac
          esac
        }
        case foldl(processDef, [beginScope(env), emptyBuffer(), {}], defs) of
          [env, code, funcs] ->
            case foldl(fun (env, [label, args, body]) { rememberFun(env, label, args, body) }, env, funcs) of
              env ->
                case compile(lab, env, e) of
                  [used, env, scopeCode] -> [used, endScope(env), code <+> scopeCode]
                esac
            esac
        esac
    | Call(x, args) ->
        fun compileArg([env, code], argExpr) {
          case genLabel(env) of
            [argLab, env] ->
              case compile(argLab, env, argExpr) of
                [used, env, argCode] -> [env, code <+> argCode <+> label(argLab, used)]
              esac
          esac
        }
        case foldl(compileArg, [env, emptyBuffer()], args) of
          [env, code] ->
            case lookupFun(env, x) of
              Fun(x, a) -> [false, env, code <+ CALL(x, a)]
            esac
        esac
    esac
  }

  fun compileFunctions (env, main) {
    fun iterate (env, funList) {
      case funList of
        {}     -> case getFuns (env) of
                    [{}, env] -> emptyBuffer ()
                  | [fs, env] -> iterate (env, fs)
                  esac
      | Fun (f, args, body, state) : fs ->
          case genLabel (addArgs (beginFun (env, state), args)) of
            [endLab, env] ->
               case compile (endLab, env, body) of
                 [endUsed, env, code] -> 
                    singletonBuffer (LABEL (f)) <+
                    BEGIN (f, args.size, getLocals (env)) <+>
                    code <+>
                    label (endLab, endUsed) <+
                    END <+>
                    iterate (env, fs)
               esac
          esac          
      esac
    }
    
    main <+> iterate (env, {})
  }
    
  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] ->
            getBuffer $
            compileFunctions (env, 
                              singletonBuffer (LABEL ("main")) <+
                              BEGIN ("main", 0, getLocals (env)) <+>
                              code <+>
                              label (endLab, endLabUsed) <+
                              END 
                             )            
       esac
  esac
}
