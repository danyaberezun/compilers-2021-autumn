-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalOneInstr ([stack, state, world], insn) {
  case insn of
    CONST (n) -> [n:stack , state, world]
  | READ -> 
      case readWorld (world) of
        [n, new_world] -> [n:stack, state, new_world]
      esac
  | WRITE ->
      case stack of
        z:zs -> [zs, state, writeWorld (z, world)]
      esac
  | LD (x) -> [(state (x)):stack, state, world]
  | ST (x) -> 
      case stack of
        z:zs -> [zs, state <- [x, z], world]
      esac
  | BINOP (op) -> 
      case stack of
        y:x:s ->
          [countOp(op, x, y):s, state, world] 
      esac
  esac
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | i:is -> eval (evalOneInstr (c, i), is)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> singletonBuffer (LD (x))
  | Const (x) -> singletonBuffer (CONST (x))
  | Binop (op, x, y) -> (compileExpr (x) <+> compileExpr (y)) <+ BINOP (op)
  esac
}

fun compileSMrec (stmt) {
  case stmt of
    Skip -> emptyBuffer ()
  | Assn (x, e) -> compileExpr (e) <+ ST (x)
  | Read (x) -> emptyBuffer () <+ READ <+ ST (x)
  | Write (e) -> compileExpr (e) <+ WRITE
  | Seq (s1, s2) -> compileSMrec (s1) <+> compileSMrec (s2)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  compileSMrec (stmt) . getBuffer
}
