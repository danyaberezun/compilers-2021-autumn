-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}
fun evalInsn ([s, st, w], insn) {
  case insn of
      BINOP (op) -> case s of (y:x:ss) -> [evalOp (op, x, y) : ss, st, w] esac
    | CONST (n) -> [n:s, st, w]
    | READ -> case readWorld (w) of [n, ww] -> [n:s, st, ww] esac
    | WRITE -> case s of (z:ss) -> [ss, st, writeWorld (z, w)] esac
    | LD (x) -> [st (x) : s, st, w]
    | ST (x) -> case s of (z:ss) -> [ss, st <- [x, z], w] esac
  esac
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (evalInsn, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (x) -> LD (x)
    | Const (n) -> CONST (n)
    | Binop (op, e1, e2) -> {e1.compileExpr, e2.compileExpr, BINOP (op)}
  esac.deepFlatten
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (x, e) -> {e.compileExpr, ST (x)}
    | Seq (stmt1, stmt2) -> {stmt1.compileSM, stmt2.compileSM}
    | Skip -> {}
    | Read (x) -> {READ, ST (x)}
    | Write (e) -> {e.compileExpr, WRITE}
  esac.deepFlatten
}
