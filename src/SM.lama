-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, world, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, returns a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }


  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, sigma, wrld], insns) {
    
    ----------------------------------------------------------------------------
    -- evalBINOP - evaluate binary operation. Two arguments are taken from stack
    -- in reverse order, binary operation evaluation result is placed instead of
    -- them on stack.
    -- Stack machine BINOP first appears in 02.pdf in course repository.
    -- Parameters:
    -- - op - operation type.
    -- Returns:
    -- - new configuration with updated stack. (Arguments are replaced with
    -- operation result).
    fun evalBINOP(op) {
      case st of
        b : a : restSt -> [evalOp(op, a, b) : restSt, cst, sigma, wrld]
      esac
    }

    ----------------------------------------------------------------------------
    -- evalLD - evaluate variable loading -- save x value to stack.
    -- The value for variable x is lookuped in `sigma state and placed on stack.
    -- Stack machine LD first appears in 02.pdf in course repository.
    -- Parameters:
    -- - x - variable.
    -- Returns:
    -- - new configuration with variable found and placed on stack.
    fun evalLD(x) {
      [lookup(sigma, x) : st, cst, sigma, wrld]
    }

    ----------------------------------------------------------------------------
    -- evalLDA - evaluate value address loading.
    -- Value address is placed on stack.
    -- Stack machine LDA first appears in 05.pdf of course repository.
    -- Parameters:
    -- - x - value address.
    -- Returns:
    -- - new configuration with x address placed on stack.
    fun evalLDA(x) {
      [x : st, cst, sigma, wrld]
    }

    ----------------------------------------------------------------------------
    -- evalST - evaluate store operation.
    -- Top stack element is taken and remembered as x variable (in sigma).
    -- Stack machine ST first appears in 02.pdf in course repository.
    -- Parameters:
    -- - x - variable to assign to.
    -- Returns:
    -- - new configuration with one value taken from stack and saved to x
    -- variable.
    fun evalST(x) {
      assign(sigma, x, hd(st));
      [tl(st), cst, sigma, wrld]
    }

    ----------------------------------------------------------------------------
    -- evalSTI - evaluate storing by indirect address.
    -- First element of stack is taken as value, second - as variable (address).
    -- Value is saved to variable.
    -- Stack machine STI first appears in 05.pdf in course repository.
    -- Returns:
    -- - new configuration with modified stack. Value and variable are replaced
    -- with value.
    fun evalSTI() {
      case st of
        v : x : restSt ->
          assign(sigma, x, v);
          [v : restSt, cst, sigma, wrld]
      esac
    }

    ----------------------------------------------------------------------------
    -- evalSEXP - evaluate S-expression (symbolic expression).
    -- Takes elements from stack, then places them on stack inside Sexp.
    -- Also takes one element from stack (TODO: idk why).
    -- Stack machine SEXP first appears in 09.pdf in course repository.
    -- Parameters:
    -- - name - variable.
    -- - n - length.
    -- Returns:
    -- - updated configuration.
    fun evalSEXP(name, n) {
      case take(st, n) of
        [updatedStack, items] -> [
            Sexp(name, listArray(items)) : tl(updatedStack),
            cst,
            sigma,
            wrld
          ]
      esac
    }

    ----------------------------------------------------------------------------
    -- evalCJMP - evaluate jump operation (just update stack).
    -- In fact, just drops one element from stack.
    -- Parameters:
    -- - c - condition
    -- - l - label
    -- Returns:
    -- - updated configuration
    fun evalCJMP() {
      evalDROP()
    }

    ----------------------------------------------------------------------------
    -- evalCJMPIns - evaluate jump instructions list update.
    -- Parameters:
    -- - c - condition
    -- - l - lavel
    -- - restIns - list of instructions before operation evaluation.
    -- Returns:
    -- - updated instructions list.
    fun evalCJMPIns(c, l, restIns) {
      case c of
        "z" -> 
          case hd(st) of
            0 -> fromLabel(env, l)
          | _ -> restIns
          esac
      | "nz" -> 
          case hd(st) of
            0 -> restIns
          | _ -> fromLabel(env, l)
          esac
      esac
    }

    ----------------------------------------------------------------------------
    -- evalCall - evaluate function call.
    -- Parameters:
    -- - f - called function.
    -- - restIns - instructions list tail.
    -- Returns:
    -- - updated configuration with changed call stack.
    fun evalCALL(f, restIns) {
      [st, [sigma, restIns] : cst, sigma, wrld]
    }

    ----------------------------------------------------------------------------
    -- evalBEGIN - evaluate function beginning.
    -- Creates new `sigma taking `argsCnt arguments from stack. And saving them
    -- as arguments in sigma. Returns updated condition with new `sigma.
    -- Stack machine BEGIN is first described in 07.pdf in course repository.
    -- Parameters:
    -- - argsCnt - arguments count.
    -- - localsCnt - local variables count.
    -- Returns:
    -- - updated configuration.
    fun evalBEGIN(argsCnt, localsCnt) {
      case take(st, argsCnt) of
        [restSt, args] ->
          sigma := makeState(argsCnt, localsCnt);
          foldl(
            fun (i, x) {
              assign(sigma, Arg(i), x);
              i + 1
            },
            0,
            args
          );
          [restSt, cst, sigma, wrld]
      esac
    }

    ----------------------------------------------------------------------------
    -- evalGLOBAL - evaluate global variable declaration.
    -- Assigns 0 to x as global variable.
    -- Stack machine GLOBAL is first described in 07.pdf in course repository.
    -- Parameters:
    -- - x - global variable.
    -- Returns:
    -- - New configuration with updated stack.
    fun evalGLOBAL(x) {
      assign(sigma, Glb(x), 0);
      [st, cst, sigma, wrld]
    }

    ----------------------------------------------------------------------------
    -- evalEND - evaluate end of a function.
    -- Takes old sigma and old instructions tail from stack and returns 
    -- configuration.
    -- Stack machine END is first described in 07.pdf in course repository.
    -- Returns:
    -- - Updated configuration with updated stack (if it was not empty before
    -- call).
    fun evalEND() {
      case cst of
        {} -> c
      | [sigma, restIns] : restCst -> [st, restCst, sigma, wrld]
      esac
    }

    ----------------------------------------------------------------------------
    -- evalENDIns - evaluate end of a function (instructions part).
    -- Gets needed instructions list.
    -- Stack machine END is first described in 07.pdf in course repository.
    -- Returns:
    -- - Restored instructions list.
    fun evalENDIns() {
      case cst of
        {} -> {}
      | [_, restIns] : restCst -> restIns
      esac
    }

    ----------------------------------------------------------------------------
    -- evalDROP - just skip one element of stack.
    -- Stack machine END is first described in 05.pdf in course repository.
    -- Returns:
    -- - Updated configuration with updated stack.
    fun evalDROP() {
      [tl(st), cst, sigma, wrld]
    }


    ----------------------------------------------------------------------------
    -- evalARRAY - evaluate array.
    -- Stack machine ARRAY is described in 08.pdf in course repository.
    -- Takes one additional element from stack and does nothing with it.
    -- Parameters:
    -- - n - array length.
    -- Returns:
    -- - Updated state with new stack: n elements are taken from stack and
    -- placed inside one node of a stack.
    fun evalARRAY(n) {
      case take(st, n) of
        [st, items] -> [listArray(items) : tl(st), cst, sigma, wrld]
      esac
    }

    ----------------------------------------------------------------------------
    -- evalSTA - evaluate assigning a value to an element of an array.
    -- Stack machine STA is described in 08.pdf in course repository.
    -- Returns:
    -- - New state with updated stack.
    fun evalSTA() {
      case st of
        v : i : arr : restSt ->
          case arr of
            Sexp (_, arr) -> arr[i]
          | _ -> arr[i]
          esac := v;
          [v : restSt, cst, sigma, wrld]
      esac
    }

    ----------------------------------------------------------------------------
    -- evalELEM - evaluate taking an element of an array or s-expression.
    -- Stack machine ELEM is described in 08.pdf in course repository.
    -- Returns:
    -- - New state with updated stack.
    fun evalELEM() {
      case st of
        i : arr : stackTail ->
          case arr of
            Sexp(_, arr) -> [arr[i] : stackTail, cst, sigma, wrld]
          | _ -> [arr[i] : stackTail, cst, sigma, wrld]
          esac
      esac
    }

    ----------------------------------------------------------------------------
    -- evalBUILTIN - evaluate builtin function.
    -- Parameters:
    -- - f - builtin function.
    -- - argsCnt - number of arguments.
    -- Returns:
    -- - New state with updated stack.
    fun evalBUILTIN(f, argsCnt) {
      case take(st, argsCnt) of
        [st, args] ->
          case evalBuiltin(f, args, wrld) of
            [res, wrld] -> [res : st, cst, sigma, wrld]
          esac
      esac
    }

    if (insns == {}) then c else (
      var i = hd(insns);
      var restIns = tl(insns);
      case i of 
        BINOP(op) -> eval(evalBINOP(op), restIns)
      | LD(x) -> eval(evalLD(x), restIns)
      | LDA(x) -> eval(evalLDA(x), restIns)
      | ST(x) -> eval(evalST(x), restIns)
      | STI -> eval(evalSTI(), restIns)
      | SEXP (name, n) -> eval(evalSEXP(name, n), restIns)
      | CONST(n) -> eval ([n : st, cst, sigma, wrld], restIns)
      | LABEL(_) -> eval(c, restIns)
      | JMP(l) -> eval(c, fromLabel(env, l))
      | CJMP(c, l) -> eval(evalCJMP(), evalCJMPIns(c, l, restIns))
      | CALL(f, n) -> eval(evalCALL(f, restIns), fromLabel(env, f))
      | BEGIN(f, a, l) -> eval(evalBEGIN(a, l), restIns)
      | GLOBAL(x) -> eval(evalGLOBAL(x), restIns)
      | END -> eval(evalEND(), evalENDIns())
      | DUP -> eval ([hd (st) : st, cst, sigma, wrld], restIns)
      | DROP -> eval (evalDROP(), restIns)
      | STRING(s) -> eval([s : st, cst, sigma, wrld], restIns)
      | ARRAY(n) -> eval(evalARRAY(n), restIns)
      | STA -> eval(evalSTA(), restIns)
      | ELEM -> eval(evalELEM(), restIns)
      | BUILTIN(f, an) -> eval(evalBUILTIN(f, an), restIns)
      esac
    ) fi
  }
  
  eval ([{}, {}, makeState (0, 0), world], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | Arg (i) -> Arg (i)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun addDefinitions(env, defs) {
    foldl(fun([code, env], def) {
      case def of
        Var (vars) ->
          var newEnv = addVars(env, vars);
          var newCode =
            if isGlobal(env)
            then
            foldl(fun(code, variable) { code <+ GLOBAL (variable) }, code, vars)
            else
            code
            fi;
          [newCode, newEnv]
      | Fun(name, args, body) ->
          case genFunLabel(env, name) of
            [fLabel, env] -> [code, addFun(env, name, fLabel, size(args))]
          esac
      esac
    }, [emptyBuffer(), env], defs)
  }

  fun rememberDefinitions(env, defs) {
    foldl(
      fun (env, def) {
        case def of
          Fun (name, args, body) ->
            case lookupFun(env, name) of
              Fun(fLabel, _) -> rememberFun(env, fLabel, args, body)
            esac
          | _ -> env
        esac
      },
      env,
      defs
    )
  }

  fun compileFunsOnCurrentDepth(funs, env) {
    foldl(
      fun ([code, env], Fun (fLab, args, body, state)) {
        case genLabel(addArgs(beginFun(env, state), args)) of
          [fEndLabel, env] -> 
            case compile(fEndLabel, env, body) of
              [fEndLabelUsed, env, fCode] ->
                var compiled = code
                  <+ LABEL(fLab)
                  <+ BEGIN(fLab, size(args), getLocals(env))
                  <+> fCode
                  <+> label(fEndLabel, fEndLabelUsed)
                  <+ END;
                [compiled, leaveScope(env)]
            esac
        esac
      },
      [emptyBuffer(), env],
      funs
    )
  }

  fun compileFuns(env) {
    case getFuns(env) of
      [{}, env] -> [emptyBuffer(), env]
    | [funs, env] ->
        case compileFunsOnCurrentDepth(funs, env) of
          [currentDepthCode, env] ->
            case compileFuns(env) of
              [nextDepthCode, env] -> [currentDepthCode <+> nextDepthCode, env]
            esac
        esac
    esac
  }

  fun compileList(env, exprs) { 
    foldr (
      fun ([foldEnv, code], expr) {
        case genLabel(foldEnv) of
          [lab, foldGenLabelEnv] ->
            case compile(lab, foldGenLabelEnv, expr) of
              [labUsed, env, stmtCode] ->
                var exprCode = stmtCode <+> label(lab, labUsed) <+> code;
                [foldGenLabelEnv, exprCode]
            esac
        esac
      },
      [env, emptyBuffer()],
      exprs
    )
  }

  ------------------------------------------------------------------------------
  -- compile - compile expression
  -- Parameters:
  -- - lab - label which is possibly must be placed right after compiled stmt.
  -- - env - environment.
  -- - stmt - compiled statement.
  -- Returns:
  -- - [labelIsUsed, updatedEnv, stackMachineCode]
  -- ...where labIsUsed is a a flag if lab must be placed after
  -- stackMachineCode.
  fun compile (lab, env, stmt) {
    ----------------------------------------------------------------------------
    -- compileIgnore - compile ignore expression
    -- Parameters:
    -- - expr - ignored expression.
    -- Returns:
    -- - [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed is always false as label after ignore is never needed.
    fun compileIgnore(expr) {
      fun compileIgnoreImpl(labelGenResult@[dropLab, env]) {
        case compile (dropLab, env, expr) of
          [dropUsed, env, code] ->
            var ignoreCompiled = code <+> label (dropLab, dropUsed) <+ DROP;
            [false, env, ignoreCompiled]
        esac
      }
      compileIgnoreImpl(env.genLabel)
    }

    ----------------------------------------------------------------------------
    -- compileBinop - compile binary operation.
    -- Parameters:
    -- - op - operation type.
    -- - expr1 - first argument of binary operation as expression.
    -- - expr2 - second argument of binary operation as expression.
    -- Returns:
    -- - [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed is always set to false as label after binop is never needed
    -- for binary operation.
    fun compileBinop(op, expr1, expr2) {
      fun compileBinopImpl(labelsGenResult@[e1Label, e2Label, env]) {
        case compile(e1Label, env, expr1) of
          [e1Used, env, e1Code] ->
            case compile(e2Label, env, expr2) of
              [e2Used, env, e2Code] ->
                var compiled = e1Code
                  <+> label(e1Label, e1Used)
                  <+> e2Code
                  <+> label(e2Label, e2Used)
                  <+ BINOP(op);
                [false, env, compiled]
            esac
        esac
      }
      compileBinopImpl(env.genLabels(2))
    }

    ----------------------------------------------------------------------------
    -- compileAssn - compile assignment operation.
    -- Parameters:
    -- - assignedToExpr - expression assigned to.
    -- - assignedFromExpr - expression assigned from.
    -- Returns:
    -- - [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed is always false as label after assignment is never needed.
    fun compileAssn(assignedToExpr, assignedFromExpr) {
      fun compileAssnImpl(labGenResult@[assignedToLab, assignedFromLab, env]) {
        case compile(assignedToLab, env, assignedToExpr) of
          [assignedToLabIsUsed, envAfterAssignedTo, assignedToCompiled] ->
            case compile(
                   assignedFromLab,
                   envAfterAssignedTo,
                   assignedFromExpr
            ) of
              [
                assignedFromLabIsUsed,
                envAfterAssignedFrom,
                assignedFromCompiled
              ] ->
                var stInstr =
                  case assignedToExpr of
                    ElemRef (_, _) -> STA
                  | _ -> STI
                  esac;
                var compiled = assignedToCompiled
                  <+> label(assignedToLab, assignedToLabIsUsed)
                  <+> assignedFromCompiled
                  <+> label(assignedFromLab, assignedFromLabIsUsed)
                  <+ stInstr;
                [false, envAfterAssignedFrom, compiled]
            esac
        esac
      }
      compileAssnImpl(env.genLabels(2))
    }

    ----------------------------------------------------------------------------
    -- compileSeq - compile sequence of two expressions
    -- Parameters:
    -- - s1 - first expression.
    -- - s2 - second expression.
    -- Returns:
    -- - [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed is a flag of label usage after second expression (same as
    -- "after expressions sequence").
    fun compileSeq(s1, s2) {
      fun compileSeqImpl(labelGenResult@[s1Lab, env]) {
        case compile (s1Lab, env, s1) of
          [s1LabelIsUsed, envS1, s1Code] ->
            case compile (lab, envS1, s2) of
              [labUsed, envS2, s2Code] ->
                var compiled = s1Code
                  <+> label (s1Lab, s1LabelIsUsed)
                  <+> s2Code;
                [labUsed, envS2, compiled]
            esac
        esac
      }
      compileSeqImpl(env.genLabel)
    }

    ----------------------------------------------------------------------------
    -- compileIf - compile if expression
    -- Parameters:
    -- - condExpr - condition
    -- - s1 - then expression
    -- - s2 - else expression
    -- Return:
    -- - [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed is always true as lab is used to skip else branch if e is true.
    fun compileIf(condExpr, s1, s2) {
      fun compileIfImpl(labelsGenResult@[s2Lab, cjmpLab, jmpLab, env]) {
        case compile(lab, env, s1) of
          [jmpUsed, s1Env, s1Code] ->
            case compile(lab, s1Env, s2) of
              [_, s2Env, s2Code] -> -- No matter if lab is used by s2.
                                    -- It is added anyway.
                case compile(cjmpLab, s2Env, condExpr) of
                  [cjmpUsed, eEnv, condExprCode] ->
                    var compiled = condExprCode
                      <+> label(cjmpLab, cjmpUsed)
                      <+ CJMP("z", s2Lab)
                      <+> s1Code
                      <+> label(jmpLab, jmpUsed)
                      <+ JMP(lab)
                      <+ LABEL(s2Lab)
                      <+> s2Code;
                    [true, eEnv, compiled]
                esac
            esac
        esac
      }
      compileIfImpl(env.genLabels(3))
    }

    ----------------------------------------------------------------------------
    -- compileWhile - compile while expression
    -- Parameters:
    -- - condExpr - condition
    -- - s - loop body
    -- Returns:
    -- - [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed is always false as there is no label at the end of while
    -- compilation result.
    fun compileWhile(condExpr, s) {
      fun compileWhileImpl(labelsGenResult@[sLab, eLab, cjmpLab, env]) {
        case compile(eLab, env, s) of
          [_, sEnv, sCode] ->
            case compile(cjmpLab, sEnv, condExpr) of
              [used, condExprEnv, condExprCode] ->
                var compiled = singletonBuffer(JMP(eLab))
                  <+ LABEL(sLab)
                  <+> sCode
                  <+ LABEL(eLab)
                  <+> condExprCode
                  <+> label(cjmpLab, used)
                  <+ CJMP ("nz", sLab);
                [false, condExprEnv, compiled]
            esac
        esac
      }
      compileWhileImpl(env.genLabels(3))
    }

    ----------------------------------------------------------------------------
    -- compileDoWhile - compile do-while expression
    -- Parameters:
    -- - s - loop body.
    -- - condExpr - condition.
    -- Returns:
    -- - [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed is always false as there is no label at the end of do-while
    -- compilation result.
    fun compileDoWhile(s, condExpr) {
      fun compileDoWhileImpl(labGenResult@[sLab, condExprLab, cjmpLab, env]) {
        case compile (condExprLab, env, s) of
          [condExprLabUsed, sEnv, sCode] ->
            case compile (cjmpLab, sEnv, condExpr) of
              [used, condExprEnv, condExprCode] ->
                var compiled = singletonBuffer(LABEL(sLab))
                  <+> sCode
                  <+> label(condExprLab, condExprLabUsed)
                  <+> condExprCode
                  <+> label(cjmpLab, used)
                  <+ CJMP("nz", sLab);
                [false, condExprEnv, compiled]
            esac
        esac
      }
      compileDoWhileImpl(env.genLabels(3))
    }

    ----------------------------------------------------------------------------
    -- compileCall - compile function call.
    -- Parameters:
    -- - f - called function.
    -- - argsExpr - arguments as expressions.
    -- Returns:
    -- - [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed is always false, no way to use it.
    fun compileCall(f, argExprs) {
      fun compileCallImpl(labelGenResult@[callLab, env]) {
        case lookupFun(env, f) of
          Fun(fLab, an) ->
            case compileList(env, argExprs) of
              [argsEnv, code] ->
                var callCode =
                  case fLab of
                    Builtin (fLab) -> BUILTIN(fLab, an)
                  | _ -> CALL(fLab, an)
                  esac;
                var compiled = code <+ callCode;
                [false, argsEnv, compiled]
            esac
        esac
      }
      compileCallImpl(env.genLabel)
    }

    ----------------------------------------------------------------------------
    -- compileScope - compile scope expression.
    -- Parameters:
    -- - defs - definitions list.
    -- - expr - scope expression.
    -- Returns:
    -- - [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed indecates if lab was used when expr was compiled.
    fun compileScope(defs, expr) {
      fun compileScopeImpl(envInScope) {
        case addDefinitions(envInScope, defs) of
          [defsCode, env] ->
            case compile(lab, rememberDefinitions(env, defs), expr) of
              [labIsUsed, defsEnv, code] ->
                var compiled = defsCode <+> code;
                [labIsUsed, defsEnv, compiled]
            esac
        esac
      }
      case compileScopeImpl(beginScope(env)) of
        [labIsUsed, envUpdated, compiled] ->
          var envFinal = endScope(envUpdated);
          [labIsUsed, envFinal, compiled]
      esac
    }

    ----------------------------------------------------------------------------
    -- compileArray
    -- Parameters:
    -- - items - list of items expressions.
    -- Returns:
    -- [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed is always set to false as it is not possible to pass label to
    -- compileList.
    fun compileArray(items) {
      case compileList(env, items) of
        [itemsEnv, code] ->
          var compiled = singletonBuffer(CONST(size(items)))
            <+> code
            <+ ARRAY(size(items));
          [false, itemsEnv, compiled]
      esac
    }

    ----------------------------------------------------------------------------
    -- compileElemRef
    -- Parameters:
    -- - arr - array expression.
    -- - i - index expression.
    -- Returns:
    -- [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed is always false as label is never used.
    fun compileElemRef(arr, i) {
      case compileList(env, {arr, i}) of
        [updatedEnv, code] -> [false, updatedEnv, code]
      esac
    }

    ----------------------------------------------------------------------------
    -- compileElem
    -- Parameters:
    -- - arr - array expression.
    -- - i - index expression.
    -- Returns:
    -- [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed is always false as label is never used.
    fun compileElem(arr, i) {
      case compileElemRef(arr, i) of
        [_, updatedEnv, code] -> [false, updatedEnv, code <+ ELEM]
      esac
    }

    ----------------------------------------------------------------------------
    -- compileSexp
    -- Parameters:
    -- - sExp - s-expression.
    -- - items - items expressions list.
    -- Returns:
    -- - [labIsUsed, updatedEnv, stackMachineCode]
    -- labIsUsed is always set to false as label can not be used.
    fun compileSexp(sExp, items) {
      case compileList (env, items) of
        [env, code] ->
          -- TODO: why do we need this one additional element!?
          var compiled = singletonBuffer(CONST(size(items) + 1))
            <+> code
            <+ SEXP(sExp, size(items));
          [false, env, compiled]
      esac
    }

    case stmt of
      Skip -> [false, env, emptyBuffer()]
    | Var(x) -> [false, env, singletonBuffer(LD(lookupVar(env, x)))]
    | Ref(x) -> [false, env, singletonBuffer(LDA(lookupVar(env, x)))]
    | Ignore(e) -> compileIgnore(e)
    | Const(n) -> [false, env, singletonBuffer (CONST (n))]
    | Binop(op, e1, e2) -> compileBinop(op, e1, e2)
    | Assn(s, e) -> compileAssn(s, e)
    | Seq(s1, s2) -> compileSeq(s1, s2)
    | If(e, s1, s2) -> compileIf(e, s1, s2)
    | While(e, s) -> compileWhile(e, s)
    | DoWhile(s, e) -> compileDoWhile(s, e)
    | Call(f, argExprs) -> compileCall(f, argExprs)
    | Scope(defs, expr) -> compileScope(defs, expr)
    | String(s) -> [false, env, singletonBuffer(STRING (s))]
    | Array(items) -> compileArray(items)
    | Elem(arr, i) -> compileElem(arr, i)
    | ElemRef(arr, i) -> compileElemRef(arr, i)
    | Sexp(name, items) -> compileSexp(name, items)
    | Set(x, e) -> compile(lab, env, Assn (Ref (x), e))
    esac
  }

  var initialEnv = initCompEnv()
    .beginScope
    .addFun ("read", Builtin("read")  , 0)
    .addFun ("write", Builtin("write") , 1)
    .addFun ("length", Builtin("length"), 1);

  case initialEnv.genLabel of
      [endLab, env] ->
       case compile(endLab, env, stmt) of
         [endLabUsed, env, code] ->
           case compileFuns(env) of
             [funsCode, _] -> getBuffer $ singletonBuffer(LABEL("main"))
               <+ BEGIN("main", 0, getLocals(env))
               <+> code
               <+> label (endLab, endLabUsed)
               <+ END
               <+> funsCode
           esac
      esac
  esac
}
