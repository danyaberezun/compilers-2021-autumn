-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun readInstr ([stack, state, world]) {
  case readWorld(world) of
    [v, newWorld]-> [v:stack, state, newWorld]
  esac
}

fun evalInstr([stack, st, world], instr) {
  case instr of
    READ      -> 
      case readWorld(world) of
        [v, newWorld] -> [v:stack, st, newWorld]
      esac                                      
    | WRITE     -> 
      case stack of
        v : vals -> [vals, st, writeWorld(v, world)]
      esac
    | BINOP (op) -> 
      case stack of 
        a : b : vals -> [evalBinop(op, b, a) : vals, st, world]
      esac
    | LD (x) -> [st(x): stack, st, world]
    | ST (x) -> 
      case stack of
        v : vals -> [vals, st <- [x, v], world] 
      esac 
    | CONST (n) -> [n:stack, st, world]
  esac
}

fun evalListProgram(c, insns) {
  case insns of
    instr : prog -> evalListProgram(evalInstr(c, instr), prog)  |
    {} -> c
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insnsBuf) {
  evalListProgram(c, getBuffer(insnsBuf))
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (v) -> singletonBuffer(LD(v))                        |
    Const (c) -> singletonBuffer(CONST(c))                   |
    Binop (op, x, y) -> compileExpr(x) <+> compileExpr(y) <+> singletonBuffer(BINOP(op))
  esac 
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (name, expr) -> compileExpr(expr) <+> singletonBuffer(ST(name))  |
    Seq  (a, b) -> compileSM(a) <+> compileSM(b)                          |
    Skip -> emptyBuffer()                                               |
    Read (name) -> listBuffer({READ, ST(name)})                         |
    Write (expr) -> compileExpr(expr) <+> singletonBuffer(WRITE)                  
  esac
}
