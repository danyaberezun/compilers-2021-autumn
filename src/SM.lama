-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun evalInstruction (c@[stack, cst, state, world], instruction) {
    case instruction of
      WRITE -> fun (value : tail) { [tail, cst, state, writeWorld(value, world)] }(stack)
      | CONST (value) -> [value:stack, cst, state, world]
      | BINOP (op) -> fun (right : left : tail) { [evalOp(op, left, right):tail, cst, state, world] }(stack)
      | LD (name) -> [lookup(state, name):stack, cst, state, world]
      | LDA(name) -> [name:stack, cst, state, world]
      | ST (name) -> fun (value : tail) { [tail, cst, state <- [name, value], world] }(stack)
      | STI -> fun(v1:v2:tail) { state.assign(v2, v1); [v1:tail, cst, state, world] }(stack)
      | READ -> fun ([value, newWorld]) { [value:stack, cst, state, newWorld] }(readWorld(world))
      | LABEL (_) -> c
      | DUP -> fun(head : tail) { [head:head:tail, cst, state, world] }(stack)
      | DROP -> fun(head : tail) { [tail, cst, state, world] }(stack)
      | BEGIN (name, nargs, locs) ->
        case take (stack, nargs) of [stack, args] ->
          var s = makeState (nargs, locs);
          foldl(fun (ind, vv) { assign (s, Arg (ind), vv); ind + 1 }, 0, args);
          [stack, cst, s, world]
        esac
      | GLOBAL (_) -> c
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, cst, state, world], instractions) {
    case instractions of
      { } -> c
      | i : tail -> case i of
          CJMP(c, lab) -> case stack of
              v : sTail -> eval([sTail, cst, state, world], if v == c then fromLabel(env, lab) else tail fi)
            esac
          | JMP(lab) -> eval(c, fromLabel(env, lab))
          | CALL(f, a) -> eval([stack, [state, tail] : cst, state, world], fromLabel(env, f))
          | END -> case cst of
            {} -> c
            | [ss, iTail]:cst -> eval([stack, cst, ss, world], iTail)
          esac
          | _ -> eval (evalInstruction(c, i), tail)
        esac
    esac
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
      then singletonBuffer (LABEL (lab))
      else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip -> [false, env, emptyBuffer ()]
      | Var(x) -> [false, env, singletonBuffer(LD (lookupVar(env, x)))]
      | Ref(x) -> [false, env, singletonBuffer(LDA (lookupVar(env, x)))]
      | Const(n) -> [false, env, singletonBuffer(CONST (n))]
      | Ignore (e) -> case genLabels(env, 1) of
          [l, env] -> case compile(l, env, e) of
            [usedL, env, code] -> [false, env, code <+> label(l, usedL) <+ DROP]
          esac
      esac
      | Binop(o, l, r) -> case genLabels(env, 2) of
          [l1, l2, env] -> case compile(l1, env, l) of
          [usedL1, env, code1] -> case compile(l2, env, r) of
              [usedL2, env, code2] -> [false, env, code1 <+> label(l1, usedL1) <+> code2 <+> label(l2, usedL2) <+ BINOP(o)]
            esac
          esac
        esac
      | Assn(x, e) ->
        case genLabels(env, 2) of
          [l1, l2, env] -> case compile(l1, env, x) of
              [usedL1, env, code1] -> case compile(l2, env, e) of
                [usedL2, env, code2] -> [false, env, code1 <+> label(l1, usedL1) <+> code2 <+> label(l2, usedL2) <+ STI]
              esac
            esac
        esac
      | Seq(s1, s2) -> case genLabels(env, 2) of
          [l1, l2, env] -> case compile(l1, env, s1) of
              [usedL1, env, code1] -> case compile(l2, env, s2) of
                  [usedL2, env, code2] -> [usedL2, env, code1 <+> label(l1, usedL1) <+> code2 <+> label(l2, usedL2)]
                esac
            esac
        esac
      | Read(e) -> case genLabels(env, 1) of
          [l1, env] -> case compile(l1, env, e) of
              [usedL1, env, code] -> [false, env, code <+> label(l1, usedL1) <+ READ <+ STI <+ DROP]
            esac
        esac
      | Write(e) -> case genLabels(env, 1) of
          [l, env] -> case compile(l, env, e) of
            [usedL, env, code] -> [false, env, code <+> label(l, usedL) <+ WRITE]
          esac
      esac
      | While(cond, body) -> case genLabels(env, 3) of
          [l1, l2, l3, env] -> case compile(l1, env, body) of
            [usedL1, env, code1] -> case compile(l2, env, cond) of
              [usedL2, env, code2] -> [true, env, label(l3, true) <+> code2 <+> label(l2, usedL2) <+ CJMP(0, lab) <+> code1 <+> label(l1, usedL1) <+ JMP(l3)]
            esac
          esac
        esac
      | DoWhile(body, cond) -> case genLabels(env, 3) of
          [l1, l2, l3, env] -> case compile(l1, env, body) of
            [usedL1, env, code1] -> case compile(l2, env, cond) of
              [usedL2, env, code2] -> [true, env, label(l3, true) <+> code1 <+> label(l1, usedL1) <+> code2 <+> label(l2, usedL2) <+ CJMP(0, lab) <+ JMP(l3)]
            esac
          esac
        esac
      | If(cond, ifTrue, ifFalse) -> case genLabels(env, 4) of
          [l1, l2, l3, elseL, env] -> case compile(l1, env, cond) of
            [usedL1, env, code1] -> case compile(l2, env, ifTrue) of
              [usedL2, env, code2] -> case compile(l3, env, ifFalse) of
                [usedL3, env, code3] -> [true, env, code1 <+> label(l1, usedL1) <+ CJMP(0, elseL) <+> code2 <+> label(l2, usedL2) <+ JMP(lab) <+> label(elseL, true) <+> code3 <+> label(l3, usedL3)]
              esac
            esac
          esac
        esac
      | Scope(v, s) ->
        fun addSymbols (env, vv) {
          case vv of
            Var(vs) -> addVars(env, vs)
            | Fun(name, args, body) -> addFun(env, name, name, args)
          esac
        }
        fun rememberFuns (env, vv) {
          case vv of
            Var(vs) -> env
            | Fun(name, args, body) -> rememberFun(env, name, args, body)
          esac
        }
        fun addCode (code, vv) {
          case vv of
            Var(vs) -> foldl(fun (code, vv) { code <+ GLOBAL(vv) }, code, vs)
            | Fun(name, args, body) -> code
          esac
        }
        var globalCode;
        env := foldl(rememberFuns, foldl(addSymbols, beginScope(env), v), v);
        if isGlobal(env) then globalCode := foldl(addCode, emptyBuffer(), v) fi;
        case compile(lab, env, s) of
          [used, env, code] -> [used, endScope(env), globalCode <+> code]
        esac
      | Call(f, args) -> case genLabels(env, 1) of
          [l, env] ->
            fun compArg ([env, wasUsed, cCode], arg) {
              case compile (l, env, arg) of
                [usedL, env, nCode] -> [env, wasUsed !! usedL, cCode <+> nCode]
              esac
            }
            case foldl(compArg, [env, false, emptyBuffer ()], args) of
              [env, used, code] -> case lookupFun(env, f) of
                Fun(f, args) -> [false, env, code <+> label(l, used) <+ CALL(f, size(args))]
              esac
            esac
        esac
    esac
  }

  case initCompEnv () of env ->
    fun compileFunction (env, Fun (name, args, body, st)) {
      case (case st of {} -> env | st -> addArgs (env.beginFun (st), args) esac).genLabel
      of [fLab, env] -> case compile (fLab, env, body) of [fLabUsed, env, code] ->
        [env, singletonBuffer (LABEL (name))
          <+ BEGIN (name, size (args), getLocals (env))
          <+> code
          <+> label (fLab, fLabUsed)
          <+ END]
      esac
      esac
    }
    fun compileFunctions (env, fs) {
      case fs of
        {} -> [env, emptyBuffer ()]
        | f:fs ->
          case compileFunction (env, f) of [env, fCode] ->
            case env.getFuns of [rest, env] ->
              case compileFunctions (env, fs +++ rest) of [env, code] ->
                [env, fCode <+> code]
              esac
            esac
          esac
      esac
    }
    case compileFunctions (env, {Fun ("main", emptyBuffer (), stmt, emptyBuffer ())}) of
      [env, code] -> getBuffer $ code
    esac
  esac
}
