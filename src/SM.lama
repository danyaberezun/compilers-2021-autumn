-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, w], insns) {
  case insns of 
    {} -> c
    | i : is -> 
      case i of 
        LD (x) -> eval([st(x) : stack, st, w], is)
      | CONST (n) -> eval([n : stack, st, w], is)
      | ST (x) -> case stack of 
          v : s -> eval([s, st <- [x, v], w], is)
        esac
      | BINOP (op) -> case stack of 
          b : a : s -> eval([evalOp(op, a, b) : s, st, w], is)
        esac
      | WRITE -> case stack of 
          v : s -> eval([s, st, writeWorld(v, w)], is)
        esac 
      | READ -> case readWorld(w) of 
          [n, nw] -> eval([n:stack, st, nw], is)
        esac
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
      Var (x) -> {LD (x)}
    | Const (n) -> {CONST (n)}
    | Binop (s, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP (s)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
      Assn (s, e) -> compileExpr(e) +++ {ST (s)}
    | Seq (st1, st2) -> compileSM(st1) +++ compileSM(st2)
    | Skip -> []
    | Read (s) -> {READ, ST (s)}
    | Write (e) -> compileExpr(e) +++ {WRITE}
  esac
}
