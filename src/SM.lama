-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cst, state, world], insns) {
    case insns of 
    {} -> c
    | ins:tail ->
        case ins of
          BINOP (binop) -> case stack of top1:top0:bottom ->
            var top = evalOp(binop, top0, top1);
            eval([top:bottom, cst, state, world], tail) esac
          | LD (x) -> eval([lookup(state, x):stack, cst, state, world], tail)
          | ST (x) -> case stack of top:bottom -> assign(stack, x, top); eval(c, tail) esac
          | CONST (n) -> eval([n : stack, cst, state, world], tail)
          | LABEL (_) -> eval(c, tail)
          | JMP (l) -> eval(c, fromLabel(env, l))
          | CJMP("z", l) -> case stack of top:bottom -> case top of
            0 -> eval([bottom, cst, state, world], fromLabel(env, l))
            | _ -> eval([bottom, cst, state, world], tail)
            esac esac
          | CJMP("nz", l) -> case stack of top:bottom -> case top of
            0 -> eval([bottom, cst, state, world], tail)
            | _ -> eval([bottom, cst, state, world], fromLabel(env, l))
            esac esac
          | LDA(x) -> eval ([x : stack, cst, state, world], tail)
          | STI -> case stack of top1:top0:bottom -> assign(state, top0, top1); eval ([top1:bottom, cst, state, world], tail) esac
          | DROP -> eval ([tl (stack), cst, state, world], tail)
          | BEGIN (name, args, locals) -> case take (stack, args) of [stack, values] -> case foldl (
            fun ([state, n], value) { assign(state, Arg(n), value); [state, n + 1] }, 
            [makeState(args, locals), 0], 
            values
          ) of [state, _] -> eval([stack, cst, state, world], tail) esac esac
          | END -> case cst of 
              {} -> c
              | [state, insns] : cst -> eval([stack, cst, state, world], insns)
            esac
          | GLOBAL (x) -> assign(state, Glb(x), 0); eval(c, tail)
          | CALL (name, _) -> eval([stack, [state, tail]:cst, state, world], fromLabel(env, name))
          | DUP -> case stack of top:bottom -> eval([top:top:bottom, cst, state, world], tail) esac
          | SEXP (name, count) -> case take (stack, count) of [_:stack, args] -> eval ([Sexp (name, listArray (args)) : stack, cst, state, world], tail) esac
          | STRING (strg) -> eval([strg : stack, cst, state, world], tail)
          | ARRAY (count) -> case take(stack, count) of [_:stack, args] -> eval([listArray(args) : stack, cst, state, world], tail) esac
          | STA -> case stack of (vala:index:arr:stack) -> case arr of 
            Sexp (_, arr) -> arr[index] := vala
            | _ -> arr[index] := vala esac; 
            eval ([vala:stack, cst, state, world], tail) esac
          | ELEM -> case stack of (index:arr:stack) -> eval ([(case arr of 
            Sexp (_, arr) -> arr[index] 
            | _ -> arr[index] esac) : stack, cst, state, world], tail) esac
          | BUILTIN (name, count) -> case take(stack, count) of [stack, args] -> case evalBuiltin(name, args, world) of [returnVal, world] -> eval([returnVal : stack, cst, state, world], tail) esac esac
          esac
      esac
  }
  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | Arg (i) ->       Arg (i)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileList (lab, env, stmts) {
    compile (lab, env, foldl (fun (a, b) { Seq (a, b) }, Skip, stmts))
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip         -> [false, env, emptyBuffer ()]
    | Var   (x)    -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref   (x)    -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const (n)    -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)    -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
    | Write (e)    -> case compile(lab, env, e) of [used, env, code] -> [false, env, code <+> label(lab, used) <+ WRITE] esac
    | Assn  (x, e) -> case x of
        ElemRef(_, _) -> case genLabels(env, 2) of [lab1, lab2, env] ->
          case compile(lab1, env, x) of [used1, env, code] ->
            case compile(lab2, env, e) of [used2, env, eCode] -> 
              [false, env, code <+> label (lab1, used1) <+> eCode <+> label (lab2, used2) <+ STA] esac esac esac
        | _ -> case genLabels(env, 2) of [lab1, lab2, env] ->
          case compile(lab1, env, x) of [used1, env, code] ->
            case compile(lab2, env, e) of [used2, env, eCode] -> 
              [false, env, code <+> label (lab1, used1) <+> eCode <+> label (lab2, used2) <+ STI] esac esac esac esac
    | Seq (s1, s2) ->
        case genLabel(env) of [s2Lab, env] ->
            case compile (s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] -> case compile (lab, env, s2) of
                [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code] esac esac esac
    | If (cond, body1, body2) -> 
      case genLabels(env, 2) of [lab1, lab2, env] ->
        case compile(lab1, env, cond) of [used1, env, condCode] ->
          case compile(lab, env, body1) of [_, env, code1] ->
            case compile(lab, env, body2) of [_, env, code2] -> 
            [true, env, condCode <+ CJMP("z", lab2) <+> code1 <+ JMP(lab) <+> label(lab2, true) <+> code2] esac esac esac esac
    | While (cond, body) -> 
      case genLabels(env, 2) of [lab1, lab2, env] ->
        case compile(lab1, env, cond) of [used, env, condCode] ->
            case compile(lab2, env, body) of [_, env, code] ->
              [true, env, label(lab2, true) <+> condCode <+ CJMP("z", lab) <+> label(lab1, used) <+> code <+ JMP (lab2)] esac esac esac
    | DoWhile (body, cond) -> 
      case genLabels(env, 2) of [lab1, lab2, env] ->
        case compile(lab1, env, cond) of [used, env, condCode] ->
          case compile(lab2, env, body) of [_, env, code] ->
            [false, env, label(lab1, true) <+> code <+> label(lab2, used) <+> condCode <+ CJMP ("nz", lab1)] esac esac esac
    | Ignore (e) -> case compile(lab, env, e) of [used, env, code] -> [false, env, code <+> label (lab, used) <+ DROP] esac
    | Binop (op, l, r) -> case genLabels(env, 2) of [lab1, lab2, env] ->
        case compile(lab1, env, l) of [lUsed, env, lCode] ->
          case compile(lab2, env, r) of [rUsed, env, rCode] ->
            [false, env, lCode <+> label(lab1, lUsed) <+> rCode <+> label(lab2, rUsed) <+ BINOP (op)] esac esac esac
    | Scope (defs, expr) -> case foldl (
        fun ([buf, scope], expr) {
          case expr of
            Var (name) -> [
              if scope.isGlobal then foldl (
                  fun (buf, name1) {
                    buf <+ GLOBAL (name1)
                  }, buf, name
                ) else buf fi, addVars (scope, name)
              ]
            | _ -> [buf, scope] esac
          }, [emptyBuffer(),env.beginScope], defs
        ) of [code1, env] -> case foldl (
          fun ([env, f], expr) {
            case expr of Fun (name, args, body) -> case env.genFunLabel(name) of
              [lab, env] -> [addFun (env, name, lab, args.size), [lab, args, body] : f] esac
              | _ -> [env, f]
            esac
          }, [env, {}], defs
        ) of [env, f] -> case foldl (
              fun (env, [l, a, bd]) {
                rememberFun (env, l, a, bd)
              }, env, f
            ) of env -> case compile (lab, env, expr) of [used, env, code2] -> [used, env.endScope, code1 <+> code2] esac esac esac esac
    | Call (name, scope) -> case genLabel(env) of [l, env] -> case compile(l, env, foldl(fun(code, arg) {Seq(code, arg)}, Skip, scope)) of [used, env, argsCode] -> 
        case lookupFun(env, name) of Fun (labelNew, args) -> [false, env, argsCode <+> label(l, used) <+ (case labelNew of 
          Builtin(labelNew) -> BUILTIN(labelNew, args)
          | _ -> CALL(labelNew, args) esac)] esac esac esac
    | Sexp (name, elems) -> 
      case genLabel(env) of [lab1, env] -> 
        case compileList (lab1, env, elems) of [used, env, code] -> 
          [false, env, singletonBuffer(CONST (size(elems) + 1)) <+> code <+> label(lab1, used) <+ SEXP (name, size(elems))] esac esac
    | Array (elems) -> 
        case genLabel (env) of [lab1, env] -> 
          case compileList (lab1, env, elems) of [used, env, code] -> 
            [false, env, singletonBuffer(CONST (size(elems))) <+> code <+> label(lab1, used) <+ ARRAY (size(elems))] esac esac
    | String (strg) -> [false, env, singletonBuffer(STRING (strg))]
    | Set (x, e) -> compile (lab, env, Assn (Ref (x), e))
    | Elem (arr, index) -> 
      case genLabel (env) of [lab1, env] -> 
        case compileList (lab1, env, {arr, index}) of [used, env, code] -> 
          [false, env, code <+> label(lab1, used) <+ ELEM] esac esac
    | ElemRef (arr, index) -> 
        case genLabel (env) of [lab1, env] -> 
          case compileList (lab1, env, {arr, index}) of [used, env, code] -> 
            [false, env, code <+> label(lab1, used)] esac esac
    esac
  }

  case genLabel(initCompEnv().beginScope.addFun("read", Builtin("read"), 0).addFun("write", Builtin("write"), 1).addFun ("length", Builtin("length"), 1)) of
    [endLab, env] -> case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> getBuffer $ singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env)) <+> code <+> label(endLab, endLabUsed) <+ END <+> case getFuns(env) of 
            [{}, env] -> emptyBuffer () 
            | [f, env] -> foldl (
                  fun ([env, code], f) {
                    case f of Fun(name, args, body, state) -> case genLabel(addArgs (beginFun (env, state), args)) of [lab, env] ->
                        case compile(lab, env, body) of [used, env, bodyCode] -> 
                          [ env, code <+ LABEL(name) <+ BEGIN(name, size(args), getLocals(env)) <+> bodyCode <+> label(lab, used) <+ END] esac esac esac
                  }, 
                  [env, emptyBuffer ()], f 
                ) [1] esac esac esac
}

