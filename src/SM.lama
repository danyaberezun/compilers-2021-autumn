-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun makeBool(x) {
  case x of
    "z" ->  0
  | "ne" -> 1
  | 0   ->  0
  | _   ->  1
  esac
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, world, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign (state@[args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac;
    state
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, callStack, state, world], insns) {
    
    -- case insns of
    --   i:tail -> printf("%s\n", showSMInsn(i))
    -- | {}     -> printf("END\n")
    -- esac;
    case insns of
      {} -> c
    | i:tail ->
        case i of
          JMP (label)        -> eval(c, fromLabel(env, label))
        | CJMP (cond, label) -> 
            case stack of x:rem ->
                eval (
                  [rem, callStack, state, world],
                  if makeBool(x) == makeBool(cond)
                    then fromLabel(env, label)
                    else tail
                  fi
                )
            esac
        | CALL (fLabel, nargs) ->
            eval (
              [stack, [state, tail] : callStack, state, world],
              fromLabel (env, fLabel)
            )
        | BEGIN (fLabel, nargs, nlocals) ->
            case take (stack, nargs) of
              [stack, args] ->
                eval (
                  [
                    stack, callStack,
                    foldr (
                      fun ([argNum, state], argVal) {
                        state.assign (Arg (argNum), argVal);
                        [argNum + 1, state]
                      }
                      , [0, makeState (nargs, nlocals)], args
                    ) [1],
                    world
                  ], 
                  tail)
            esac
        | END -> 
            case callStack of
              [state, tail] : callStack ->
                eval ([stack, callStack, state, world], tail)
            | {} -> c
            esac
        | _           -> eval(case 
                                (case i of
                                  GLOBAL (x) -> [stack, state.assign(Glb (x), 0), world]
                                | READ       ->
                                    case readWorld(world) of
                                      [value, world] ->
                                        -- printf("Read value: %s\n", value.string);
                                        [value:stack, state, world]
                                    esac
                                | WRITE      -> [stack.tl, state, writeWorld(stack.hd, world)]
                                | BINOP (op) ->
                                    case stack of
                                      x:y:rem -> [evalOp(op, y, x):rem, state, world]
                                    esac
                                | LD    (x)  -> [state.lookup(x):stack, state, world]
                                | ST    (x)  -> [stack.tl, state.assign(x, stack.hd), world]
                                | CONST (n)  -> [n:stack, state, world]
                                | LABEL (s)  -> [stack, state, world]
                                | STI        -> 
                                    case stack of
                                      (refr:value:rem) -> [value:rem, state.assign(refr, value), world]
                                    esac
                                | DROP       -> [stack.tl, state, world]
                                | DUP        -> [stack.hd:stack, state, world]
                                | LDA   (s)  -> [s:stack, state, world]
                                esac) of [stack, state, world] ->
                                  [stack, callStack, state, world]
                              esac,
                              tail)
        esac
    esac
    
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), world], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, fnctions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, fnctions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : fnctions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, fnctions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, fnctions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, fnctions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, fnctions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, fnctions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, fnctions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, fnctions)
  }


  -- Get fnctions and empty fnctions list
  fun getFuns () {
    [fnctions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, fnctions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, fnctions)]
     fi 
  }


  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor fnctions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling fnctions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add fnctions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested fnctions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling fnctions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileWithLabel (env, e) {
    case genLabel (env) of
      [eLabel, env] -> 
        case compile (eLabel, env, e) of
          [eLabelUsed, env, code] -> [env, code <+> label (eLabel, eLabelUsed)]
        esac
    esac
  }

  fun compileExprs (env, exprList) {
    foldr (
      fun ([env, compiledList], expr) {
        case compileWithLabel (env, expr) of
          [env, exprCode] -> [env, exprCode:compiledList]
        esac
      },
      [env, {}], exprList
    )
  }

  fun compileEnterScope (env, ds) {
    case
      foldr (
        fun ([env, code, fnlist], def) {
          case def of
            Var (names) ->
              [
                addVars (env, names),
                code <+>
                if isGlobal (env)
                  then foldr (fun (code, name) {code <+ GLOBAL (name)}, emptyBuffer (), names)
                  else emptyBuffer ()
                fi,
                fnlist
              ]
          | Fun (name, args, body) ->
              case genFunLabel (env, name) of 
                [fLabel, env] ->
                [
                  addFun (env, name, fLabel, size (args)),
                  code,
                  [fLabel, args, body] : fnlist
                ]
              esac
          esac
        },
        [env, emptyBuffer (), {}], ds
      ) of [env, code, fnlist] ->
        [
          foldr (
            fun (env, [fLabel, args, body]) {
              rememberFun (env, fLabel, args, body)
            }, env, fnlist
          ),
          code
        ]
    esac
  }

  fun compileFunctions(env) {
    case getFuns (env) of 
      [fns, env] ->
        foldr (
          fun ([env, code], f@Fun (lab, args, body, state)) {
            case addArgs (beginFun (env, state), args) of env -> 
              case compileWithLabel (env, body) of
                [env, fCode] ->
                  [
                    env,
                    code <+
                    LABEL (lab) <+
                    BEGIN (lab, size (args), getLocals (env)) <+> 
                    fCode <+ END
                  ]
              esac
            esac
          },
          [env, emptyBuffer ()], fns
        )
    esac
  }
 
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        ->
        [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read   (Ref(v))   -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, v))] -- in optimization purposes
    | Read   (e)        ->
        case compileWithLabel (env, e) of
          [env, eCode] -> [false, env, singletonBuffer (READ) <+> eCode <+ STI <+ DROP]
        esac
    | Write  (e)        ->
        case compileWithLabel (env, e) of
          [env, eCode] -> [false, env, eCode <+ WRITE]
        esac
    | Binop (op, lE, rE) ->
        case compileExprs (env, {lE, rE}) of
          [env, {lCode, rCode}] -> [false, env, lCode <+> rCode <+ BINOP (op)]
        esac
    | Assn (refE, valE) ->
        case compileExprs (env, {refE, valE}) of
          [env, {refCode, valCode}]-> [false, env, valCode <+> refCode <+ STI]
        esac
    | Seq (e1, e2) ->
        case compileWithLabel (env, e1) of 
          [env, e1Code] ->
            case compile (lab, env, e2) of
              [labUsed, env, e2Code] -> [labUsed, env, e1Code <+> e2Code]
            esac
        esac
    | If (e, thenE, elseE) ->
        case genLabel (env) of
          [elseBranch, env] ->
            case compileExprs (env, {e, thenE}) of
              [env, {eCode, thenCode}] ->
                case compile (lab, env, elseE) of
                  [_, env, elseCode] ->
                    [
                      true, env,
                      eCode <+ CJMP ("z", elseBranch) <+>
                      thenCode <+ JMP (lab) <+
                      LABEL (elseBranch) <+> elseCode
                    ]
                esac
            esac
        esac
    | DoWhile (e, repeatE) ->
        case genLabel (env) of
          [whileLabel, env] ->
            case compileWithLabel (env, repeatE.addToScope (e)) of
              [env, code] -> 
                [
                  false, env,
                  singletonBuffer (LABEL (whileLabel)) <+>
                  code <+ CJMP ("ne", whileLabel)
                ]
            esac
        esac
    | While (e, repeatE) ->
        case genLabels (env, 2) of
          [whileLabel, repeatELabel, env] ->
            case compileWithLabel (env, e) of
              [env, eCode] ->
                case compile (repeatELabel, env, repeatE) of
                  [_, env, repeatECode] ->
                    [ 
                      false, env,
                      singletonBuffer (JMP (repeatELabel)) <+ LABEL (whileLabel) <+> 
                      repeatECode <+ LABEL (repeatELabel) <+> eCode <+
                      CJMP ("ne", whileLabel)
                    ]
                esac
            esac
        esac
    | Ignore (e) ->
        case compile (lab, env, e) of
          [labUsed, env, eCode] -> [labUsed, env, eCode <+ DROP]
        esac
    | Scope (ds, e) ->
        case compileEnterScope (env.beginScope, ds) of
          [env, entryCode] ->
            case compileWithLabel (env, e) of
              [env, code] -> 
                [
                  false, 
                  if isGlobal (env) 
                    then env
                    else env.leaveScope
                  fi, 
                  entryCode <+> code
                ]
            esac
        esac
    | Call(name, args) ->
        case compileWithLabel (
              env,
              foldl (fun (e, arg) {Seq(e, arg)}, Skip, args)
            ) of
          [env, code] ->
            case lookupFun (env, name) of
              Fun (fLabel, nArgs) ->
                [false, env, code <+ CALL(fLabel, nArgs)]
            esac
        esac


    | _                 ->  printf ("compileSM not implemented\n")
    esac
  }


  case compileWithLabel (initCompEnv (), stmt) of
    [env, mainCode] ->
      getBuffer $
      singletonBuffer (BEGIN ("main", 0, getLocals (env))) <+>
      mainCode <+ END <+>
      compileFunctions (env) [1]
  esac
}