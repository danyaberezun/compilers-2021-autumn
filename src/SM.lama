-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
	case insns of 
		{} -> c
		| (READ:tail) -> case readWorld(world) of 
					[n,newWorld] -> eval([n:stack,state,newWorld], tail)
				esac
		| (WRITE:tail) -> case stack of 
					(n:st) -> case writeWorld(n, world) of
							newWorld -> eval([st,state,newWorld], tail)
						esac
				esac
		| (BINOP (s):tail) -> case stack of 
					(n2:n1:st) -> eval([(strToOp(s) (n1, n2)):st, state, world], tail)
				     esac
		| (ST (x):tail) -> case stack of 
					(n:st) -> eval([st, state <- [x,n], world], tail)	
				esac
		| (LD (x):tail) -> eval([state(x):stack, state, world], tail)
		| (CONST (n):tail) -> eval([n:stack, state, world], tail)
	esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
	case expr of 
		Var (varName) -> {LD (varName)}
		| Const (x) -> {CONST(x)}
		| Binop (op, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP (op)}
	esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
	Assn (varName, expr) -> compileExpr(expr) +++ {ST (varName)}
	| Seq (s1, s2) -> compileSM(s1) +++ compileSM(s2)
	| Skip -> {}
	| Read (varName) -> {READ} +++ {ST (varName)}
	| Write (expr) -> compileExpr(expr) +++ {WRITE}
  esac
}
