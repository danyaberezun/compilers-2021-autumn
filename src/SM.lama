-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval(c@[st, cst, s, w], insns) {
    case insns of
        { }       -> c
      | i : insns ->
        case i of
            READ            -> case readWorld(w) of [n, w] -> eval([n:st, cst, s, w], insns) esac
          | WRITE           -> case st of n : st -> eval([st, cst, s, writeWorld(n, w)], insns) esac
          | BINOP (op)      -> case st of y : x : st -> eval([evalOp(op, x, y):st, cst, s, w], insns) esac
          | CONST (n)       -> eval([n:st, cst, s, w], insns)
          | LD (x)          -> eval([lookup(s, x):st, cst, s, w], insns)
          | ST (x)          -> case st of v : st -> assign(s, x, v); eval([st, cst, s, w], insns) esac
          | JMP (l)         -> eval(c, fromLabel(env, l))
          | CJMP (cond, l)  ->
            case st of n : st ->
              if case cond of
                  "ne" -> n
                | "e"  -> n == false
              esac then eval([st, cst, s, w], fromLabel(env, l)) else eval([st, cst, s, w], insns) fi
            esac
          | LABEL (l)       -> eval(c, insns)
          | DROP            -> case st of _ : st -> eval([st, cst, s, w], insns) esac
          | LDA (x)         -> eval([Ref(x):st, cst, s, w], insns)
          | STI             -> case st of v : Ref(x) : st -> assign(s, x, v); eval([v:st, cst, s, w], insns) esac
          | GLOBAL (_)      -> eval([st, cst, s, w], insns)
          | CALL (f, n)     -> eval([st, [s, insns]:cst, makeState(n, 0), w], fromLabel(env, f))
          | END             -> case cst of { } -> c | [s, insns] : cst -> eval([st, cst, s, w], insns) esac
          | BEGIN (_, a, l) -> case makeState(a, l) of s ->
            case take(st, a) of
              [st, args] ->
                args := listArray(args);
                iteriArray(fun (i, arg) { assign(s, Arg(i), arg) }, args);
                eval([st, cst, s, w], insns)
            esac
          esac
        esac
    esac
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

fun rememberFuns(env, defs) {
  foldl(fun (env, def) {
    case def of
        Fun(name, args, body) ->
          case lookupFun(env, name) of
            Fun(fLabel, _) -> rememberFun(env, fLabel, args, body)
          esac
      | _                     -> env
    esac
  }, env, defs)
}

var sb = singletonBuffer;

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

fun addDefs(env, defs) {
  foldl(fun (env, def) {
    case def of
        Var(names)         -> addVars(env, names)
      | Fun(name, args, _) ->
        case genFunLabel(env, name) of
          [fLabel, env] -> addFun(env, name, fLabel, args.size)
        esac
    esac
  }, env, defs)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileFun(env, Fun (fLabel, args, body, state)) {
    case genLabel(addArgs(beginFun(env, state), args)) of
      [lab, env] ->
        case compile(lab, env, body) of
          [labUsed, env, code] ->
            [env, label(fLabel, true) <+> sb(BEGIN(fLabel, args.size, getLocals(env))) <+> code <+> label(lab, labUsed) <+> sb(END)]
        esac
    esac
  }

  fun compileFuns(env) {
    case getFuns(env) of
      [funs, env] ->
        case foldl(
          fun ([env, code], f) { case compileFun(env, f) of [env, funCode] -> [env, code <+> funCode] esac },
          [env, emptyBuffer()],
          funs
        ) of [env, code] ->
          case getFuns(env) of
              [{ }, _]   -> [env, code]
            | [_ : _, _] -> case compileFuns(env) of [env, newCode] -> [env, code <+> newCode] esac
          esac
        esac
    esac
  }

  fun compile(lab, env, stmt) {
    case stmt of
        Skip               -> [false, env, emptyBuffer()]
      | Var    (x)         -> [false, env, singletonBuffer(LD(env.lookupVar(x)))]
      | Ref    (x)         -> [false, env, singletonBuffer(LDA(env.lookupVar(x)))]
      | Const  (n)         -> [false, env, singletonBuffer(CONST(n))]
      | Scope  (defs, exp) ->
        case beginScope(env) of
          env -> case addDefs(env, defs) of
            env -> case rememberFuns(env, defs) of
              env -> case compile(lab, env, exp) of
                [labUsed, env, code] -> [labUsed, endScope(env),
                  if isGlobal(env) then
                    foldl(
                      fun (code, def) { code <+ GLOBAL(def) },
                      emptyBuffer(),
                      flatten(map(fun (def) { case def of Var(names) -> names | _ -> { } esac }, defs))
                    )
                    else emptyBuffer()
                  fi <+> code
                ]
              esac
            esac
          esac
        esac
      | Call (name, args)  ->
        var func = lookupFun(env, name);
        var argsCode = foldl(fun ([env, code], arg) {
          case genLabel(env) of
            [argLabel, env] ->
              case compile(argLabel, env, arg) of
                [argLabelUsed, env, argCode] -> [env, code <+> argCode <+> label(argLabel, argLabelUsed)]
              esac
          esac
        }, [env, emptyBuffer()], args);
        case func of
          Fun(fLabel, nargs) ->
            if nargs != args.size then failure("Invalid number of arguments") fi;
            case argsCode of
              [env, argsCode] -> [false, env, argsCode <+ CALL(fLabel, nargs)]
            esac
        esac
      | Binop (op, s1, s2) ->
        case env.genLabel of
          [opLab, env] ->
            case compile(opLab, env, Seq(s1, s2)) of
              [opLabUsed, env, opsCode] -> [false, env, opsCode <+> label(opLab, opLabUsed) <+ BINOP(op)]
            esac
        esac
      | Skip               -> [false, env, emptyBuffer()]
      | Read  (x)          -> [false, env, singletonBuffer(READ) <+ ST(env.lookupVar(x))]
      | Write (e)          ->
        case env.genLabel of
          [writeLab, env] ->
            case compile(writeLab, env, e) of
              [writeLabUsed, env, eCode] -> [false, env, eCode <+> label(writeLab, writeLabUsed) <+ WRITE]
            esac
        esac
      | Assn  (x, v)       ->
        case env.genLabel of
          [stiLab, env] ->
            case compile(stiLab, env, Seq(x, v)) of
              [stiLabUsed, env, assnCode] -> [false, env, assnCode <+> label(stiLab, stiLabUsed) <+ STI]
            esac
        esac
      | Seq   (s1, s2)     ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | If (e, s1, s2)     ->
        case env.genLabels(2) of
          [cjmpLabel, s1Lab, env] ->
            case compile(cjmpLabel, env, e) of
              [cjmpLabelUsed, env, eCode] ->
                case compile(lab, env, s1) of
                  [_, env, s1Code] ->
                    case compile(lab, env, s2) of
                      [_, env, s2Code] ->
                        [true, env, eCode <+> label(cjmpLabel, cjmpLabelUsed) <+> CJMP("ne", s1Lab).sb <+> s2Code <+> JMP(lab).sb <+> label(s1Lab, true) <+> s1Code]
                    esac
                esac
            esac
        esac
      | While (e, s)       ->
        case env.genLabels(3) of
          [cjmpLabel, eLab, sLab, env] ->
            case compile(cjmpLabel, env, e) of
              [cjmpLabelUsed, env, eCode] ->
                case compile(eLab, env, s) of
                  [_, env, sCode] ->
                    [false, env, JMP(eLab).sb <+> label(sLab, true) <+> sCode <+> label(eLab, true) <+> eCode <+> label(cjmpLabel, cjmpLabelUsed) <+> CJMP("ne", sLab).sb]
                esac
            esac
        esac
      | DoWhile (s, e)     ->
        case env.genLabels(3) of
          [cjmpLabel, eLab, sLab, env] ->
            case compile(cjmpLabel, env, e) of
              [cjmpLabelUsed, env, eCode] ->
                case compile(eLab, env, s) of
                  [eLabUsed, env, sCode] ->
                    [false, env, label(sLab, true) <+> sCode <+> label(eLab, eLabUsed) <+> eCode <+> label(cjmpLabel, cjmpLabelUsed) <+> CJMP("ne", sLab).sb]
                esac
            esac
        esac
      | Ignore(e)          ->
        case compile(lab, env, e) of
          [labUsed, env, eCode] -> [labUsed, env, eCode <+ DROP]
        esac
      | _                  -> failure("compileSM not implemented for %s\n", stmt.string)
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of
        [endLabUsed, env, code] -> (
          case compileFuns(env) of
            [env, funsCode] -> getBuffer $
              sb(LABEL ("main")) <+ BEGIN ("main", 0, env.getLocals) <+> code <+> label (endLab, endLabUsed) <+ END <+> funsCode
          esac
        )
      esac
  esac
}

