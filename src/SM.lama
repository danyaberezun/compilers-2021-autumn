-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, w], insns) {
  -- failure("%s\n", showSM(insns));
  case insns of 
    {} -> c
  | i:is -> 
    case i of 
      READ -> case readWorld(w) of 
                [n, w] -> eval(env, [n:stack, state, w], is)
              esac
    | WRITE -> eval(env, [tl(stack), state, writeWorld(hd(stack), w)], is)
    | BINOP (op) -> case stack of
                      r : l : stack -> eval(env, [evalOp(op, l, r):stack, state, w], is)
                    esac 
    | LD (x) -> eval (env, [state(x):stack, state, w], is)
    | LDA (x)   -> eval (env, [x:stack, state, w], is)
    | ST (x) -> eval (env, [tl(stack), state <- [x, hd(stack)], w], is)
    | STI    -> case stack of 
                  v : x : stack -> eval(env, [v:stack, state <- [x, v], w], is)
                esac
    | CONST (n) -> eval (env, [n:stack, state, w], is)
    | LABEL (s) -> eval(env, c, is)
    | JMP (l)   -> eval(env, c, env.fromLabel(l))
    | CJMP (0, l) -> eval(env, [tl(stack), state, w], if hd(stack) then is else env.fromLabel(l) fi)
    | DUP       -> eval(env, [hd(stack):stack, state, w], is)
    | DROP      -> eval(env, [tl(stack), state, w], is)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read   (x)        -> [false, env, singletonBuffer(READ) <+ ST(x)]
    | Write  (e)        -> case env.genLabel of 
                              [eLab, env] -> 
                                  case compile(eLab, env, e) of 
                                    [eLabUsed, env, eCode] ->  [false, env, eCode <+> label(eLab, eLabUsed) <+ WRITE]
                                  esac
                           esac
    | Assn (e1, e2)     -> case env.genLabels(2) of
                              [e2Lab, stiLab, env] -> 
                                  case compile(stiLab, env, e2) of 
                                    [stiLabUsed, env, eCode] ->  
                                      case compile(e2Lab, env, e1) of
                                        [e2LabUsed, env, xCode] -> [false, env, xCode <+> label(e2Lab, e2LabUsed) <+> eCode <+> label(stiLab, stiLabUsed) <+ STI]
                                      esac
                                  esac
                           esac
    | Seq (e1, e2)      -> case env.genLabel of 
                              [e2Lab, env] -> 
                                  case compile(e2Lab, env, e1) of 
                                    [e2LabUsed, env, e1Code] -> 
                                      case compile(lab, env, e2) of 
                                        [labUsed, env, e2Code] -> [labUsed, env, e1Code <+> label(e2Lab, e2LabUsed) <+> e2Code]
                                      esac
                                  esac
                           esac
    | If (e, e1, e2)    -> case env.genLabels(2) of 
                              [e2Lab, e1Lab, env] -> 
                                case compile(e1Lab, env, e) of 
                                  [e1LabUsed, env, eCode] -> 
                                    case compile(lab, env, e1) of 
                                      [_, env, e1Code] -> 
                                        case compile(lab, env, e2) of 
                                          [_, env, e2Code] -> [true, env, eCode <+> label(e1Lab, e1LabUsed) <+ CJMP(0, e2Lab) <+>
                                                                          e1Code  <+ JMP(lab) <+>  label(e2Lab, true) <+> e2Code]
                                        esac
                                    esac
                                esac
                           esac
    | While (e, e1)    -> case env.genLabels(2) of 
                              [e1Lab, eLab, env] -> 
                                case compile(e1Lab, env, e) of 
                                  [e1LabUsed, env, eCode] -> 
                                    case compile(eLab, env, e1) of
                                      [_, env, e1Code] -> [true, env, label(eLab, true) <+> eCode <+> label(e1Lab, e1LabUsed) <+
                                                                      CJMP(0, lab) <+> e1Code <+ JMP(eLab)]
                                    esac
                                esac
                          esac
    | DoWhile (e1, e)  -> case env.genLabels(3) of 
                              [eLab, e1Lab, endLab, env] -> 
                                case compile(endLab, env, e) of
                                  [endLabUsed, env, eCode] -> 
                                    case compile(eLab, env, e1) of 
                                      [eLabUsed, env, e1Code] -> [true, env, label (e1Lab, true) <+> e1Code <+> label(eLab, eLabUsed) <+>
                                                                             eCode <+> label(endLab, endLabUsed) <+ CJMP(0, lab) <+ JMP(e1Lab)]
                                    esac
                                esac
                          esac
    | Ignore (e)       -> case env.genLabel of 
                              [eLab, env] -> 
                                case compile(eLab, env, e) of
                                  [eLabUsed, env, eCode] -> [false, env, eCode <+> label(eLab, eLabUsed) <+ DROP]
                                esac
                          esac
    | Binop (op, l, r) -> case env.genLabels(2) of
                              [rLab, opLab, env] -> 
                                case compile(rLab, env, l) of
                                  [rLabUsed, env, lCode] -> 
                                    case compile(opLab, env, r) of 
                                      [opLabUsed, env, rCode] -> [false, env, lCode <+> label(rLab, rLabUsed) <+>
                                                                              rCode <+> label(opLab, opLabUsed) <+ BINOP(op)]
                                    esac
                                esac
                          esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
