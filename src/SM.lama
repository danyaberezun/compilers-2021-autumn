-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  fun evalIns(c@[stack, state, world], i) {
    case i of
      READ  -> ( 
        case readWorld(world) of
          [value, new_world] -> [value: stack, state, new_world]
        esac 
    )
    | WRITE     -> (
      case stack of
          top: new_stack -> [new_stack, state, writeWorld(top, world)]
      esac
    )
    | BINOP (s) -> (
      case stack of
         y: x: new_stack -> [evalBinop(s, x, y): new_stack, state, world]
      esac
    )
    | LD    (x) -> [state (x) : stack, state, world]
    | ST    (x) -> (
      case stack of
        top: new_stack -> [new_stack, state <- [x, top], world]
      esac
    )
    | CONST (n) -> [n : stack, state, world]
    esac
  }
  case insns of 
      {} -> c  
    | i: rem -> eval(evalIns(c, i), rem) 
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (x) -> { LD (x) }
  | Const (n) -> { CONST (n) }
  | Binop (op, x, y) -> compileExpr (x) +++ compileExpr (y) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (x, expr) ->  compileExpr (expr) +++ { ST (x) }
    | Seq (st1, st2) -> compileSM(st1) +++ compileSM (st2)
    | Skip -> {}
    | Read (x) -> { READ, ST (x) }
    | Write (expr) -> compileExpr (expr) +++ { WRITE }
  esac
}
