-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun emptyStackError () {
  failure ("Trying to get value from empty stack")
}

fun getValueFromStack (st) {
  case st of
    []     -> emptyStackError ()
  | x : xs -> [x, xs]
  esac
}

fun evalInsn (c, i) {
  var stack = c[0];
  var state = c[1];
  var world = c[2];
  case i of
    READ      -> 
      var value = readWorld (world);
      [value[0] : stack, state, value[1]]
  | WRITE     ->
      var value = getValueFromStack (stack);
      [value[1], state, writeWorld (value[0], world)]
  | BINOP (s) ->
      var st1 = getValueFromStack (stack);
      var st2 = getValueFromStack (st1[1]);
      var r = st1[0];
      var l = st2[0];
      var newStack = st2[1];
      [(evalBinop (s, l, r)) : newStack, state, world]
  | LD    (x) ->
      [(state (x)) : stack, state, world]
  | ST    (x) ->
      var value = getValueFromStack (stack);
      [value[1], state <- [x, value[0]], world]
  | CONST (n) ->
      [n : stack, state, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {}     -> c
  | x : xs -> eval (evalInsn (c, x), xs)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x)        -> {LD (x)}
  | Const (n)        -> {CONST (n)}
  | Binop (op, l, r) -> (compileExpr (l)) +++ (compileExpr (r)) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, expr)      -> (compileExpr (expr)) +++ {ST (x)}
  | Seq  (stmt1, stmt2) -> (compileSM (stmt1)) +++ (compileSM (stmt2))
  | Skip                -> {}
  | Read (x)            -> {READ} +++ {ST (x)}
  | Write (expr)        -> (compileExpr (expr)) +++ {WRITE}
  esac
}
