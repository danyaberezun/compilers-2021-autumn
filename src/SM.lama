-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration

fun makeBool(x) {
  case x of
    "z" ->  0
  | "ne" -> 1
  | 0   ->  0
  | _   ->  1
  esac
}

fun eval (env, c@[stack, state, world], insns) {
  case insns of
    {} -> c
  | i:tail ->
      case i of 
        JMP (l)     -> eval(env, c, env.fromLabel(l))
      | CJMP (cond, l) -> case stack of x:rem ->
                            if makeBool(x) == makeBool(cond)
                              then eval(env, [rem, state, world], env.fromLabel(l))
                              else eval(env, [rem, state, world], tail)
                            fi
                          esac
      | _           -> eval(env,
                            case i of
                              READ       ->
                                case readWorld(world) of 
                                  [value, world] -> [value:stack, state, world]
                                esac
                            | WRITE      -> [stack.tl, state, writeWorld(stack.hd, world)]
                            | BINOP (op) ->
                                case stack of x:y:rem ->
                                  [applyBinop(op, y, x):rem, state, world]
                                esac
                            | LD    (x)  -> [state(x):stack, state, world]
                            | ST    (x)  -> [stack.tl, state <- [x, stack.hd], world]
                            | CONST (n)  -> [n:stack, state, world]
                            | LABEL (s)  -> c
                            esac,
                            tail)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- iter (fun (x) {printf("%s\n", x.string)}, insns);
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (s)           -> singletonBuffer $ LD (s)
  | Const (x)         -> singletonBuffer $ CONST (x)
  | Binop (s, e1, e2) -> compileExpr(e1) <+> compileExpr(e2) <+ BINOP (s)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {

  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2) -> 
        case env.genLabels (2) of
          [s1Lab, elseBranch, env] ->
            case compile (s1Lab, env, s1) of
              [s1LabUsed, env, s1Code] ->
                case compile (lab, env, s2) of
                  [_, env, s2Code] ->
                    [
                      true, env,
                      compileExpr(e) <+ CJMP("z", elseBranch) <+>
                      s1Code <+> label (s1Lab, s1LabUsed) <+ JMP (lab) <+
                      LABEL (elseBranch) <+> s2Code
                    ]
                esac  
            esac
        esac
    | DoWhile (e, s) -> 
        case env.genLabels (2) of
          [whileLabel, sLabel, env] ->
            case compile (sLabel, env, s) of
              [sLabelUsed, env, sCode] ->
                [ 
                  false, env,
                  LABEL (whileLabel).singletonBuffer <+> sCode <+>
                  label (sLabel, sLabelUsed) <+> compileExpr (e) <+
                  CJMP ("ne", whileLabel)
                ]
            esac
        esac
    | While (e, s) ->
        case env.genLabels (2) of
          [whileLabel, sLabel, env] ->
            case compile (sLabel, env, s) of
              [_, env, sCode] ->
                [ 
                  false, env,
                  JMP (sLabel).singletonBuffer <+ LABEL (whileLabel) <+> sCode <+
                  LABEL (sLabel) <+> compileExpr (e) <+
                  CJMP ("ne", whileLabel)
                ]
            esac
        esac

    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
      esac
  esac
}
