-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case c of [stack, state, world] -> case insns of
    {} -> c
    | inst : insns -> 
      case inst of 
        READ -> case (world.readWorld) of
          [rd, w2] ->  eval([rd : stack, state, w2], insns)
        esac
      | WRITE -> case stack of 
          (x : y) -> eval([y, state, writeWorld(x, world)], insns)
        esac
      | BINOP (op) -> case stack of
          (x : (y : z)) -> eval([evalBinop(op, y, x) : z, state, world], insns)
        esac
      | LD (x) -> eval([state(x) : stack, state, world], insns)
      | ST (x) -> case stack of
          (y : z) -> eval([z, state <- [x, y], world], insns)
        esac 
      | CONST (n) -> eval([n : stack, state, world], insns)
      esac 
  esac
  esac

}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> {LD(x)}
  | Const (n) -> {CONST(n)}
  | Binop (op, exp1, exp2) -> compileExpr(exp1) +++ compileExpr(exp2) +++ {BINOP(op)}
  esac 
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, exp) -> compileExpr(exp) +++ {ST (x)} 
  | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Read (x) -> {READ, ST (x)}
  | Write (exp) -> compileExpr(exp) +++ {WRITE}
  | Skip -> {}
  esac 
}
