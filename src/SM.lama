-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c @ [stack, state, world], insns) {
  fun newInstructions(insnsHead, insnsTail) {
    case insnsHead of
      READ -> insnsTail
    | WRITE -> insnsTail
    | BINOP(s) -> insnsTail
    | LD(x) -> insnsTail
    | ST(x) -> insnsTail
    | CONST(n) -> insnsTail
    | JMP(lab) -> env.fromLabel(lab)
    | LABEL(lab) -> insnsTail
    | CJMP(flg, lab) -> 
        case stack of
          cond : newStk -> 
            if cond != 0 then
              env.fromLabel(lab)
            else
              insnsTail
            fi
        esac
    | _ -> failure("Unsupported instruction for instructions step.")
    esac
  }

  fun sameWorldCondition(stk, st) {
    [stk, st, world]
  }

  case insns of 
    insnsHead : insnsTail ->
      eval(
        env, 
        case insnsHead of
          READ ->
            case readWorld(world) of
              [readInteger, newWorld] -> [
                readInteger : stack,  -- New stack with added readInteger
                state,                -- State with no changes
                newWorld              -- World after reading
              ]
            esac                                     |
          WRITE ->
            case stack of
              top : rest -> [
                rest,                    -- Stack without taken top
                state,                   -- State with no changes
                writeWorld(top, world)   -- New world after writing top of a 
                                         -- stack
              ]                                                     |
              _ -> failure("WRITE operation with invalid stack.\n")
            esac                                     |
          BINOP(opStr) ->
            case stack of
              top1 : top2 : rest -> ( -- Take two integers from stack.
                  var newStack = evalBinOp(opStr, top2, top1) : rest;
                  sameWorldCondition(
                    newStack, -- Stack with result of binary operation
                              -- on two top elements of stack
                    state     -- State with no changes
                  )
              )                                           |
              _ -> failure("BINOP with invalid stack.\n")
            esac                                     |
          LD(x) -> sameWorldCondition(
            state(x) : stack,          -- Stack with x on top
            state                     -- State with no changes
          )                                          |
          ST(x) ->
            case stack of
              xValue : tail -> sameWorldCondition(
                tail,                -- Stack without taken element
                state <- [x, xValue] -- State with new added binding for x
              )                                                |
              _ -> failure("ST operation with invalid stack.\n")
            esac                                     |
          CONST(n) -> sameWorldCondition(
            n : stack,  -- Put const on stack
            state       -- State with no changes
          )                                          |
          JMP (lab) -> c                             |
          LABEL (lab) -> c                           |
          CJMP (flg, lab) ->
            case stack of
              cond : newStk -> sameWorldCondition(
                newStk,  -- Stack with taken condition
                state    -- State with no changes
              )                                                     |
              _ -> failure("CJMP operation with ionvalid stack.\n")
            esac
          esac,
          newInstructions(insnsHead, insnsTail)
      )
  | _ -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var   (name) -> singletonBuffer (LD (name)) 
  | Const (value) -> singletonBuffer (CONST (value))
  | Binop (op, ex1, ex2) -> compileExpr(ex1) <+> compileExpr(ex2) <+> singletonBuffer (BINOP (op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun genWhile(compiledExpr, compiledStmt, whileExprLabel, whileStmtLabel) {
    singletonBuffer (JMP (whileExprLabel))
      <+> label (whileStmtLabel, true)
      <+> compiledStmt
      <+> label (whileExprLabel, true)
      <+> compiledExpr
      <+ CJMP("nz", whileStmtLabel)
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip -> [
        false,          -- Skip does not use label.
        env,            -- Compilation environment with no changes.
        emptyBuffer ()  -- No code generated
      ]
    | Read (x) -> [
        false,                 -- Read does not use label
        env,                   -- Compilation environment with no changes
        singletonBuffer (READ)
          <+ ST (x)            -- Read code
      ]
    | Write (e) -> [
        false,                    -- Write does not use label
        env,                      -- Compilation environment with no changes
        compileExpr (e) <+ WRITE  -- Write code
      ]
    | Assn (x, e) -> [
        false,                     -- Assign does not use label
        env,                       -- Compilation environment with no changes
        compileExpr (e) <+ ST (x)  -- Code for assign
      ]
    | Seq (stmt1, stmt2) ->
        case env.genLabel of
          [stmt2Label, envAfterGen] ->
             case compile (lab, envAfterGen, stmt1) of
               [labUsed, envAfterCompile1, stmt1Compiled] ->
                  case compile (stmt2Label, envAfterCompile1, stmt2) of
                    [stmt2LabelUsed, envFinal, stmt2Compiled] -> 
                      var compiled = stmt1Compiled
                        <+> label (stmt2Label, stmt2LabelUsed)
                        <+> stmt2Compiled;
                      [
                        labUsed,  -- lab is possibly used for stmt1
                        envFinal, -- env after creating label & compilations
                        compiled  -- Compiled code.
                      ]
                  esac
             esac
        esac
    | While (expr, whileStmt) ->
      case env.genLabels(2) of
        [whileStmtLabel, whileExpressionLabel, envAfterGen] -> 
          case compile(whileStmtLabel, envAfterGen, whileStmt) of
            [isStmtLabelUsed, envFinal, whileStmtCompiled] ->
              var compiled = genWhile(
                compileExpr(expr),
                whileStmtCompiled,
                whileExpressionLabel,
                whileStmtLabel
              );
              [
                false,    -- Label is not used, there are no labels at the
                          -- beginning
                envFinal, -- Final env
                compiled  -- Compiled code
              ]
          esac
      esac
    | DoWhile (whileStmt, expr) ->
        case compile(lab, env, whileStmt) of
          [labUsed, env, subCode] -> 
            var compiled = subCode <+> compileExpr (expr) <+ CJMP("nz", lab);
            [
              true,     -- Always use lab because we have it and need only one l
              env,      -- env with no changes
              compiled  -- Code for loop
            ]
        esac
    | If (expr, stmt1, stmt2) ->
        case env.genLabels(3) of
          [s1Lab, s2Lab, fLab, envAfterGen] ->
            case compile(s1Lab, envAfterGen, stmt1) of
              [s1LabUsed, envAfterCompile1, s1Code] ->
                case compile(s2Lab, envAfterCompile1, stmt2) of
                  [s2LabUsed2, finalEnv, s2Code] -> 
                    var compiled = compileExpr(expr)
                        <+ CJMP("nz", s1Lab)
                        <+> s2Code
                        <+ JMP(fLab)
                        <+> label(s1Lab, true)
                        <+> s1Code
                        <+> label(fLab, true);
                    [
                      false,    -- No label usage
                      finalEnv, -- Resulting environment
                      compiled  --Code for if
                    ]
                esac
            esac
        esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}