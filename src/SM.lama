-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s, f)    -> sprintf ("LABEL %s, %d", s, f)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  | META (m)         -> sprintf ("META %s", m.string)
  | PATT (p)         -> sprintf ("PATT %s", p.string)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}                  -> m
            | LABEL (lab, _) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl              -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun createLocal(st, a, l) {
    case take(st, a) of
      [tail, args] -> case makeState(a, l) of
        s ->
          foldl(fun(acc, x) {assign(s, Arg (acc), x); acc + 1}, 0, args);
          [tail, s]
      esac
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    -- printf("%s\n", showSM(insns));
    case insns of 
      {}        -> c
    | insn:insnTail ->
      -- printf("%s\n", showSMInsn(insn));
      case insn of
      BINOP (op) ->
          case st of
            rhv:lhv:tail -> eval([evalOp(op, lhv, rhv):tail, cst, s, w], insnTail)
          esac
      | LD (x) -> eval([lookup(s, x):st, cst, s, w], insnTail)
      | ST (x) ->
          case st of
            head:tail -> assign(s, x, head); eval([tail, cst, s, w], insnTail)
          esac
      | CONST (n) -> eval([n:st, cst, s, w], insnTail)
      | LABEL (_, _) -> eval(c, insnTail)
      | JMP (lab) -> eval(c, fromLabel(env, lab))
      | CJMP (c, lab) ->
        case st of
          z:tail -> 
            case [c, z] of
              ["nz", 0] -> eval([tail, cst, s, w], insnTail)
            | ["nz", _] -> eval([tail, cst, s, w], fromLabel(env, lab))
            | ["z", 0]  -> eval([tail, cst, s, w], fromLabel(env, lab))
            | ["z", _]  -> eval([tail, cst, s, w], insnTail)
            esac
        esac
      | DROP ->
        case st of 
          head:tail -> eval([tail, cst, s, w], insnTail)
        esac
      | DUP ->
        case st of head:tail ->
          eval([head:head:tail, cst, s, w], insnTail)
        esac
      | LDA(x) -> eval([RefVal(x):st, cst, s, w], insnTail)
      -- | STI -> -- UNUSED
      --   case st of
      --     v:(RefVal(x)):tail -> assign(s, x, v); eval([v:tail, cst, s, w], insnTail)
      --   esac
      | GLOBAL (x) -> assign(s, Glb(x), 0); eval([st, cst, s, w], insnTail)
      | BEGIN (fLabel, a, l) -> 
        case createLocal(st, a, l) of 
          [st2, s2] -> eval([st2, cst, s2, w], insnTail)
        esac
      | END -> case cst of
          {} -> [st, cst, s, w]
        | [ns, p]:tail -> eval([st, tail, ns, w], p)
        esac
      | CALL (fLab, _) -> eval([st, [s, insnTail]:cst, s, w], fromLabel(env, fLab))
      | BUILTIN (f, a) ->
        case take(st, a) of [tail, args] ->
          case evalBuiltin(f, args, w) of [v, w] ->
            eval([v:tail, cst, s, w], insnTail)
          esac
        esac
      | STA ->
        case st of 
          v:(RefVal(x)):_:tail   -> assign(s, x, v); eval([v:tail, cst, s, w], insnTail)
        | v:i:a:tail -> case a of 
            Sexp (_, arr) -> arr[i] := v; eval([v:tail, cst, s, w], insnTail)
          | _             -> a[i] := v;   eval([v:tail, cst, s, w], insnTail)
          esac
        esac
      | SEXP (name, n) ->
        case take(st, n) of [tail, vals] ->
          eval([Sexp (name, listArray(vals)):tail, cst, s, w], insnTail)
        esac
      | ARRAY (n) ->
        case take(st, n) of [tail, vals] ->
          eval([listArray(vals):tail, cst, s, w], insnTail)
        esac
      | STRING (strconst) -> eval([strconst:st, cst, s, w], insnTail)
      | ELEM ->
        case st of i:a:tail ->
          case a of 
            Sexp (_, arr) -> eval([arr[i]:tail, cst, s, w], insnTail)
          | _             -> eval([a[i]:tail, cst, s, w], insnTail)
          esac
        esac
      | PATT (p) ->
        case st of v:tail -> (
          var nv = case p of
            Tag (t, n) -> 
              case v of 
                Sexp (name, xs) -> tagHash(name) == tagHash(t) && n == length(xs)
              | _               -> false
              esac
          | Array (n) ->
              case v of
                #array -> n == length(v)
              | _      -> false
              esac
          esac;
          eval([nv:tail, cst, s, w], insnTail)
        )
        esac
      esac
    esac
  }
  

  -- printf ("%s\n", showSM (insns));
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab, 0))
    else emptyBuffer ()
    fi
  }

  -- Common code for array matching and s-expr matching
  fun compileMatchArray(failLab, env, ps, patInstArg) {
    case genLabels(env, 2) of [dropLab, eLab, env] -> 
      case foldl(fun([env, ind, accCode], pat) {
        case compileMatch(dropLab, env, pat) of [env, patCode] ->
          [env, ind + 1, accCode <+ DUP <+ CONST (ind) <+ ELEM <+> patCode]
        esac
      }, [env, 0, emptyBuffer()], ps) of [env, _, innerCode] ->
        [env, singletonBuffer(DUP) <+ PATT (patInstArg) <+ CJMP ("z", dropLab) <+> innerCode <+ DROP <+ JMP (eLab) <+ LABEL (dropLab, 0) <+ DROP <+ JMP (failLab) <+ LABEL (eLab, 0)]
      esac
    esac
  }

  -- If matching fails, goes to failLab, else goes to the end, removes scrut from stack
  fun compileMatch(failLab, env, pat) {
    case pat of 
      Array (ps) -> compileMatchArray(failLab, env, ps, Array (size(ps)))
    | Sexp (name, ps) -> compileMatchArray(failLab, env, ps, Tag (name, size(ps)))
    | Wildcard -> [env, singletonBuffer(DROP)]
    | Const (x) -> [env, singletonBuffer(CONST (x)) <+ BINOP ("==") <+ CJMP ("z", failLab)]
    | Named (_, pat) -> compileMatch(failLab, env, pat)
    esac
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVal(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x))) <+ DUP]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)        -> 
      case genLabel(env) of
        [nLab, env] ->
          case compile(nLab, env, e) of
            [nLabUsed, env, eCode] -> [false, env, eCode <+> label(nLab, nLabUsed) <+ DROP]
          esac
      esac
    | Assn  (x, e)      ->
      case genLabels(env, 2) of [xLab, eLab, env] -> 
        case compile(xLab, env, x) of [xLabUsed, env, xCode] -> 
          case compile(eLab, env, e) of [eLabUsed, env, eCode] -> 
            [false, env, xCode <+> label(xLab, xLabUsed) <+> eCode <+> label(eLab, eLabUsed) <+ STA]
          esac
        esac
      esac
    | Set (x, e) -> 
      case genLabel(env) of [eLab, env] ->
        case compile(eLab, env, e) of [eLabUsed, env, eCode] ->
          case lookupVal(env, x) of varLoc ->
            [false, env, eCode <+> label(eLab, eLabUsed) <+ DUP <+ ST (varLoc)]
          esac
        esac
      esac
    | Binop (op, lhs, rhs) -> 
        case genLabels(env, 2) of 
          [lhsLab, rhsLab, env] ->
            case compile(lhsLab, env, lhs) of
              [lhsLabUsed, env, lhsCode] ->
                case compile(rhsLab, env, rhs) of
                  [rhsLabUsed, env, rhsCode] -> [false, env, lhsCode <+> label(lhsLab, lhsLabUsed) <+> rhsCode <+> label(rhsLab, rhsLabUsed) <+ BINOP (op)]
                esac
            esac
        esac
    | Seq   (s1, s2)    ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | While (e, s) ->
      case env.genLabels(3) of [eLab, sLab, eEndLab, env] -> 
        case compile(eLab, env, s) of [_, env, sCode] ->
          case compile(eEndLab, env, e) of [eEndLabUsed, env, eCode] ->
            [false, env, singletonBuffer(JMP (eLab)) <+ LABEL (sLab, true) <+> sCode <+ LABEL (eLab, 0) <+> eCode <+> label(eEndLab, eEndLabUsed) <+ CJMP ("nz", sLab)]
          esac
        esac
      esac
    | DoWhile (s, e) ->
      case env.genLabels(3) of [eLab, sLab, eEndLab, env] -> 
        case compile(eLab, env, s) of [eLabUsed, env, sCode] ->
          case compile(eEndLab, env, e) of [eEndLabUsed, env, eCode] ->
            [false, env, singletonBuffer(LABEL (sLab, 0)) <+> sCode <+> label (eLab, eLabUsed) <+> eCode <+> label(eEndLab, eEndLabUsed) <+ CJMP ("nz", sLab)]
          esac
        esac
      esac
    | If (e, tru, fls) ->
      case env.genLabels(3) of [flsLab, truEndLab, eEndLab, env] ->
        case compile(eEndLab, env, e) of [eEndLabUsed, env, eCode] ->
          case compile (truEndLab, env, tru) of [truEndUsed, env, truCode] ->
            case compile (lab, env, fls) of [_, env, flsCode] ->
              [true, env, eCode <+> label(eEndLab, eEndLabUsed) <+ CJMP ("z", flsLab) <+> truCode <+> label(truEndLab, truEndUsed) <+ JMP (lab) <+ LABEL (flsLab, 0) <+> flsCode]
            esac
          esac
        esac
      esac
    | Scope (ds, e) ->
      case addDefs(beginScope(env), ds) of [globsCode, env] ->
        case addFuns(env, ds) of env ->
          case genLabel(env) of [eLab, env] ->
            case compile(eLab, env, e) of [eLabUsed, env, bodyCode] ->
              if isGlobal(env) then
                case compileFuns(env) of [funsCode, env] ->
                  [false, endScope(env), singletonBuffer(BEGIN ("main", 0, getLocals(env))) <+> globsCode <+> bodyCode <+> label(eLab, eLabUsed) <+ END <+> funsCode]
                esac
              else
                [false, endScope(env), bodyCode <+> label(eLab, eLabUsed)]
              fi
            esac
          esac
        esac
      esac
    | Call (f, es) ->
      case genLabel(env) of [callLab, env2] ->
        case compile(callLab, env2, foldr(fun (acc, e) {Seq(e, acc)}, Skip, es)) of [callLabUsed, env3, code] ->
          case lookupFun(env, f) of Fun (fLabel, a) ->
            if (fLabel[0] == 'L') then
              [false, env3, code <+> label(callLab, callLabUsed) <+ CALL (fLabel, a)]
            else
              [false, env3, code <+> label(callLab, callLabUsed) <+ BUILTIN (f, a)]
            fi
          esac
        esac
      esac
    | String (s) -> [false, env, singletonBuffer(STRING (s))]
    | Array (es) -> 
      case genLabel(env) of [arrLab, env] ->
        case compile(arrLab, env, foldr(fun (acc, e) {Seq(e, acc)}, Skip, es)) of [arrLabUsed, env, code] ->
          [false, env, code <+> label(arrLab, arrLabUsed) <+ ARRAY (size(es))]
        esac
      esac
    | Sexp (s, es) ->
      case genLabel(env) of [sexpLab, env] ->
        case compile(sexpLab, env, foldr(fun (acc, e) {Seq(e, acc)}, Skip, es)) of [sexpLabUsed, env, code] ->
          [false, env, code <+> label(sexpLab, sexpLabUsed) <+ SEXP (s, size(es))]
        esac
      esac
    | Elem (a, i) ->
      case genLabels(env, 2) of [iLab, elemLab, env] ->
        case compile(iLab, env, a) of [iLabUsed, env, aCode] ->
          case compile(elemLab, env, i) of [elemLabUsed, env, iCode] ->
            [false, env, aCode <+> label(iLab, iLabUsed) <+> iCode <+> label(elemLab, elemLabUsed) <+ ELEM]
          esac
        esac
      esac
    | ElemRef (a, i) ->
      case genLabels(env, 2) of [iLab, elemLab, env] ->
        case compile(iLab, env, a) of [iLabUsed, env, aCode] ->
          case compile(elemLab, env, i) of [elemLabUsed, env, iCode] ->
            [false, env, aCode <+> label(iLab, iLabUsed) <+> iCode <+> label(elemLab, elemLabUsed)]
          esac
        esac
      esac
    | Case (name, brs, defValue) ->
      case foldl(fun ([env, accCode], [pat, br]) {
        case genLabels(env, 2) of [eLab, bodyLab, env] ->
          case compileMatch(eLab, env, pat) of [env, matchCode] ->
            case compile(lab, env, br) of [_, env, brCode] ->
              [env, accCode <+ LD(lookupVal(env, name)) <+> matchCode <+> brCode <+ JMP (lab) <+ LABEL (eLab, 0)]
            esac
          esac
        esac
      }, [env, emptyBuffer()], brs) of [env, brsCode] ->
        case compile(lab, env, defValue) of [_, env, defValueCode] ->
          [true, env, brsCode <+> defValueCode]
        esac
        -- case compile(lab, env, brs[0][1]) of [_, env, allFailCode] -> -- Dirty hack to fix stack state if all matches failed
        --   [true, env, brsCode <+> allFailCode]
        -- esac
      esac 
    | Builtin (_, _) -> failure("Builtin expr not used")
    esac
  }

  fun compileFuns(env) {
    case getFuns(env) of
      [{}, env0] -> [emptyBuffer(), env0]
    | [fs, env0] -> 
      case foldr(fun ([accCode, accEnv], Fun (fLabel, args, body, state)) {
          case genLabel(addArgs(accEnv.beginFun(state), args)) of [endLab, env] ->
            case compile(endLab, env, body) of [endLabUsed, env2, bodyCode] ->
              [singletonBuffer(LABEL (fLabel, 0)) <+ BEGIN (fLabel, size(args), getLocals(env2)) <+> bodyCode <+> label(endLab, endLabUsed) <+ END <+> accCode, endScope(env2)]
            esac 
          esac
        }, [emptyBuffer(), env0], fs) of [code, nEnv] ->
          case compileFuns(nEnv) of [tailCode, nEnv2] -> [code <+> tailCode, nEnv2] esac
      esac
    esac
  }

  fun addFuns(env, ds) {
    case ds of 
      {} -> env
    | (d:tail) -> 
      case d of
        Var (xs) -> addFuns(env, tail)
      | Val (xs) -> addFuns(env, tail)
      | Fun (name, args, body) -> 
        case lookupFun(env, name) of 
          Fun (fLabel, _) -> addFuns(rememberFun(env, fLabel, args, body), tail)
        esac 
      esac
    esac
  }

  fun addDefs(env, ds) {
    case ds of 
      {} -> [emptyBuffer(), env]
    | (d:tail) -> 
      case d of
        Var (xs) -> 
          case addDefs(addVars(env, xs), tail) of [code, nEnv] ->
            if isGlobal(env) then 
              [foldr(fun (acc, x) {acc <+ GLOBAL (x)}, emptyBuffer(), xs) <+> code, nEnv]
            else
              [code, nEnv]
            fi
          esac
      | Val (xs) -> 
          case addDefs(addVals(env, xs), tail) of [code, nEnv] ->
            if isGlobal(env) then 
              [foldr(fun (acc, x) {acc <+ GLOBAL (x)}, emptyBuffer(), xs) <+> code, nEnv]
            else
              [code, nEnv]
            fi
          esac
      | Fun (name, args, body) -> 
        case genFunLabel(env, name) of [fLabel, nEnv] ->
          addDefs(addFun(nEnv, name, fLabel, size(args)), tail)
        esac
      esac
    esac
  }

  fun regularizeProg(prog) {
    case prog of
      Scope(_, _) -> prog
    | _           -> Scope({}, prog)
    esac
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compile (endLab, env, regularizeProg(stmt)) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
