-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {}        -> c
  | head:tail -> eval (evalInsn (c, head), tail)
  esac
}

fun evalInsn ([stack, st, w], insn) {
  case insn of
    READ          -> case readWorld (w) of [value, w2] -> [value:stack, st, w2] esac
  | WRITE         -> case stack of head:tail -> [tail, st, writeWorld (head, w)] esac
  | BINOP (op)    -> case stack of x:y:tail  -> [binop (op) (y, x) : tail, st, w] esac
  | LD    (name)  -> [st (name) : stack, st, w]
  | ST    (name)  -> case stack of head:tail -> [tail, st <- [name, head], w] esac
  | CONST (value) -> [value:stack, st, w]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (name)            -> {LD (name)}
  | Const (value)           -> {CONST (value)}
  | Binop (op, left, right) -> compileExpr (left) +++ compileExpr (right) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (name, expr)    -> compileExpr (expr) +++ {ST (name)}
  | Seq   (first, second) -> compileSM (first) +++ compileSM (second)
  | Skip                  -> {}
  | Read  (name)          -> {READ, ST (name)}
  | Write (expr)          -> compileExpr (expr) +++ {WRITE}
  esac
}
