-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (
    fun ([stack, st, w], insn) {
      case insn of
        READ      ->
          case readWorld (w) of 
            [z, w1] -> [z:stack, st, w1]
          esac
      | WRITE     ->
          case stack of
            i:is    -> [is, st, writeWorld (i, w)]
          esac
      | BINOP (s) ->
          case stack of
            y:x:is  -> [binop (s) (x, y):is, st, w]
          esac
      | LD (x)    -> [st (x):stack, st, w]
      | ST (x)    ->
          case stack of
            i:is    -> [is, st <- [x, i], w]
          esac
      | CONST (n) -> [n:stack, st, w]
      esac
    },
    c,
    insns
  )
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x)        -> { LD (x) }
  | Const (n)        -> { CONST (n) }
  | Binop (op, x, y) -> compileExpr (x) +++ compileExpr (y) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (x, e)   -> compileExpr (e) +++ { ST (x) }
  | Seq   (s1, s2) -> compileSM  (s1) +++ compileSM (s2)
  | Skip           -> {}
  | Read  (x)      -> { READ, ST (x) }
  | Write (e)      -> compileExpr (e) +++ { WRITE }
  esac
}
