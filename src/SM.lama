-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {}         -> c
  | ins : tail -> eval (evalInstruction (c, ins), tail)
  esac
}

fun evalInstruction ([stack, st, w], ins) {
  case ins of
    READ        -> case readWorld (w) of [n, newW] -> [n : stack, st, newW] esac
  | WRITE       -> case stack of
      top : tail -> [tail, st, writeWorld (top, w)]
    | {}         -> emptyStackError ("WRITE")
    esac
  | BINOP (op) -> case stack of
      b : a : tail -> [getOp (op) (a, b) : tail, st, w]
    | _            -> emptyStackError ("BINOP")
    esac
  | LD     (x)  -> [st (x) : stack, st, w]
  | ST     (x)  -> case stack of
      top : tail -> [tail, st <- [x, top], w]
    | _          -> emptyStackError ("ST")
    esac
  | CONST  (x)  -> [x : stack, st, w]
  | _           -> failure ("Unknown instruction: %s\n", ins.string)
  esac
}

fun emptyStackError (op) {
  failure ("Not enough values on the stack for %s\n", op)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x)               -> {LD (x)}
  | Const (n)               -> {CONST (n)}
  | Binop (op, left, right) -> compileExpr (left) +++ compileExpr (right) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (x, expr)     -> compileExpr (expr) +++ {ST (x)}
  | Seq   (left, right) -> compileSM (left) +++ compileSM (right)
  | Skip                -> {}
  | Read  (x)           -> READ : {ST (x)}
  | Write (expr)        -> compileExpr (expr) +++ {WRITE}
  esac
}

