-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, s, w], insns) {
  case insns of
      {}                  -> c
    | BINOP(op):insnsEnd  -> case stack of
                              (x:y:stackEnd) -> eval([get_infix(op)(x, y):stackEnd, s, w], insnsEnd)
                              esac
    | CONST(n):insnsEnd   -> eval([n:stack, s, w], insnsEnd)
    | READ:insnsEnd       -> case readWorld(w) of
                              [n, wr] -> eval([n:stack, s, wr], insnsEnd)
                              esac
    | WRITE:insnsEnd      -> case stack of
                              n:stackEnd -> eval([stack, s, writeWorld(n, w)], insnsEnd)
                              esac
    | LD(x):insnsEnd      -> eval([s(x):stack, s, w], insnsEnd)
    | ST(x):insnsEnd      -> case stack of
                              n:stackEnd -> eval([stack, s <- [x, n], w], insnsEnd)
                              esac
    esac
  -- failure ("SM eval not implemented\n")
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var(x)            -> {LD(x)}
    | Const(n)          -> {CONST(n)}
    | Binop(op, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP(op)}
    esac
  -- failure ("compileExpr not implemented\n")
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of  
      Assn(x, e)        -> compileExpr(e) +++ {ST(x)}
    | Seq(stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Read(x)           -> {READ} +++ {ST(x)}
    | Write(e)          -> compileExpr(e) +++ {WRITE}
    esac
  -- failure ("compileSM not implemented\n")
}
