-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
-- Shows a location (a reference to function argument, local or global variable)
  fun showLoc(d) {
    fun varity(f) {
      if f then "var" else "val" fi
    }

    case d of
        Arg (i) -> sprintf("arg[%d]", i)
      | Loc (i) -> sprintf("loc[%d]", i)
      | Glb (x) -> sprintf("%s", x)
    esac
  }

  case i of
      BINOP  (s)       -> sprintf("BINOP %s", s)
    | LD     (x)       -> sprintf("LD %s", showLoc(x))
    | LDA    (x)       -> sprintf("LDA %s", showLoc(x))
    | ST     (x)       -> sprintf("ST %s", showLoc(x))
    | STI              -> "STI"
    | SEXP   (s, n)    -> sprintf("SEXP ""%s"", %d", s, n)
    | CONST  (n)       -> sprintf("CONST %d", n)
    | LABEL  (s, f)    -> sprintf("LABEL %s, %d", s, f)
    | JMP    (l)       -> sprintf("JMP %s", l)
    | CJMP   (c, l)    -> sprintf("CJMP %s, %s", c, l)
    | CALL   (f, n)    -> sprintf("CALL %s, %d", f, n)
    | BEGIN  (f, a, l) -> sprintf("BEGIN %s, %d, %d", f, a, l)
    | GLOBAL (x)       -> sprintf("GLOBAL %s", x)
    | END              -> sprintf("END")
    | DUP              -> "DUP"
    | DROP             -> "DROP"
    | STRING (s)       -> sprintf("STRING ""%s""", s)
    | ARRAY  (n)       -> sprintf("ARRAY %d", n)
    | STA              -> "STA"
    | ELEM             -> "ELEM"
    | BUILTIN (f, n)   -> sprintf("BUILTIN %s, %d", f, n)
    | META (m)         -> sprintf("META %s", m.string)
    | PATT (p)         -> sprintf("PATT %s", p.string)
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
            { }                 -> m
          | LABEL (lab, _) : tl -> rec([addMap(m, lab, insns), tl])
          | LABEL (lab) : tl -> failure("Found old label %s", lab)
          | _ : tl              -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns | None -> failure("not found label: %s", l) esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval(env, w, insns) {
-- Global state maps names of global variables to values
  var globalState = ref(fun (x) { error(sprintf("name ""%s"" is undefined", x), getLoc(x)) });

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState(a, l) {
    [initArray(a, fun (_) { 0 }), initArray(l, fun (_) { 0 })]
  }

  -- Lookups a location in local/global states
  fun lookup([args, locs], loc) {
    case loc of
        Arg (i) -> args[i]
      | Loc (i) -> locs[i]
      | Loc (i) -> locs[i]
      | Glb (x) -> deref(globalState)(x)
    esac
  }

  -- Assigns a value to a location
  fun assign([args, locs], loc, vl) {
    case loc of
        Arg (i) -> args[i] := vl
      | Loc (i) -> locs[i] := vl
      | Glb (x) -> var g = deref(globalState);
      globalState ::= fun (y) { if compare(x, y) == 0 then vl else g(y) fi }
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take(list, n) {
    fun inner(n, acc, list) {
      if n == 0
        then [list, acc]
        else inner(n - 1, list.hd:acc, list.tl)
      fi
    }

    inner(n, { }, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval(c@[stack, cst, state, world@[input, output]], insns) {
    case insns of
        { }         -> c
      | inst : tail ->
--         printf("[INST] %s %s\n", inst.string, stack.string);
        case inst of
            DUP                       -> case stack of
              x : stack -> eval([x:x:stack, cst, state, world], tail)
            esac
          | LD(v)                     -> eval([lookup(state, v):stack, cst, state, world], tail)
          | ST(v)                     -> state.assign(v, hd(stack)); eval(c, tail)
          | CONST(n)                  -> eval([n:stack, cst, state, world], tail)
          | BINOP(x)                  -> case stack of
            a : b : tstack -> eval([evalOp(x, b, a):tstack, cst, state, world], tail)
          esac
          | JMP(l)                    -> eval(c, fromLabel(env, l))
          | CJMP(NZ, l)               -> case stack of
            b : stack -> eval([stack, cst, state, world], if b == 0
              then tail
              else fromLabel(env, l)
            fi)
          esac
          | CJMP(Z, l)                -> case stack of
            b : stack -> eval([stack, cst, state, world], if b != 0
              then tail
              else fromLabel(env, l)
            fi)
          esac
          | LABEL(_, _)               -> eval(c, tail)
          | DROP                      -> eval([tl(stack), cst, state, world], tail)
          | LDA(x)                    -> eval([Ref(x):stack, cst, state, world], tail)
          | GLOBAL(x)                 -> state.assign(Glb(x), 0); eval(c, tail)
          | BEGIN(name, nargs, nvars) ->
              case take(stack, nargs) of
                [stack, args] -> case foldl(fun ([state, nargs], arg){
                  state.assign(Arg(nargs), arg);
                  [state, nargs + 1]
                }, [makeState(nargs, nvars), 0], args) of
                  [state, _] -> eval([stack, cst, state, world], tail)
                esac
              esac
          | END                       ->
              case cst of
                  { }                 -> [stack, { }, state, world]
                | [state, tail] : cst -> eval([stack, cst, state, world], tail)
              esac
          | CALL(lbl, nargs)          ->
              eval([stack, [state, tail]:cst, state, world], fromLabel(env, lbl))
          | BUILTIN (funn, nargs)     ->
              case take(stack, nargs) of
                [stack, args] ->
                  case evalBuiltin(funn, args, world) of
                    [res, world] -> eval([res:stack, cst, state, world], tail)
                  esac
              esac
          | ARRAY (n)                 ->
              case take(stack, n) of
                [_ : stack, vals] -> eval([listArray(vals):stack, cst, state, world], tail)
              esac
          | ELEM                      ->
              case stack of
                i : a : stack ->
                  eval([
                    (case a of
                        Sexp(_, a) -> a[i]
                      | _          -> a[i]
                    esac):stack,
                    cst,
                    state,
                    world], tail)
              esac
          | STA                       ->
              case stack of
                  v : Ref(d) : Ref(x) : stack ->
                    var s = state;
                    --                     printf("[BEFORE ASSIGN] %s %s %s %s %s\n", state.string, s.string, v.string, x.string, d.string);
                    state.assign(x, v);
                    --                     printf("[AFTER ASSIGN] %s %s %s\n", state.string, globalState.string, s.string);
                    eval([v:stack, cst, state, world], tail)
                | v : i : a : stack           ->
                    case a of
                        Sexp(_, a) -> a[i] := v
                      | _          -> a[i] := v
                    esac; eval([v:stack, cst, state, world], tail)
              esac
          | STRING (s)                -> eval([s:stack, cst, state, world], tail)
          | SEXP(name, n)             ->
              case take(stack, n) of
                [_ : stack, vals] -> eval([Sexp(name, listArray(vals)):stack, cst, state, world], tail)
              esac
          | META(x)                   -> failure("%s\n", x)
          | PATT([name, sz])          -> case stack of
            Sexp(name_, elems) : stack ->
              eval([(compare(name, name_) == 0 && sz == length(elems)):stack, cst, state, world], tail)
          esac
        esac
    esac
  }


--   printf ("%s\n", showSM (insns));

  eval([{ }, { }, makeState(0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), createWorld(input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions) {
-- Generates a new label
  fun genLabel() {
    [sprintf("L%d", nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun(fLabel, args, body) {
    makeCompEnv(nLabels,
      scopeDepth,
      state,
      nLocals,
      nArgs,
      Fun(fLabel, args, body, state):functions)
  }

  -- Enters a local scope
  fun beginScope() {
    makeCompEnv(nLabels, scopeDepth + 1, enterScope(state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope() {
    makeCompEnv(nLabels, scopeDepth - 1, leaveScope(state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg(name) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Arg(nArgs)), nLocals, nArgs + 1, functions)
  }

  -- Adds a variable in the scope
  fun addVar(name) {
    if isGlobal()
      then makeCompEnv(nLabels, scopeDepth, addName(state, name, Glb(name, true)), nLocals, nArgs, functions)
      else makeCompEnv(nLabels, scopeDepth, addName(state, name, Loc(nLocals, true)), nLocals + 1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal(name) {
    if isGlobal()
      then makeCompEnv(nLabels, scopeDepth, addName(state, name, Glb(name, false)), nLocals, nArgs, functions)
      else makeCompEnv(nLabels, scopeDepth, addName(state, name, Loc(nLocals, false)), nLocals + 1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun(name, fLabel, nargs) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Fun(fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun(state) {
    makeCompEnv(nLabels, 2, enterFunction(state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns() {
    [functions, makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, { })]
  }

  -- Lookups variable
  fun lookupVar(name) {
    case lookup(state, name) of
        Loc (i, true) -> Loc(i)
      | Glb (x, true) -> Glb(x)
      | Arg (x)       -> Arg(x)
      | _             -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
    esac
  }

  -- Lookups value
  fun lookupVal(name) {
    case lookup(state, name) of
        Loc (i, _) -> Loc(i)
      | Glb (x, _) -> Glb(x)
      | Arg (i)    -> Arg(i)
      | _          -> error(sprintf("the name ""%s"" does not designate a value", name), getLoc(name))
    esac
  }

  -- Lookups a name of a function
  fun lookupFun(name) {
    case lookup(state, name) of
        x@Fun (_, _) -> x
      | _            -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals() {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel(name) {
    if isGlobal()
      then [sprintf("L%s", name), makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions)]
      else [sprintf("L%s_%d", name, nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
    fi
  }

  -- Checks if the current scope is a global
  fun isGlobal() {
    scopeDepth == 2
  }

  [genLabel,
    rememberFun,
    beginScope,
    endScope,
    addArg,
    addVar,
    addVal,
    beginFun,
    getFuns,
    lookupVar,
    lookupVal,
    lookupFun,
    getLocals,
    genFunLabel,
    addFun,
    isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv() {
  makeCompEnv(0, 0, emptyState(), 0, 0, { })
}

-- Accessor functions
fun genLabel(env) {
  env [0]()
}

fun rememberFun(env, name, args, body) {
  env [1](name, args, body)
}

fun beginScope(env) {
  env [2]()
}

fun endScope(env) {
  env [3]()
}

fun addArg(env, name) {
  env [4](name)
}

fun addVar(env, name) {
  env [5](name)
}

fun addVal(env, name) {
  env [6](name)
}

fun beginFun(env, state) {
  env [7](state)
}

fun getFuns(env) {
  env [8]()
}

fun lookupVar(env, name) {
  env [9](name)
}

fun lookupVal(env, name) {
  env [10](name)
}

fun lookupFun(env, name) {
  env [11](name)
}

fun getLocals(env) {
  env [12]()
}

fun genFunLabel(env, name) {
  env [13](name)
}

fun addFun(env, name, fLabel, nargs) {
  env [14](name, fLabel, nargs)
}

fun isGlobal(env) {
  env [15]()
}

-- Helper function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case genLabel(env) of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs(env, names) {
  foldl(fun (env, name) { addArg(env, name) }, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars(env, names) {
  foldl(fun (env, name) { addVar(env, name) }, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals(env, names) {
  foldl(fun (env, name) { addVal(env, name) }, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM(stmt) {
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab, false))
      else emptyBuffer()
    fi
  }

  fun addDefs(env, defs) {
    fun newGlobals(env, gdefs, names) {
      if env.isGlobal then
        foldl(fun (defs, name) {
          defs <+ GLOBAL(name)
        },
          gdefs,
          names)
        else
          gdefs
      fi
    }

    foldl(
      fun ([env, funs, globalDefs], def) {
        case def of
            Var(names)              -> [addVars(env, names), funs, newGlobals(env, globalDefs, names)]
          | Val(names)              -> [addVars(env, names), funs, newGlobals(env, globalDefs, names)]
          | f@Fun(name, args, body) -> case genFunLabel(env, name) of
            [lab, env] -> [addFun(env, name, lab, size(args)), [lab, args, body]:funs, globalDefs]
          esac
        esac
      },
      [env, { }, emptyBuffer()],
      defs
    )
  }

  fun compileList(lab, env, stmts) {
    compile(
      lab,
      env,
      foldl(fun (a, b) { Seq(a, b) }, Skip, stmts)
    )
  }

  fun compile(lab, env, stmt) {
  --     printf("%s\n", stmt.string);
    case stmt of
        Skip                 -> [false, env, emptyBuffer()]
      | Var    (x)           -> [false, env, singletonBuffer(LD(lookupVar(env, x)))]
      | Ref    (x)           -> [false, env, singletonBuffer(LDA(lookupVar(env, x))) <+ DUP]
      | Const  (n)           -> [false, env, singletonBuffer(CONST(n))]
      | String (s)           -> [false, env, singletonBuffer(STRING(s))]
      | Array (elems)        ->
        case genLabel(env) of
          [lbl, env] -> case compileList(lbl, env, elems) of
            [used, env, code] -> [
              false,
              env,
              singletonBuffer(CONST(size(elems)))
                <+> code
                --                 <+> label(lbl, used)
                <+ ARRAY(size(elems))
            ]
          esac
        esac
      | ElemRef (a, i)       ->
        case genLabel(env) of
          [lbl, env] -> case compileList(lbl, env, { a, i }) of
            [used, env, code] -> [
              false,
              env,
              code
                <+> label(lbl, used)
            ]
          esac
        esac
      | Elem (a, i)          ->
        case genLabel(env) of
          [lbl, env] -> case compileList(lbl, env, { a, i }) of
            [used, env, code] -> [
              false,
              env,
              code
                <+> label(lbl, used)
                <+ ELEM
            ]
          esac
        esac
      | Sexp (name, elems)   ->
        case genLabel(env) of
          [lbl, env] -> case compileList(lbl, env, elems) of
            [used, env, code] -> [
              false,
              env,
              singletonBuffer(CONST(size(elems) + 1))
                <+> code
                <+> label(lbl, used)
                <+ SEXP(name, size(elems))
            ]
          esac
        esac
      | Set(x, e)            -> compile(lab, env, Assn(Ref(x), e))
      | Ignore (expr)        -> case genLabel(env) of
        [lbl, env] -> case compile(lbl, env, expr) of
          [lblUsed, env, code] -> [false, env, code <+> label(lbl, lblUsed) <+ DROP]
        esac
      esac
      | Seq    (s1, s2)      ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | Assn(lft, rgt)       -> case env.genLabels(2) of
        [afterLft, afterRgt, env] ->
          case compile(afterLft, env, lft) of
            [afterLftUsed, env, lftCode] -> case compile(afterRgt, env, rgt) of
              [afterRgtUsed, env, rgtCode] -> [false, env,
                lftCode <+> label(afterLft, afterLftUsed) <+>
                  rgtCode <+> label(afterRgt, afterRgtUsed) <+
                  STA
              ]
            esac
          esac
      esac
      --       | Read  (x)           -> [false, env, singletonBuffer(READ) <+ ST(lookupVar(env, x)) <+ DROP]
      --       | Write (e)           -> case genLabel(env) of
      --         [afterExpr, env] -> case compile(afterExpr, env, e) of
      --           [afterExprUsed, env, code] -> [false, env, code <+> label(afterExpr, afterExprUsed) <+ WRITE]
      --         esac
      --       esac
      | If(cond, tb, fb)     ->
        case genLabels(env, 2) of
          [falseLabel, afterCondition, env] ->
            case compile(lab, env, tb) of
              [_, env, trueCode] ->
                case compile(lab, env, fb) of
                  [_, env, falseCode] -> case compile(afterCondition, env, cond) of
                    [afterConditionUsed, env, condCode] ->
                      [true, env, condCode <+> label(afterCondition, afterConditionUsed)
                        <+ CJMP(Z, falseLabel)
                        <+> trueCode <+ JMP(lab)
                        <+> label(falseLabel, true) <+> falseCode
                      ]
                  esac
                esac
            esac
        esac
      | DoWhile(body, expr)  ->
        case env.genLabels(3) of
          [bodyStart, afterBody, afterCondition, env] -> case compile(afterBody, env, body) of
            [bodyLabelUsed, env, code] -> case compile(afterCondition, env, expr) of
              [condUsed, env, exprCode] -> [
                false, env,
               singletonBuffer(LABEL(bodyStart, true)) <+> code <+> label(afterBody, bodyLabelUsed) <+>
                  exprCode <+> label(afterCondition, condUsed) <+ CJMP(NZ, bodyStart)]
            esac
          esac
        esac
      | While(expr, body)    ->
        case env.genLabels(3) of
          [bodyStart, afterBody, afterCondition, env] -> case compile(afterBody, env, body) of
            [_, env, code] -> case compile(afterCondition, env, expr) of
              [afterConditionUsed, env, exprCode] ->
                [
                  false, env,
                  singletonBuffer(JMP(afterBody)) <+
                    LABEL(bodyStart, true) <+>
                    code <+>
                    label(afterBody, true) <+>
                    exprCode <+> label(afterCondition, afterConditionUsed) <+
                    CJMP(NZ, bodyStart)
                ]
            esac
          esac
        esac
      | Binop(op, l, r)      ->
        case genLabels(env, 2) of
          [afterL, afterR, env] -> case compile(afterL, env, l) of
            [afterLUsed, env, lCode] -> case compile(afterR, env, r) of
              [afterRUsed, env, rCode] -> [false, env,
                lCode <+> label(afterL, afterLUsed) <+>
                  rCode <+> label(afterR, afterRUsed) <+
                  BINOP(op)
              ]
            esac
          esac
        esac
      | Scope(defs, expr)    ->
        case beginScope(env) of
          env -> case addDefs(env, defs) of
            [env, funs, globalDefs] -> case foldl(fun (env, f) {
              case f of
                [lab, args, body] -> rememberFun(env, lab, args, body)
              esac
            }, env, funs) of
              env -> case compile(lab, env, expr) of
                [used, env, code] -> [used, leaveScope(env), globalDefs <+> code]
              esac
            esac
          esac
        esac
      | Case(name, branches) ->
        case genLabel(env) of
          [endLabel, env] ->
            case lookupVar(env, name) of
              exp -> fun getDeepedLabel(lbl, depth) {
                if depth == 0
                  then lbl
                  else sprintf("%s_depth_%d", lbl, depth)
                fi
              }
              fun compileBranch(env, pattern, body, caseEndLabel) {
                fun compilePattern(pattern, lab, depth) {
                  case pattern of
                      Wildcard           -> [emptyBuffer(), depth]
                    | Named(_, pattern)  -> compilePattern(pattern, lab, depth)
                    | Const(n)           -> [
                      singletonBuffer(DUP)
                        <+ CONST(n)
                        <+ BINOP("==")
                        <+ CJMP(Z, getDeepedLabel(lab, depth)),
                      depth
                    ]
                    | Sexp (name, elems) ->
                      fun compileArray([code, i, depth0], elem) {
                        fun max(a, b) {
                          if a > b then a else b fi
                        }
                        case compilePattern(elem, lab, depth + 1) of
                          [elemCode, newDepth] -> [
                            code <+ DUP <+ CONST(i) <+ ELEM <+> elemCode <+ DROP,
                            i + 1,
                            max(depth0, newDepth)
                          ]
                        esac
                      }
                      case foldl(compileArray, [emptyBuffer(), 0, depth], elems) of
                        [code, _, maxDepth] -> [
                          singletonBuffer(DUP)
                            <+ PATT([name, size(elems)])
                            <+ CJMP(Z, getDeepedLabel(lab, depth))
                            <+> code,
                          maxDepth
                        ]
                      esac
                  esac
                }
                fun compileDeepedLabels(lab, depth) {
                  if depth == 0 then singletonBuffer(LABEL(getDeepedLabel(lab, depth), false))
                    else singletonBuffer(LABEL(getDeepedLabel(lab, depth), false))
                      <+ DROP
                      <+> compileDeepedLabels(lab, depth - 1)
                  fi
                }
                case genLabel(env) of
                  [branchEndLabel, env] -> case compilePattern(pattern, branchEndLabel, 0) of
                    [patternCode, depth] -> case compile(caseEndLabel, env, body) of
                      [_, env, code] -> case compileDeepedLabels(branchEndLabel, depth) of
                        dropCode -> [
                          env,
                          patternCode
                            <+ DROP
                            <+> code
                            <+ JMP(caseEndLabel)
                            <+> dropCode
                        ]
                      esac
                    esac
                  esac
                esac
              }
              case foldl(fun ([env, code], [p, l]) {
                case compileBranch(env, p, l, endLabel) of
                  [env, newCode] -> [env, code <+> newCode]
                esac
              }, [env, emptyBuffer()], branches) of
                [env, branches] -> [false, env,
                  singletonBuffer(LD(exp))
                    <+> branches
                    <+ META("Match failed")
                    <+ LABEL(endLabel, false)
                ]
              esac
            esac
        esac
      | Call(name, args)     ->
        case env.genLabel of
          [lbl, env] ->
            case compileList(lbl, env, args) of
              [used, env, argsCode] ->
                case lookupFun(env, name) of
                  Fun (fLbl, nArgs) ->
                    [false,
                      env,
                      argsCode
                        <+> label(lbl, used)
                        <+ (case fLbl of
                          Builtin (fLbl) ->
                            BUILTIN(fLbl, nArgs)
                        | _              -> CALL(fLbl, nArgs)
                      esac)]
                esac
            esac
        esac
    esac
  }

  fun appendFunctions(env, code) {
    fun generate(env, f@Fun(flabel, args, body, state)) {
      case genLabel(addArgs(beginFun(env, state), args)) of
        [lbl, env] -> case compile(lbl, env, body) of
          [used, env, code] ->
            appendFunctions(env,
              singletonBuffer(LABEL(flabel, false))
                <+ BEGIN(flabel, size(args), getLocals(env))
                <+> code
                <+> label(lbl, used)
                <+ END
            )
        esac
      esac
    }
    case getFuns(env) of
      [funs, env] ->
        foldl(
          fun ([env, code], f){
            case generate(env, f) of
              [env, generatedCode] -> [env, code <+> generatedCode]
            esac
          },
          [env, code],
          funs
        )
    esac
  }

  --   failure("%s\n", stmt.string);
  case genLabel(initCompEnv()
    .beginScope
    .addFun("read", Builtin("read"), 0)
    .addFun("write", Builtin("write"), 1)
    .addFun("length", Builtin("length"), 1)
  ) of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, env, code] ->
          var mainCode =
            singletonBuffer(LABEL("main", true))
              <+ BEGIN("main", 0, getLocals(env))
              <+> code
              <+> label(endLab, endLabUsed)
              <+ END;
          getBuffer $ (appendFunctions(env, mainCode)[1])
      esac
  esac
}
