-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }

    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }

  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  | META (m)         -> sprintf ("META %s", m.string)
  | PATT (p)         -> sprintf ("PATT %s", p.string)
  | UNMATCH (v, loc) -> sprintf ("UNMATCH %s, %d:%d", v.string, loc.fst, loc.snd)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}                  -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl              -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac;
    [args, locs]
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun evalAll (c, insns) {
    case insns of
      i:is ->
        case evalInsn (c, i, is) of
          [cnew, s_cont] ->
            case s_cont of
              Some (cont) -> evalAll (cnew, cont)
              | _ -> evalAll (cnew, is)
            esac
        esac
      | _ -> c
    esac
  }

  -- Return [new configuration, optional continuation]
  -- env: keeps a mapping between labels and (sub)programs (already computed by previous pass)
  -- stack: Operational stack, can contain immediate values and refs to local and global scopes
  -- cf_stack(control flow stack): stack of
  -- state: current function arguments and local variables
  fun evalInsn (c@[stack, cf_stack, state, w], insn, insn_tail) {
    -- fprintf(stderr, "insn: %s\n", showSMInsn (insn));
    -- fprintf(stderr, "stack: %s\n", string (stack));
    -- fprintf(stderr, "cf_stack: %s\n", string (cf_stack));
    -- fprintf(stderr, "state: %s\n", string (state));
    case insn of
      BINOP (op) ->
      case stack of
        s1:s2:ss -> [[evalOp (op, s1, s2):ss, cf_stack, state, w], None]
      esac
    | LD (x) -> [[(lookup (state, x)):stack, cf_stack, state, w], None]
    | ST (x) ->
      case stack of
        s:ss -> [[stack, cf_stack, assign (state, x, s), w], None]
      esac
    | CONST (n) -> [[n:stack, cf_stack, state, w], None]
    | STRING (s) -> [[s:stack, cf_stack, state, w], None]
    | ARRAY (n) ->
      case take (stack, n) of
        [new_stack, arr] -> [[listArray (arr):new_stack, cf_stack, state, w], None]
      esac
    | SEXP (stag, n) ->
      case take (stack, n) of
        [new_stack, args] -> [[Ksexp (stag, listArray (args)):new_stack, cf_stack, state, w], None]
      esac
    | ELEM ->
      case stack of
        i:(Ksexp (stag, args)):ss -> [[args[i]:ss, cf_stack, state, w], None]
      | i:a:ss -> [[a[i]:ss, cf_stack, state, w], None]
      esac
    | STA ->
      case stack of
        v:i:a:ss ->
          case a of
            #array -> (a[i] := v; [[v:ss, cf_stack, state, w], None])
          | #str -> (a[i] := v; [[v:ss, cf_stack, state, w], None])
          | x -> [[v:ss, cf_stack, assign (state, a, v), w], None]
          esac
      esac
    | LDA (x) -> [[x:stack, cf_stack, state, w], None]
    | PATT (p) ->
      case stack of
        v:ss ->
          var isMatched =
            case p of
              PTag (ptag, pn) ->
                case v of
                  Ksexp (stag, sn) -> compare (ptag, stag) == 0 && pn == length (sn)
                | _ -> false
                esac
            | PArray (n) ->
                case v of
                  v@#array -> length (v) == n
                | _ -> false
                esac
            esac;
          [[isMatched:ss, cf_stack, state, w], None]
      esac
    | UNMATCH (v, loc) -> error (sprintf ("pattern matching failed for variable ""%s""", v), loc)
    | LABEL (_) -> [c, None]
    | DROP ->
      case stack of
        s:ss -> [[ss, cf_stack, state, w], None]
      esac
    | DUP ->
      case stack of
        s1:ss -> [[s1:s1:ss, cf_stack, state, w], None]
      esac
    | GLOBAL (x) -> [[stack, cf_stack, assign (state, Glb (x), 0), w], None]
    | JMP (label) -> [c, Some (fromLabel (env, label))]
    | CJMP (pred, label) ->
      case stack of
        s:ss ->
          if case pred of "z" -> (s == 0) | "nz" -> (s != 0) esac then
            [[ss, cf_stack, state, w], Some (fromLabel (env, label))]
          else
            [[ss, cf_stack, state, w], None]
          fi
      esac
    | CALL (fLabel, n) -> [[stack, [state, insn_tail]:cf_stack, state, w], Some (fromLabel (env, fLabel))]
    | BUILTIN (fLabel, n) ->
      case take (stack, n) of
        [new_stack, args] ->
          case evalBuiltin (fLabel, args, w) of
            [v, w] -> [[v:new_stack, cf_stack, state, w], None]
          esac
      esac
    | BEGIN (f, a, l) ->
      case take (stack, a) of
        [new_stack, arg_stack] ->
          case foldl (fun ([i, state], el) { [i + 1, assign(state, Arg (i), el)] }, [0, makeState (a, l)], arg_stack)  of
            [_, new_state] -> [[new_stack, cf_stack, new_state, w], None]
          esac
      esac
    | END ->
      case cf_stack of
        [cont_state, cont_insns]:cont_cf_stack ->
          [[stack, cont_cf_stack, cont_state, w], Some (cont_insns)]
      | {} -> [c, Some ({})] -- end of the main function
      esac
    esac
  }

  evalAll ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {

  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Convenient function to pass tail param to compileAndThen
  -- Don't use for JMP and CJMP
  fun emitInsn (insn) {
    fun (env) { [false, env, singletonBuffer (insn)] }
  }

  -- Function for chaining compiled expressions with correct env and outer label usage
  fun compileAndThen (env, expr, suff) {
      case genLabel (env) of
        [nLab, env] ->
          case compile (nLab, env, expr) of
            [nLabUsed, env, eCode] ->
              case suff (env) of
                [labUsed, env, suffCode] -> [labUsed, env, eCode <+> label (nLab, nLabUsed) <+> suffCode]
              esac
          esac
      esac
  }

  fun compileChain (exprList) {
    case exprList of
      {} -> fun (env) { [false, env, emptyBuffer ()] }
    | x:xs -> fun (env) { compileAndThen (env, x, compileChain (xs)) }
    esac
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer
  fun compile (lab, env, stmt) {

    -- Helper function for Scope codegen
    fun populateByDecl (env, decl) {
      case addVars (env, valDecls (decl)) of
        env -> (
          var functions = filter (fun (el) { case el of Fun (_, _, _) -> true | _ -> false esac }, decl);
          var env_with_funcs = foldl (
            fun (env, Fun (name, args, body)) {
              case genFunLabel (env, name) of
                [label, env] -> addFun (env, name, label, size (args))
              esac
            }, env, functions);
          foldl (fun (env, Fun (name, args, body)) {
            case lookupFun (env, name) of
              Fun (fLabel, _) -> rememberFun (env, fLabel, args, body)
            esac
          }, env_with_funcs, functions)
          )
      esac
    }

    -- Helper functions for Case codegen
    fun genCaseBranchCode ([env, code], [pat, br]) {
      case genLabels (env, 3) of
        [matchEndLab, brEndLab, nextBrLab, env] ->
          case matchST (matchEndLab, env, pat) of
            [matchEndLabUsed, env, matchCode] ->
              case compile (brEndLab, env, br) of
                [brEndLabUsed, env, brCode] ->
                  [env, code
                    <+> matchCode
                    <+> label (matchEndLab, matchEndLabUsed)
                    <+  CJMP ("z", nextBrLab)
                    <+  DROP -- scrutenee that loaded before all branches of case
                    <+> brCode
                    <+> label (brEndLab, brEndLabUsed)
                    <+  JMP (lab)
                    <+> label (nextBrLab, true)
                  ]
              esac
          esac
      esac
    }

    -- Generate single pattern-match code for stack top value
    -- top value preserved on the stack, on stack generated integer
    -- that represent if match is succeeded
    -- returns [isOutLabUsed, env, code]
    fun matchST (outLab, env, pat) {
      case pat of
        Const (n) -> [false, env, singletonBuffer (DUP) <+ CONST (n) <+ BINOP ("==")]
      | Wildcard -> [false, env, singletonBuffer (CONST (1))]
      | Named (_, in_pat) -> matchST (outLab, env, in_pat)
      | Array (ps) -> matchComplex (outLab, env, ps, PArray (ps.size))
      | Sexp (pstag, ps) -> matchComplex (outLab, env, ps, PTag (pstag, ps.size))
      esac
    }

    fun matchComplex (outLab, env, ps, headPat) {
        case genLabel (env) of
          [failLab, env] ->
            fun matchSubpat ([env, idx, code], pat) {
              case genLabel (env) of
                [submatchEndLab, env] ->
                  case matchST (submatchEndLab, env, pat) of
                    [submatchEndLabUsed, env, submatchCode] ->
                      [env, idx + 1, code
                        <+  DUP
                        <+  CONST (idx)
                        -- value which loaded by this elem should be dropped before next
                        -- submatch or before exit from match block, see DROPS, marked (1) (2)
                        <+  ELEM
                        <+> submatchCode
                        <+> label (submatchEndLab, submatchEndLabUsed)
                        <+  CJMP ("z", failLab)
                        <+  DROP -- (1)
                      ]
                  esac
              esac
            }
            case foldl (matchSubpat, [env, 0, emptyBuffer ()], ps) of
              [env, _, matchElementsCode] ->
                [true, env, emptyBuffer ()
                  <+  DUP -- suspicious element to satisfy failLab invariant
                  <+  DUP
                  <+  PATT (headPat)
                  <+  CJMP ("z", failLab)
                  <+  DROP -- drop suspicious element
                  <+> matchElementsCode
                  <+  CONST (1)
                  <+  JMP (outLab)
                  <+> label (failLab, true)
                  <+  DROP -- (2)
                  <+  CONST (0)
                ]
            esac
        esac
    }

    -- fprintf (stderr, "%s\n", string(stmt));
    case stmt of
    -- TODO: now it adds all vals/vars to environment as vars
      Var    (x) -> [false, env, singletonBuffer $ LD (lookupVal (env, x))]
    | Ref    (x) -> [false, env, singletonBuffer (LDA (lookupVar (env, x))) <+ LDA (lookupVar (env, x))]
    | Const  (n) -> [false, env, singletonBuffer $ CONST (n)]
    | Ignore (e) -> compileAndThen (env, e, emitInsn (DROP))
    | Set (x, e) -> compileAndThen (env, e, emitInsn (ST (lookupVal (env, x))))
    | String (s) -> [false, env, singletonBuffer $ STRING (s)]
    | Elem (arr, pos) ->
      case (compileChain ({arr, pos})) (env) of
        [_, env, code] -> [false, env, code <+ ELEM]
      esac
    | ElemRef (arr, pos) -> (compileChain ({arr, pos})) (env)
    | Array (arr) ->
      case (compileChain (arr)) (env) of
        [_, env, code] -> [false, env, code <+ ARRAY (size (arr))]
      esac
    | Sexp (stag, args) ->
      case (compileChain (args)) (env) of
        [_, env, code] -> [false, env, code <+ SEXP (stag, size (args))]
      esac
    | Skip -> [false, env, emptyBuffer ()]
    | Assn (x, e) ->
      case (compileChain ({x, e})) (env) of
        [_, env, code] -> [false, env, code <+ STA]
      esac
    | Binop (op, e1, e2) -> compileAndThen (env, e2, fun (env) {compileAndThen (env, e1, emitInsn (BINOP (op)))})
    -- control flow, TODO: rewrite with compileAndThen helper
    | Seq (e1, e2) -> compileAndThen (env, e1, fun (env) {compile (lab, env, e2)})
    | If (pred, pb, nb) ->
      case genLabels (env, 3) of
        [elseBegLab, pbEndLab, predEndLab, env] ->
          case compile (pbEndLab, env, pb) of
            [pbEndLabUsed, env, pbCode] ->
              case compile (lab, env, nb) of
                [_, env, nbCode] ->
                  case compile (predEndLab, env, pred) of
                    [predEndLabUsed, env, predCode] ->
                      [true, env,
                        predCode <+>
                        label(predEndLab, predEndLabUsed) <+
                        CJMP ("z", elseBegLab) <+>
                        pbCode <+>
                        label (pbEndLab, pbEndLabUsed) <+
                        JMP (lab) <+>
                        label (elseBegLab, true) <+>
                        nbCode
                      ]
                  esac
              esac
          esac
      esac
    | Case (scrut_name, brs) ->
      case foldl (genCaseBranchCode, [env, singletonBuffer (LD (lookupVal (env, scrut_name)))], brs) of
        [env, code] -> [true, env, code <+ UNMATCH (scrut_name, getLoc (scrut_name)) ]
      esac
    | While (pred, body) ->
      case genLabels (env, 3) of
        [whileBegLab, bodyEndLab, predEndLab, env] ->
          case compile (bodyEndLab, env, body) of
            [bodyEndLabUsed, env, bodyCode] ->
              case compile (predEndLab, env, pred) of
                [predEndLabUsed, env, predCode] ->
                  [true, env,
                    label (whileBegLab, true) <+>
                    predCode <+>
                    label (predEndLab, predEndLabUsed) <+
                    CJMP ("z", lab) <+>
                    bodyCode <+>
                    label (bodyEndLab, bodyEndLabUsed) <+
                    JMP (whileBegLab)
                  ]
              esac
          esac
      esac
    | DoWhile (body, pred) -> compile (lab, env, Seq (body, While (pred, body)))
    -- functions
    | Scope (decl, body) ->
      case populateByDecl (beginScope (env), decl) of
        env ->
          case compile (lab, env, body) of
            [labUsed, env, bodyCode] ->
                [labUsed, endScope (env),
                  if isGlobal (env) then
                    foldl (fun (acc, el) { acc <+ GLOBAL (el) }, emptyBuffer (), valDecls (decl))
                  else emptyBuffer() fi
                  <+> bodyCode
                ]
          esac
      esac
    | Call (fname, args) ->
      case lookupFun (env, fname) of
        Fun (fLabel, nargs) ->
          if nargs == size (args) then
            case (compileChain (args)) (env) of
              [_ , env, code] -> [false, env, code <+ if fLabel[0] == '$' then BUILTIN (fname, nargs) else CALL (fLabel, nargs) fi ]
            esac
          else
            failure ("unexpected number of arguments for function")
          fi
      esac
    esac
  }

  -- Compile function collecting nesting-functions that we also should compile
  -- Returns [updated env, compiled code]
  fun compileTraverse ([env, outer_code], Fun (fLabel, args, stmt, state)) {
    case genLabel (addArgs (beginFun (env, state), args)) of
      [endLab, env] ->
        case compile (endLab, env, stmt) of
          [endLabUsed, env, bodyCode] ->
            case getFuns (env) of
              [nestedFuncs, env] ->
                case foldl (compileTraverse, [env, outer_code], nestedFuncs) of
                  [new_env, nestedFuncsCode] ->
                    [
                      new_env,
                      nestedFuncsCode
                      <+> label (fLabel, true)
                      <+ BEGIN (fLabel, size (args), getLocals (env))
                      <+> bodyCode
                      <+> label (endLab, endLabUsed)
                      <+ END
                    ]
                esac
            esac
        esac
    esac
  }

  -- Global scope compilation
  case initCompEnv ().beginScope
                     .addFun ("read"  , "$read"  , 0)
                     .addFun ("write" , "$write" , 1)
                     .addFun ("length", "$length", 1)
                     .genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, mainBodyCode] ->
           case getFuns (env) of
             [nestedFuncs, env] ->
               var mainCode = singletonBuffer(BEGIN ("main", 0, getLocals (env)))
                              <+> mainBodyCode
                              <+> label (endLab, endLabUsed)
                              <+ END;
               case foldl (compileTraverse, [env, mainCode], nestedFuncs) of
                 [_, code] -> getBuffer (code)
               esac
           esac
       esac
  esac
}
