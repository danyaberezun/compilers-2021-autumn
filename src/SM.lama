-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
  case i of
      READ         -> "READ"
    | WRITE        -> "WRITE"
    | BINOP (s)    -> sprintf("BINOP %s", s)
    | LD    (x)    -> sprintf("LD %s", x)
    | LDA   (x)    -> sprintf("LDA %s", x)
    | ST    (x)    -> sprintf("ST %s", x)
    | STI          -> "STI"
    | CONST (n)    -> sprintf("CONST %d", n)
    | LABEL (s)    -> sprintf("LABEL %s", s)
    | JMP   (l)    -> sprintf("JMP %s", l)
    | CJMP  (c, l) -> sprintf("CJMP %s, %s", c, l)
    | DUP          -> "DUP"
    | DROP         -> "DROP"
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
            { }              -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c@[stack, state, world@[input, output]], insns) {
  case insns of
      { }         -> c
    | inst : tail ->
      case inst of
          READ        -> eval(env, [(hd(input)):stack, state, [tl(input), output]], tail)
        | WRITE       -> eval(env, [tl(stack), state, [input, hd(stack):output]], tail)
        | LD(v)       -> eval(env, [state(v):stack, state, world], tail)
        | ST(v)       -> eval(env, [stack, state <- [v, hd(stack)], world], tail)
        | CONST(n)    -> eval(env, [n:stack, state, world], tail)
        | BINOP(x)    -> case stack of
          a : b : tstack -> eval(env, [evalOp(x, b, a):tstack, state, world], tail)
        esac
        | JMP(l)      -> eval(env, c, fromLabel(env, l))
        | CJMP(NZ, l) -> case stack of
          hd : stack -> eval(env, [stack, state, world], if hd == 0
            then tail
            else fromLabel(env, l)
          fi)
        esac
        | CJMP(Z, l)  -> case stack of
          hd : stack -> eval(env, [stack, state, world], if hd != 0
            then tail
            else fromLabel(env, l)
          fi)
        esac
        | LABEL(l)    -> eval(env, c, tail)
        | DROP -> eval(env, [tl(stack), state, world], tail)
        | STI -> case stack of
          a : b : tstack ->  eval(env, [a : tstack, state <- [b, a], world], tail)
        esac
        | LDA(x) -> eval(env, [x : stack, state, world], tail)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), [{ }, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv(n) {
  [fun () {
    [sprintf("L%d", n), makeCompEnv(n + 1)]
  }]
}

fun initCompEnv() {
  makeCompEnv(0)
}

-- Accessor function: generates one label
fun genLabel(env) {
  env [0]()
}

-- Utility function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case env.genLabel of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  fun compile(lab, env, stmt) {
    case stmt of
        Skip                -> [false, env, emptyBuffer()]
      | Var    (x)          -> [false, env, singletonBuffer(LD(x))]
      | Ref    (x)          -> [false, env, singletonBuffer(LDA(x))]
      | Const  (n)          -> [false, env, singletonBuffer(CONST(n))]
      | Ignore (expr)       -> case genLabel(env) of
        [lbl, env] -> case compile(lbl, env, expr) of
          [lblUsed, env, code] -> [false, env, code <+> label(lbl, lblUsed) <+ DROP]
        esac
      esac
      | Seq    (s1, s2)     ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | Assn(lft, rgt)      -> case env.genLabels(2) of
        [afterLft, afterRgt, env] ->
          case compile(afterLft, env, lft) of
            [afterLftUsed, env, lftCode] -> case compile(afterRgt, env, rgt) of
              [afterRgtUsed, env, rgtCode] -> [false, env,
                lftCode <+> label(afterLft, afterLftUsed) <+>
                  rgtCode <+> label(afterRgt, afterRgtUsed) <+
                  STI
              ]
            esac
          esac
      esac
      | Read  (x)           -> [false, env, singletonBuffer(READ) <+ ST(x) <+ DROP]
      | Write (e)           -> case genLabel(env) of
        [afterExpr, env] -> case compile(afterExpr, env, e) of
          [afterExprUsed, env, code] -> [false, env, code <+> label(afterExpr, afterExprUsed) <+ WRITE]
        esac
      esac
      | If(cond, tb, fb)    ->
        case genLabels(env, 2) of
          [falseLabel, afterCondition, env] ->
            case compile(lab, env, tb) of
              [_, env, trueCode] ->
                case compile(lab, env, fb) of
                  [_, env, falseCode] -> case compile(afterCondition, env, cond) of
                    [afterConditionUsed, env, condCode] ->
                      [true, env, condCode <+> label(afterCondition, afterConditionUsed)
                        <+ CJMP(Z, falseLabel)
                        <+> trueCode <+ JMP(lab)
                        <+> label(falseLabel, true) <+> falseCode
                      ]
                  esac
                esac
            esac
        esac
      | DoWhile(body, expr) ->
        case env.genLabels(3) of
          [bodyStart, afterBody, afterCondition, env] -> case compile(afterBody, env, body) of
            [bodyLabelUsed, env, code] -> case compile(afterCondition, env, expr) of
              [condUsed, env, exprCode] -> [
                false, env,
                label(bodyStart, true) <+> code <+> label(afterBody, bodyLabelUsed) <+>
                  exprCode <+> label(afterCondition, condUsed) <+ CJMP(NZ, bodyStart)]
            esac
          esac
        esac
      | While(expr, body)   ->
        case env.genLabels(3) of
          [bodyStart, afterBody, afterCondition, env] -> case compile(afterBody, env, body) of
            [_, env, code] -> case compile(afterCondition, env, expr) of
              [afterConditionUsed, env, exprCode] ->
                [
                  false, env,
                  singletonBuffer(JMP(afterBody)) <+>
                    label(bodyStart, true) <+>
                    code <+>
                    label(afterBody, true) <+>
                    exprCode <+> label(afterCondition, afterConditionUsed) <+
                    CJMP(NZ, bodyStart)
                ]
            esac
          esac
        esac
      | Binop(op, l, r) ->
        case genLabels(env, 2) of
          [afterL, afterR, env] -> case compile(afterL, env, l) of
            [afterLUsed, env, lCode] -> case compile(afterR, env, r) of
              [afterRUsed, env, rCode] -> [false, env,
                lCode <+> label(afterL, afterLUsed) <+>
                rCode <+> label(afterR, afterRUsed) <+
                BINOP(op)
              ]
            esac
          esac
        esac
    esac
  }

  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label(endLab, endLabUsed)
      esac
  esac
}
