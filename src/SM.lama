-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cstack, st, w], insns) {
    case insns of
      {} -> c
    | READ:ins      ->
        case readWorld (w) of 
          [z, w1]     -> eval ([z:stack, cstack, st, w1], ins)
        esac
    | WRITE:ins     ->
        case stack of
          i:is        -> eval ([is, cstack, st, writeWorld (i, w)], ins)
        esac
    | BINOP (s):ins ->
        case stack of
          y:x:is      -> eval ([evalOp (s, x, y):is, cstack, st, w], ins)
        esac
    | LD  (x):ins     -> eval ([lookup (st, x):stack, cstack, st, w], ins)
    | LDA (x):ins     -> eval ([x:stack, cstack, st, w], ins)
    | ST  (x):ins   ->
        case stack of
          i:is        -> st.assign (x, i);
                         eval (c, ins)
        esac
    | STI:ins       ->
        case stack of
          i:j:is      -> st.assign (j, i);
                         eval ([i:is, cstack, st, w], ins)
        esac
    | CONST (n):ins   -> eval ([n:stack, cstack, st, w], ins)
    | LABEL (s):ins   -> eval (c, ins)
    | JMP   (l):ins   -> eval (c, env.fromLabel (l))
    | CJMP  (c, l):ins ->
        case stack of
          i:is        -> if (compare(c, "z") == 0) == (i == 0) then
                         eval ([is, cstack, st, w], env.fromLabel (l))
                         else
                         eval ([is, cstack, st, w], ins)
                         fi
        esac
    | CALL   (f, n)   :ins -> eval ([stack, [st, ins]:cstack, st, w], env.fromLabel (f))
    | BEGIN  (f, a, l):ins ->
        case stack.take (a) of
          [stack, args] ->
            case makeState (a, l) of
              st -> foldl (fun (x, arg) { st.assign (Arg (x), arg); x + 1 }, 0, args);
                    eval ([stack, cstack, st, w], ins)
            esac
        esac
    | GLOBAL (x)      :ins -> st.assign (Glb (x), 0);
                              eval (c, ins)
    | END:ins              -> 
        case cstack of
          [st, cins]:cstack -> eval ([stack, cstack, st, w], cins)
        | _  -> c
        esac
    | DROP:ins      ->
        case stack of
          _:stack     -> eval ([stack, cstack, st, w], ins)
        esac
    | DUP:ins       ->
        case stack of
          x:stack     -> eval ([x:x:stack, cstack, st, w], ins)
        esac
    esac
  }
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compileDefs(env, defs) {
    fun compileDef([env, globals, fs], def) {
      case def of
          Var (xs)          -> [
                                addVars (env, xs),
                                if env.isGlobal then xs +++ globals else {} +++ globals fi,
                                fs
                               ]
       | Fun (f, args, body) -> 
          case genFunLabel (env, f) of
            [lab, env] -> [
                           addFun (env, f, lab, args.size),
                           globals,
                           Fun (lab, args, body):fs
                          ]
          esac
      esac
    }
  
    case foldl (compileDef, [env, {}, {}], defs) of 
      [env, globals, fs] -> [
        foldl (fun (env, Fun (f, a, b)) { env.rememberFun (f, a, b)  }, env, fs),
        globals
      ]
    esac
  }

  fun compileArgs (env, args) {
    fun compileArg ([env, code], arg) {
      case env.genLabel of
        [lab, env] ->
          case compile (lab, env, arg) of
            [used, env, codeArg] -> [env, code <+> codeArg <+> label (lab, used)]
          esac
      esac
    }
    foldl (compileArg, [env, emptyBuffer ()], args)
  }

  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip          -> [false, env, emptyBuffer ()]
    | Var   (x)     -> [false, env, singletonBuffer (LD  (lookupVar(env, x)))]
    | Ref   (x)     -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const (n)     -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)     -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
    | Write (e)     -> 
        case env.genLabel of
          [labEnd, env] -> 
            case compile (labEnd, env, e) of
              [used, env, code] -> [false, env, code <+> label (labEnd, used) <+ WRITE]
            esac
        esac
    | Ignore (e)    ->
        case env.genLabel of
          [lab, env] ->
            case compile (lab, env, e) of
              [used, env, code] -> [false, env, code <+> label (lab, used) <+ DROP]
            esac
        esac
    | Binop (op, e1, e2) ->
        case env.genLabels (2) of
          [labEnd1, labEnd2, env] ->
             case compile (labEnd1, env, e1) of
               [used1, env, code1] ->
                  case compile (labEnd2, env, e2) of
                    [used2, env, code2] -> [false, env, code1 <+> label (labEnd1, used1) 
                                                              <+> code2
                                                              <+> label (labEnd2, used2) 
                                                              <+  BINOP (op)
                                           ]
                  esac
             esac
        esac
    | Assn  (x, e)   -> 
        case env.genLabels (2) of
          [labEndX, labEndE, env] ->
             case compile (labEndX, env, x) of
               [usedX, env, codeX] ->
                  case compile (labEndE, env, e) of
                    [usedE, env, codeE] -> [false, env, codeX <+> label (labEndX, usedX)
                                                              <+> codeE 
                                                              <+> label (labEndE, usedE) 
                                                              <+  STI
                                           ]
                  esac
             esac
        esac  
    | Seq   (s1, s2) ->
        case env.genLabel of
          [labS2, env] ->
             case compile (labS2, env, s1) of
               [usedS2, env, codeS1] ->
                  case compile (lab, env, s2) of
                    [used, env, codeS2] -> [used, env, codeS1 <+> label (labS2, usedS2) <+> codeS2]
                  esac
             esac
        esac
    | If      (e, s1, s2) ->
        case genLabels (env, 2) of
          [labE, labF, env] ->
             case compile (labE, env, e) of
               [used, env, codeE] ->
                  case compile (lab, env, s1) of
                    [_, env, codeT] ->
                       case compile (lab, env, s2) of
                         [_, env, codeF] -> [true, env, codeE <+> label (labE, used)
                                                              <+  CJMP  ("z", labF)
                                                              <+> codeT
                                                              <+  JMP   (lab)
                                                              <+  LABEL (labF)
                                                              <+> codeF
                                            ]
                       esac
                  esac
             esac
        esac
    | While   (e, s)      ->
        case genLabels (env, 3) of
          [labE, labS, labEnd, env] ->
             case compile (labE, env, s) of
               [_, env, codeS] -> 
                  case compile (labEnd, env, e) of
                    [used, env, codeE] -> [false, env, emptyBuffer () <+  JMP   (labE)
                                                                      <+  LABEL (labS)
                                                                      <+> codeS
                                                                      <+  LABEL (labE)
                                                                      <+> codeE
                                                                      <+> label (labEnd, used)
                                                                      <+  CJMP  ("nz", labS)
                                          ]
                  esac
             esac
        esac
    | DoWhile (s, e)      ->
        case genLabels (env, 3) of
          [labS, labE, labEnd, env] ->
             case compile (labE, env, s) of
               [usedE, env, codeS] -> 
                  case compile (labEnd, env, e) of
                    [usedEnd, env, codeE] -> [false, env, emptyBuffer () <+  LABEL (labS)
                                                                         <+> codeS
                                                                         <+> label (labE, usedE)
                                                                         <+> codeE
                                                                         <+> label (labEnd, usedEnd)
                                                                         <+  CJMP  ("nz", labS)
                                             ]
                  esac
             esac
        esac
    | Scope (defs, expr) ->
      case compileDefs (env.beginScope, defs) of 
        [env, globals] ->
          case compile (lab, env, expr) of 
            [used, env, code] -> [used, env.endScope, listBuffer (map (fun (g) { GLOBAL (g) }, globals)) <+> code]
          esac
      esac
    | Call (f, as) ->
        case compileArgs (env, as) of
          [env, code] ->
            case env.lookupFun (f) of
              Fun (labF, n) -> [false, env, code <+ CALL (labF, n)]
            esac
        esac
    esac
  }
  
  fun compileFuns (env, code) {
    fun compileFun (env, Fun (labF, args, body, st)) {
      case env.beginFun (st).addArgs (args).genLabel of
        [labEnd, env] -> 
          case compile (labEnd, env, body) of
            [used, env, code] ->
              var codeF = emptyBuffer () <+  LABEL (labF)
                                         <+  BEGIN (labF, args.size, env.getLocals)
                                         <+> code
                                         <+> label (labEnd, used) 
                                         <+  END;
              compileFuns (env, codeF)
          esac
      esac
    }
    case env.getFuns of
      [fs, env] ->
        foldl (fun (codeFs, f) { codeFs <+> compileFun (env, f) }, code, fs)
    esac
  }

  case genLabel (initCompEnv ()) of
    [endLab, env] -> 
      case compile (endLab, env, stmt) of
        [endLabUsed, env, code] -> 
            getBuffer $ emptyBuffer () <+  LABEL ("main")
                                       <+  BEGIN ("main", 0, env.getLocals)
                                       <+> code
                                       <+> label (endLab, endLabUsed)
                                       <+  END
                                       <+> compileFuns (env, emptyBuffer ())
       esac
  esac
}

