-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  | META (m)         -> sprintf ("META %s", m.string)
  | PATT (p)         -> sprintf ("PATT %s", p.string)
  | FAIL (l, c)      -> sprintf ("FAIL %d, %d", l, c)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("global name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun setArgs ([args, _], values) {
    fun inner (n, vs) {
      case vs of
        v : vs -> args[n] := v; inner (n + 1, vs)
      | _      -> if n != length (args) then failure ("Wrong number of arguments\n") fi
      esac
    }

    inner (0, values)
  }

  fun jmpCompare (c, v) {
    case c of
      "z"  -> v == 0
    | "nz" -> v != 0
    esac
  }

  fun emptyStackError (op) {
    failure ("Not enough values on the stack for %s\n", op)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cst, st, w], insns) {
    case insns of
      {}         -> c
    | ins : tail ->
      case ins of
        BINOP  (op)       ->
          case stack of
            r : l : stack -> eval ([evalOp (op, l, r) : stack, cst, st, w], tail)
          | _             -> emptyStackError ("BINOP")
          esac
      | LD     (x)        -> eval ([lookup (st, x) : stack, cst, st, w], tail)
      | LDA    (x)        -> eval ([x : stack, cst, st, w], tail)
      | ST     (x)        ->
          case stack of
            stack@(v : _) -> assign (st, x, v); eval (c, tail)
          | _             -> emptyStackError ("ST")
          esac
      | CONST   (x)       -> eval ([x : stack, cst, st, w], tail)
      | LABEL   (_)       -> eval (c, tail)
      | JMP     (l)       -> eval (c, fromLabel (env, l))
      | CJMP    (c, l)    ->
          case stack of
            v : stack -> eval ([stack, cst, st, w], if jmpCompare (c, v) then fromLabel (env, l) else tail fi)
          | _         -> emptyStackError ("CJMP")
          esac
      | CALL    (f, n)    -> eval ([stack, [st, tail] : cst, st, w], fromLabel (env, f))
      | BEGIN   (f, a, l) ->
          case makeState (a, l) of
            st -> case take (stack, a) of
              [stack, args] -> setArgs(st, args); eval ([stack, cst, st, w], tail)
            esac
          esac
      | GLOBAL (_)        -> eval (c, tail)
      | END               ->
          case cst of
            [st, tail] : cst -> eval ([stack, cst, st, w], tail)
          | _        -> c
          esac
      | DUP               ->
          case stack of
            v : _ -> eval ([v : stack, cst, st, w], tail)
          | _     -> emptyStackError ("DUP")
          esac
      | DROP              ->
          case stack of
            _ : stack -> eval ([stack, cst, st, w], tail)
          | _         -> emptyStackError ("DROP")
          esac
      | STA               ->
          case stack of
            v : i : stack -> case i of
              #val -> case stack of
                a : stack -> case a of
                  #array -> skip
                | #str   -> skip
                | _      -> failure ("STA: not an array: %s\n", a.string)
                esac;
                a[i] := v; eval ([v : stack, cst, st, w], tail)
              | _                -> emptyStackError ("STA")
              esac
            | _    -> eval ([v : stack, cst, st, w], ST (i) : tail)
            esac
          esac
      | STRING  (s)       -> eval ([s : stack, cst, st, w], tail)
      | ARRAY   (n)       ->
          case take (stack, n) of
            [stack, args] -> eval ([listArray (args) : stack, cst, st, w], tail)
          esac
      | SEXP    (x, n)    ->
          case take (stack, n) of
            [stack, args] -> eval ([Sexp (x, listArray (args)) : stack, cst, st, w], tail)
          esac
      | ELEM              ->
          case stack of
            i : a : stack -> eval ([case a of
                                      Sexp (_, vs) -> vs[i]
                                    | #str         -> a[i]
                                    | #array       -> a[i]
                                    | _            -> failure ("ELEM: not an array: %s\n", a.string)
                                    esac : stack, cst, st, w], tail)
          | _             -> emptyStackError ("ELEM")
          esac
      | BUILTIN (f, n)    ->
          case take (stack, n) of
            [stack, args] -> case evalBuiltin (f, args, w) of
              [v, w] -> eval ([v : stack, cst, st, w], tail)
            esac
          esac
      | PATT    (p)       ->
          case stack of
            v : stack ->
              case p of
                Tag (t, n) -> eval ([case v of
                  Sexp (vT, vs) -> compare (t, vT) == 0 && length (vs) == n
                | _             -> false
                esac : stack, cst, st, w], tail)
              | _          -> failure ("Invalid pattern: %s\n", p.string)
              esac
            | _       -> emptyStackError ("PATT")
          esac
      | FAIL (l, c)       ->
          case stack of
            v : stack -> failure ("Match failure at %d:%d, value '%s'\n", l, c, v.string)
          | _         -> emptyStackError ("FAIL")
          esac
      | _                 -> failure ("Unknown SM instruction: %s\n", ins.string)
      esac
    esac
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

fun addDefs (env, ds) {
  foldl (fun ([e, vars], d) {
    case d of 
      Var (names)            -> [addVars (e, names), vars +++ names]
    | Val (names)            -> [addVals (e, names), vars]
    | Fun (name, args, body) -> 
        case genFunLabel (e, name) of
          [lab, e] -> [addFun (e, name, lab, size (args)), vars]
        esac
    | _                      -> failure ("Uknown definition: %s\n", d.string)
    esac
  }, [env, {}], ds)
}

fun rememberFuns (env, ds) {
  foldl (fun (e, d) {
    case d of
      Fun (name, args, body) -> case lookupFun (env, name) of
                                  Fun (fLabel, _) -> rememberFun (e, fLabel, args, body)
                                esac
    | _                      -> e
    esac
  }, env, ds)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun wrapScope (expr) {
    case expr of
      Scope (_, _) -> expr
    | _            -> Scope ({}, expr)
    esac
  }

  fun compileFun (fLabel, nargs, env, expr) {
    compileFuns (
      case wrapScope (expr) of
        Scope (defs, expr) -> case addDefs (beginScope (env), defs) of
          [env, vars] -> case genLabel (rememberFuns (env, defs)) of
            [lab, env] -> case compile (lab, env, expr) of
              [labUsed, env, code] ->
                [endScope (env), if compare (fLabel, "main") == 0
                                 then listBuffer (map (fun (v) { GLOBAL (v) }, vars))
                                 else emptyBuffer ()
                                 fi <+ LABEL (fLabel) <+ BEGIN (fLabel, nargs, getLocals (env)) <+> code <+> label (lab, labUsed) <+ END]
            esac
          esac
        esac
      esac
    )
  }

  fun compileFuns ([env, code]) {
    case getFuns (env) of
      [{},        env] -> [env, code]
    | [functions, env] ->
      compileFuns (
        foldl (fun ([env, code], Fun (fLabel, args, body, state)) {
                 case compileFun (fLabel, size (args), addArgs (beginFun (env, state), args), body) of
                   [env, funCode] -> [env, code <+> funCode]
                 esac
               }, [env, code], functions))
    esac
  }

  fun compileArgs (env, args) {
    foldl (fun ([env, code], arg) {
             case genLabel (env) of
               [lab, env] -> case compile (lab, env, arg) of
                 [labUsed, env, argCode] -> [env, code <+> argCode <+> label (lab, labUsed)]
               esac
             esac
           }, [env, emptyBuffer ()], args)
  }

  fun dropLabelName (lab, depth) {
    if depth == 0
    then lab
    else lab ++ "_" ++ depth.string
    fi
  }

  fun dropLabels (lab, maxDepth) {
    fun inner (n) {
      singletonBuffer (LABEL (dropLabelName (lab, n))) <+> if n == 0
                                                           then emptyBuffer ()
                                                           else singletonBuffer (DROP) <+> inner (n - 1)
                                                           fi
    }

    inner (maxDepth)
  }

  fun max (a, b) {
    if a > b
    then a
    else b
    fi
  }

  fun compileMatch (lab, pattern, depth) {
    case dropLabelName (lab, depth) of
      dLab -> case pattern of
        Wildcard      -> [-1, emptyBuffer ()]
      | Named (x, p)  -> compileMatch (lab, p, depth)
      | Const (n)     -> [depth, singletonBuffer (DUP) <+ CONST (n) <+ BINOP ("==") <+ CJMP ("z", dLab)]
      | Sexp  (t, ps) ->
          case compileElemsMatch (lab, listArray (ps), depth + 1) of
            [maxDepth, code] -> [max (maxDepth, depth), singletonBuffer (DUP) <+ PATT (Tag (t, size (ps))) <+ CJMP ("z", dLab) <+> code]
          esac
      esac
    esac
  }

  fun compileElemsMatch (lab, ps, depth) {
    var code = emptyBuffer ();
    var maxDepth = -1;
    
    for var i; i := 0,
        i < length (ps),
        i := i + 1
    do
      case compileMatch (lab, ps[i], depth) of
        [newDepth, matchCode] ->
          maxDepth := max (maxDepth, newDepth);
          code := code <+ DUP <+ CONST (i) <+ ELEM <+> matchCode <+ DROP
      esac
    od;

    [maxDepth, code]
  }

  fun compileBranches (lab, env, brs, [line, col]) {
    fun inner (env, brs) {
      case brs of
        {}                    -> [env, singletonBuffer (FAIL (line, col))]
      | [pattern, expr] : brs -> case genLabel (env) of
          [nextLab, env] -> case compileMatch (nextLab, pattern, 0) of
            [maxDepth, matchCode] -> case compile (lab, env, expr) of
              [_, env, exprCode] ->
                if maxDepth >= 0
                then
                  case inner (env, brs) of
                    [env, code] -> [env, matchCode <+ DROP <+> exprCode <+ JMP (lab) <+> dropLabels (nextLab, maxDepth) <+> code]
                  esac
                else [env, matchCode <+ DROP <+> exprCode]
                fi
            esac
          esac
        esac
      esac
    }

    inner (env, brs)
  }

  fun compile (lab, env, expr) {
    case expr of
      Skip                         -> [false, env, emptyBuffer ()]
    | Set     (x, expr)            ->
      case genLabel (env) of
        [stLab, env] -> case compile (stLab, env, expr) of
          [stLabUsed, env, code] -> [false, env, code <+> label (stLab, stLabUsed) <+ ST (lookupVal (env, x))]
        esac
      esac
    | Var     (x)                  -> [false, env, singletonBuffer (LD (lookupVal (env, x)))]
    | Ref     (x)                  -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const   (n)                  -> [false, env, singletonBuffer (CONST (n))]
    | Assn    (x, e)               ->
        case x of
          Ref (x) -> case genLabel (env) of
            [eLab, env] -> case compile (eLab, env, e) of
              [eLabUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eLabUsed) <+ ST (lookupVar (env, x))]
            esac
          esac
        | _       -> case genLabel (env) of
            [xLab, env] -> case genLabel (env) of
              [eLab, env] -> case compile (xLab, env, x) of
                [xLabUsed, env, xCode] -> case compile (eLab, env, e) of
                  [eLabUsed, env, eCode] -> [false, env, xCode <+> label (xLab, xLabUsed)
                                                     <+> eCode <+> label (eLab, eLabUsed) <+ STA]
                esac
              esac
            esac
          esac
        esac
    | Seq     (s1, s2)             ->
        case genLabel (env) of
          [s2Lab, env] -> case compile (s2Lab, env, s1) of
            [s2LabUsed, env, s1Code] -> case compile (lab, env, s2) of
                [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
              esac
            esac
        esac
    | If      (cond, tBody, eBody) ->
        case genLabel (env) of
          [jmpLab, env] -> case genLabel (env) of
            [elseLab, env] -> case compile (jmpLab, env, cond) of
              [jmpLabUsed, env, condCode] -> case compile (lab, env, tBody) of
                [_, env, thenCode] ->  case compile (lab, env, eBody) of
                  [_, env, elseCode] ->
                      [true, env, condCode <+> label (jmpLab, jmpLabUsed) <+ CJMP ("z", elseLab) <+> thenCode <+ JMP (lab)
                                                                              <+ LABEL (elseLab) <+> elseCode <+ JMP (lab)]
                esac
              esac
            esac
          esac
        esac
    | While (cond, body)         ->
        case genLabel (env) of
          [startLab, env] -> case genLabel (env) of
            [condLab, env] -> case genLabel (env) of
              [jmpLab, env] -> case compile (condLab, env, body) of
                [condLabUsed, env, bodyCode] -> case compile (jmpLab, env, cond) of
                  [jmpLabUsed, env, condCode] ->
                      [false, env, singletonBuffer (JMP (condLab)) <+ LABEL (startLab) <+> bodyCode
                               <+ LABEL (condLab) <+> condCode <+> label (jmpLab, jmpLabUsed) <+ CJMP ("nz", startLab)]
                esac
              esac
            esac
          esac
        esac
    | DoWhile (body, cond)         ->
        case genLabel (env) of
          [startLab, env] -> case genLabel (env) of
            [condLab, env] -> case genLabel (env) of
              [jmpLab, env] -> case compile (condLab, env, body) of
                [condLabUsed, env, bodyCode] -> case compile (jmpLab, env, cond) of
                  [jmpLabUsed, env, condCode] ->
                      [false, env, singletonBuffer (LABEL (startLab)) <+> bodyCode
                               <+> label (condLab, condLabUsed) <+> condCode <+> label (jmpLab, jmpLabUsed) <+ CJMP ("nz", startLab)]
                esac
              esac
            esac
          esac
        esac
    | Binop   (op, left, right)    ->
        case genLabel (env) of
          [leftLab, env] -> case genLabel (env) of
            [rightLab, env] ->  case compile (leftLab, env, left) of
              [leftLabUsed, env, leftCode] -> case compile (rightLab, env, right) of
                [rightLabUsed, env, rightCode] ->
                    [false, env, leftCode <+> label (leftLab, leftLabUsed) <+> rightCode <+> label (rightLab, rightLabUsed) <+ BINOP (op)]
              esac
            esac
          esac
        esac
    | Call    (name, args)         ->
        case lookupFun (env, name) of
          Fun (fLabel, nargs) -> 
            if nargs == size (args)
            then 
              case compileArgs (env, args) of
                [env, code] -> [false, env, code <+ if fLabel[0] == '$'
                                                    then BUILTIN (name,   size (args))
                                                    else CALL    (fLabel, size (args))
                                                    fi]
              esac
            else error (sprintf ("wrong number of arguments for ""%s"", extected %d, found %d", name, nargs, size (args)), getLoc (name))
            fi
        esac
    | Scope   (defs, expr)         ->
        case addDefs (beginScope (env), defs) of
          [env, _] -> case rememberFuns (env, defs) of
            env -> case compile (lab, env, expr) of
              [labUsed, env, code] -> [labUsed, endScope (env), code]
            esac
          esac
        esac
    | Ignore  (e)                  ->
        case genLabel (env) of
          [dropLab, env] -> case compile (dropLab, env, e) of
            [dropLabUsed, env, exprCode] -> [false, env, exprCode <+> label (dropLab, dropLabUsed) <+ DROP]
          esac
        esac
    | String  (value)              -> [false, env, singletonBuffer (STRING (value))]
    | Array   (exprs)              ->
        case compileArgs (env, exprs) of
          [env, code] -> [false, env, code <+ ARRAY (size (exprs))]
        esac
    | Elem    (arr, index)         ->
        case genLabel (env) of
          [arrLab, env] -> case genLabel (env) of
            [indexLab, env] -> case compile (arrLab, env, arr) of
              [arrLabUsed, env, arrCode] -> case compile (indexLab, env, index) of
                [indexLabUsed, env, indexCode] -> [false, env, arrCode <+> label (arrLab, arrLabUsed)
                                                           <+> indexCode <+> label (indexLab, indexLabUsed) <+ ELEM]
              esac
            esac
          esac
        esac
    | ElemRef (arr, index)         ->
        case genLabel (env) of
          [arrLab, env] -> case genLabel (env) of
            [indexLab, env] -> case compile (arrLab, env, arr) of
              [arrLabUsed, env, arrCode] -> case compile (indexLab, env, index) of
                [indexLabUsed, env, indexCode] -> [false, env, arrCode <+> label (arrLab, arrLabUsed)
                                                           <+> indexCode <+> label (indexLab, indexLabUsed) ]
              esac
            esac
          esac
        esac
    | Sexp   (name, exprs)        ->
        case compileArgs (env, exprs) of
          [env, code] -> [false, env, code <+ SEXP (name, size (exprs))]
        esac
    | Case   (name, brs, loc)     ->
        case compileBranches (lab, env, brs, loc) of
          [env, code] -> [true, env, singletonBuffer (LD (lookupVal (env, name))) <+> code]
        esac
    | _                            -> failure ("Unknown expression: %s\n", expr.string)
    esac
  }

  case compileFun ("main", 0, initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                                       .addFun ("write" , "$write" , 1)
                                                       .addFun ("length", "$length", 1),
                   stmt) of
    [_, code] -> getBuffer (code)
  esac
}
