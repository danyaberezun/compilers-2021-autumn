-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, w], insns) {
  case insns of
    {}         -> [stack, state, w]
  | ins : tail ->
    case ins of
      READ      ->
        case readWorld (w) of
          [value, nw] -> eval ([value : stack, state, nw], tail)
        esac
    | WRITE     -> eval ([stack.tl, state, writeWorld (stack.hd, w)], tail)
    | BINOP (s) ->
      case stack of
        right : left : nstack -> eval ([applyOp (s, left, right) : nstack, state, w], tail)
      esac
    | LD    (v) -> eval ([state (v) : stack, state, w], tail)
    | ST    (v) -> eval ([stack.tl, state <- [v, stack.hd], w], tail)
    | CONST (c) -> eval ([c : stack, state, w], tail)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x)               -> { LD (x) }
  | Const (c)               -> { CONST (c) }
  | Binop (op, left, right) -> compileExpr (left) +++ compileExpr (right) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn   (v, e)        -> compileExpr (e) +++ { ST (v) }
  | Seq    (left, right) -> compileSM (left) +++ compileSM (right)
  | Skip                 -> {}
  | Read   (v)           -> { READ, ST (v) }
  | Write  (e)           -> compileExpr (e) +++ { WRITE }
  esac
}
