-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}                   -> m
            | LABEL (lab) : tl     -> rec ([addMap (m, lab, insns), tl])
            | BEGIN (f, a, l) : tl -> rec ([addMap (m, f, insns), tl])
            | _ : tl               -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    -- printf ("Stack:%s\nState:%s\nCode:%s\n\n", st.string, s.string, insns.string);
    case insns of
      READ : it ->
        case readWorld (w) of
          [v, w] ->
            eval ([Val (v) : st, cst, s, w], it)
        esac
    | WRITE : it ->
        case st of
          Val (v) : st ->
            eval ([st, cst, s, writeWorld (v, w)], it)
        esac
    | BINOP (op) : it ->
        case st of
          Val (r) : Val (l) : st ->
            eval ([Val (evalOp (op, l, r)) : st, cst, s, w], it)
        esac
    | LD (x) : it ->
        eval ([Val (lookup (s, x)) : st, cst, s, w], it)
    | LDA (x) : it ->
        eval ([Ref (x) : st, cst, s, w], it)
    | ST (x) : it ->
        failure ("А зачем ST, когда есть STI?\n")
    | STI : it ->
        case st of
          Val (v) : Ref (x) : st ->
            assign (s, x, v);
            eval ([Val (v) : st, cst, s, w], it)
        esac
    | CONST (n) : it ->
        eval ([Val (n) : st, cst, s, w], it)
    | LABEL (l) : it ->
        eval (c, it)
    | JMP (l) : it ->
        eval (c, fromLabel (env, l))
    | CJMP ("z", l) : it ->
        case st of
          Val (0) : st -> eval ([st, cst, s, w], fromLabel (env, l))
        | _       : st -> eval ([st, cst, s, w], it)
        esac
    | CJMP ("nz", l) : it ->
        case st of
          Val (0) : st -> eval ([st, cst, s, w], it)
        | _       : st -> eval ([st, cst, s, w], fromLabel (env, l))
        esac
    | CALL (f, n) : it ->
        eval ([st, [it, s]:cst, s, w], fromLabel (env, f))
    | BEGIN (f, a, l) : it ->
        case take (st, a) of
          [st, args] ->
            case makeState (a, l) of
              [_, ls] ->
                eval ([st, cst, [listArray (map (fun (x) { case x of Val (x) -> x esac }, args)), ls], w], it)
            esac
        esac
    | GLOBAL (x) : it ->
        assign (s, Glb (x), 0);
        eval ([st, cst, s, w], it)
    | END : it ->
        case cst of
          [it, s] : cst -> eval ([st, cst, s, w], it)
        | {}            -> c
        esac
    | DROP : it ->
        case st of
          _ : st -> eval ([st, cst, s, w], it)
        esac
    | {} ->
        c
    esac
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- printf("%s\n", showSM (insns));
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun () {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env) {
  env [6] ()
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileBinop (env, l, r, binop) {
    case env.genLabel of
      [lLab, env] ->
        case env.genLabel of
          [rLab, env] ->
            case compile (lLab, env, l) of
              [lLabUsed, env, lCode] ->
                case compile (rLab, env, r) of
                  [rLabUsed, env, rCode] ->
                    [false, env, lCode <+> label (lLab, lLabUsed) <+> rCode <+> label (rLab, rLabUsed) <+ binop]
                esac
            esac
        esac
    esac
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref    (Var (x))  -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)      ->
      case env.genLabel of
        [eLab, env] ->
          case compile (eLab, env, e) of
            [eLabUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eLabUsed) <+ DROP]
          esac
      esac
    | Binop  (op, l, r) -> compileBinop (env, l, r, BINOP (op))
    | Assn (x, e)       -> compileBinop (env, x, e, STI)
    | Read (x)          ->
       case env.genLabel of
         [xLab, env] ->
           case compile (xLab, env, x) of
             [xLabUsed, env, xCode] -> [false, env, xCode <+> label (xLab, xLabUsed) <+ READ <+ STI <+ DROP]
           esac
       esac
    | Write (x)         ->
       case env.genLabel of
         [xLab, env] ->
           case compile (xLab, env, x) of
             [xLabUsed, env, xCode] -> [false, env, xCode <+> label (xLab, xLabUsed) <+ WRITE]
           esac
       esac
    | Seq   (s1, s2)    ->
       case env.genLabel of
         [s2Lab, env] ->
            case compile (s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                 case compile (lab, env, s2) of
                   [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                 esac
            esac
       esac
    | If    (e, st, sf) ->
        case env.genLabel of
          [tLab, env] ->
            case env.genLabel of
              [tsLab, env] ->
                case env.genLabel of
                  [eLab, env] ->
                    case compile (eLab, env, e) of
                      [eLabUsed, env, eCode] ->
                        case compile (tLab, env, st) of
                          [tLabUsed, env, tCode] ->
                            case compile (lab, env, sf) of
                              [labUsed, env, fCode] ->
                                [true, env, eCode
                                        <+> label (eLab, eLabUsed)
                                        <+  CJMP ("z", tsLab)
                                        <+> tCode
                                        <+> label (tLab, tLabUsed)
                                        <+  JMP (lab)
                                        <+  LABEL (tsLab)
                                        <+> fCode]
                            esac
                        esac
                    esac
                esac
            esac
        esac
    | While (e, s)      ->
        case env.genLabel of
          [sLab, env] ->
            case env.genLabel of
              [eLab, env] ->
                case env.genLabel of
                  [expLab, env] ->
                    case compile (expLab, env, e) of
                      [expLabUsed, env, expCode] ->
                        case compile (sLab, env, s) of
                          [sLabUsed, env, sCode] ->
                            [true, env,
                                        singletonBuffer (LABEL (eLab))
                                    <+> expCode
                                    <+> label (expLab, expLabUsed)
                                    <+  CJMP ("z", lab)
                                    <+> sCode
                                    <+> label (sLab, sLabUsed)
                                    <+  JMP (eLab)]
                        esac
                    esac
                esac
            esac
        esac
    | DoWhile (s, e)    ->
        case env.genLabel of
          [bLab, env] ->
            case env.genLabel of
              [sLab, env] ->
                case env.genLabel of
                  [eLab, env] ->
                    case compile (eLab, env, e) of
                      [eLabUsed, env, eCode] ->
                        case compile (sLab, env, s) of
                          [sLabUsed, env, sCode] ->
                            [false, env,
                                        singletonBuffer (LABEL (bLab))
                                    <+> sCode
                                    <+> label (sLab, sLabUsed)
                                    <+> eCode
                                    <+> label (eLab, eLabUsed)
                                    <+  CJMP ("nz", bLab)]
                        esac
                    esac
                esac
            esac
        esac
    | Scope (ds, e) ->
        fun addDefn ([env, fs], d) {
          case d of
            VDefn (x) -> [addVar (env, x), fs]
          | FunDefn (f, args, body) ->
              case env.genFunLabel (f) of
                [flabel, env] -> [addFun (env, f, flabel, size (args)), [f, args, body, flabel] : fs]
              esac
          esac
        }

        fun addFCode ([env, code], [f, args, body, flabel]) {
          case genLabel (env) of
            [cLab, env] ->
              case compile (cLab, foldl (addArg, beginFun (env), args), body) of
                [cLabUsed, env, bCode] ->
                  [ env
                  , code <+  BEGIN (flabel, size (args), getLocals (env))
                          <+> bCode
                          <+> label (cLab, cLabUsed)
                          <+  END
                  ]
              esac
          esac
        }

        case foldl (addDefn, [beginScope (env), {}], ds) of
          [env, funs] ->
            case foldl (addFCode, [env, emptyBuffer ()], funs) of
              [env, codeSfx] ->
                case env.genLabel of
                  [eLab, env] ->
                    case compile (eLab, env, e) of
                      [eLabUsed, env, code] ->
                        [false, endScope (env), code <+> label (eLab, eLabUsed) <+> codeSfx]
                    esac
                esac
            esac
        esac
    | Call (f, args) ->
        fun addArgCode ([env, code], arg) {
          case genLabel (env) of
            [lab, env] ->
              case compile (lab, env, arg) of
                [labUsed, env, argCode] ->
                  [env, code <+> argCode <+> label (lab, labUsed)]
              esac
          esac
        }

        case lookupFun (env, f) of
          Fun (lbl, _) ->
            case foldl (addArgCode, [env, emptyBuffer ()], args) of
              [env, code] -> [false, env, code <+ CALL (lbl, size (args))]
            esac
        esac
      | End ->
        [false, env, singletonBuffer (END)]
    esac
  }

  -- Костыль, чтобы вложенные скоупы в глобальном неймспейсе работали.
  var fxdStmt =
    case stmt of
      Scope (ds, e) ->
        Scope (
          ds +++ { FunDefn ("_MAIN", {}, e) },
          Seq (Call ("_MAIN", {}), End)
        )
    esac;
  var globalDefs =
    case stmt of
      Scope (ds, e) ->
        foldl (
          fun (code, d) {
            case d of
              VDefn (x) -> code <+ GLOBAL (x)
            | FunDefn (_, _, _) -> code
            esac
          },
          emptyBuffer (),
          ds
        )
    esac;


  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, fxdStmt) of
         [endLabUsed, _, code] -> getBuffer $ globalDefs <+> code <+> label (endLab, endLabUsed) 
       esac
  esac
}

