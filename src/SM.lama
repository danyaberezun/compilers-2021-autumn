-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac;
    [args, locs]
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun addLocal(stack, a, l) {
    case take(stack, a) of
      [stack, args] -> 
        case foldl(fun ([state, n], arg) {[assign(state, Arg (n), arg), n + 1]}, [makeState(a, l), 0], args) of
          [state, _] -> [stack, state]
        esac
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cst, state, w], insns) {
    case insns of 
      ins:insns -> 
      -- printf("%s\n%s\n", showSMInsn(ins), stack.string);
        case ins of 
            READ -> case readWorld(w) of
                      [n, w] -> eval ([n:stack, cst, state, w], insns) 
                    esac
          | WRITE -> eval ([tl(stack), cst, state, writeWorld(hd(stack), w)], insns)
          | BINOP (op) -> case stack of 
                            r:l:stack -> eval ([evalOp(op, l, r):stack, cst, state, w], insns)
                          esac 
          | LD (x) -> eval ([lookup(state, x):stack, cst, state, w], insns)
          | ST (x) -> eval ([tl(stack), cst, assign(state, x, hd(stack)), w], insns)
          | CONST (n) -> eval ([n:stack, cst,  state, w], insns)
          | LABEL (l) -> eval (c, insns)
          | JMP (l) -> eval (c, fromLabel(env, l))
          | CJMP ("z", l) -> eval([tl(stack), cst, state, w], if hd(stack) then insns else fromLabel(env, l) fi)
          | CJMP ("nz", l) -> eval([tl(stack), cst, state, w], if hd(stack) then fromLabel(env, l) else insns fi)
          | LDA (x) -> eval([Ref(x):stack, cst, state, w], insns)
          | STI -> case stack of 
                    Ref(x):v:stack -> eval([stack, cst, assign(state, x, v), w], insns)
                  esac
          | DUP -> eval([hd(stack):stack, cst, state, w], insns)
          | DROP -> eval([tl(stack), cst, state, w], insns)
          | GLOBAL (x) -> eval([stack, cst, assign(state, Glb(x), 0), w], insns)
          | CALL (l, _) -> eval([stack, [state, insns]:cst, state, w], fromLabel(env, l))
          | BEGIN (_, a, l) ->
              case addLocal(stack, a, l) of
                [stack, state] -> eval([stack, cst, state, w], insns)
              esac
          | END -> case cst of
                       [state, insns]:cst -> eval([stack, cst, state, w], insns)
                     | {} -> c
                   esac    
          | STRING (s) -> eval([s:stack, cst, state, w], insns)
          | ARRAY (n) -> 
              case take(stack, n) of
                [stack, elems] -> eval([listArray(elems):stack, cst, state, w], insns)
              esac
          | SEXP (tag, n) -> 
              case take(tl(stack), n) of
                [newStack, elems] -> eval([Sexp(tag, listArray(elems)):newStack, cst, state, w], insns)
              esac
          | ELEM -> 
              case stack of
                i : arr : stack -> 
                  eval([case arr of
                      Sexp (_, arr) -> arr[i]
                    | _ -> arr[i]
                  esac : stack, cst, state, w], insns)
              esac
          | STA -> 
              case stack of
                i : arr : v : stack -> 
                  case arr of
                      Sexp (_, arr) -> arr[i] := v
                    | _ -> arr[i] := v
                  esac; 
                  eval([stack, cst, state, w], insns)
              esac
          | BUILTIN (name, nArgs) -> 
              case take(stack, nArgs) of
                [stack, args] -> 
                  case evalBuiltin(name, args, w) of
                    [v, w] -> eval([v:stack, cst, state, w], insns)
                  esac
              esac
        esac
      | _ -> c
    esac
  }
  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

fun addDefs(env, defs) {
  foldl( fun ([env, funs, globalDefs], def) {
          case def of
              Var (ds) -> [addVars(env, ds), funs, if env.isGlobal 
                                                 then foldl(fun (globalDefs, def) {globalDefs <+ GLOBAL(def)}, globalDefs, ds)
                                                 else globalDefs
                                                 fi]
            | Fun (name, args, body) -> 
              case genFunLabel(env, name) of
                [lab, env] -> [addFun(env, name, lab, args.size), [lab, args, body]:funs, globalDefs]
              esac                                     
          esac
        }, [beginScope(env), {}, emptyBuffer()], defs)
}

fun rememberFuns (env, funs) {
  foldl (fun (env, [lab, args, body]) {rememberFun(env, lab, args, body)}, env, funs)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileNew (env, stmt) {
    case env.genLabel of
      [lab, env] -> 
        case compile(lab, env, stmt) of
          [labUsed, env, code] -> [env, code <+> label(lab, labUsed)]
        esac
    esac
  }

  fun compileMany(env, args) {
    foldl (fun ([env, code], arg) {
      case compileNew(env, arg) of
        [env, argCode] -> [env, code <+> argCode]
      esac
    }, [env, emptyBuffer()], args)
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVal(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVal(env, x))) <+ STI]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e) -> 
        case compileNew(env, e) of
          [env, code] -> [false, env, code <+ DROP]
        esac
    | Binop (op, l, r) -> 
        case compileNew(env, l) of
          [env, lCode] -> 
            case compileNew(env, r) of
              [env, rCode] -> [false, env, lCode <+> rCode <+ BINOP (op)]
            esac
        esac
    | Assn (x, e) ->
        case compileNew(env, e) of
          [env, eCode] -> 
            case compileNew(env, x) of
              [env, xCode] -> [false, env, eCode <+ DUP <+> xCode]
            esac
        esac 
    | Set (x, e) -> 
        case compileNew(env, e) of
          [env, eCode] -> [false, env, eCode <+ DUP <+ LDA (lookupVal(env, x)) <+ STI]
        esac 
    | Seq   (s1, s2) ->
        case compileNew(env, s1) of
          [env, s1Code] ->
            case compile (lab, env, s2) of
              [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> s2Code]
            esac
        esac
    | If (e, s1, s2) -> 
        case env.genLabel of 
          [s2Lab, env] -> 
            case compile(lab, env, s1) of
              [_, env, s1Code] -> 
                case compile(lab, env, s2) of
                  [_, env, s2Code] -> 
                    case compileNew(env, e) of
                      [env, eCode] -> [true, env, eCode <+ CJMP("z", s2Lab) <+> s1Code <+ JMP(lab) <+ LABEL(s2Lab) <+> s2Code ]
                    esac
                esac
            esac
        esac
    | While (e, s1) -> 
        case env.genLabels(2) of
          [eLab, s1Lab, env] -> 
            case compile(eLab, env, s1) of
              [_, env, s1Code] -> 
                case compileNew(env, e) of
                  [env, eCode] ->  [false, env, singletonBuffer(JMP(eLab)) <+ LABEL(s1Lab) <+> s1Code <+ LABEL(eLab) <+> eCode <+ CJMP("nz", s1Lab)]
                esac
            esac
        esac
    | DoWhile (s1, e) -> 
        case env.genLabel of
          [s1Lab, env] -> 
            case compileNew(env, s1) of
              [env, s1Code] -> 
                case compileNew(env, e) of
                  [env, eCode] -> [false, env, label(s1Lab, true) <+> s1Code <+> eCode <+ CJMP("nz", s1Lab)]
                esac
            esac
        esac
    | Scope (defs, body) ->
        case addDefs (env, defs) of
          [env, funs, globalDefs] -> 
            case compile(lab, rememberFuns(env, funs), body) of 
              [labUsed, env, code] -> [labUsed, endScope(env), globalDefs <+> code]
            esac
        esac
    | Call (name, args) -> 
        case compileMany(env, args) of
          [env, argsCode] -> [false, env, argsCode <+ case lookupFun(env, name) of 
                                                        Fun (fLab, nArgs) -> 
                                                          case fLab[0] of
                                                            '$' -> BUILTIN (name, nArgs)
                                                            | _ -> CALL (fLab, nArgs)
                                                          esac
                                                      esac]
        esac
    | Array (elems) -> 
        case compileMany(env, elems) of
          [env, elemsCode] -> [false, env, elemsCode <+ ARRAY(size(elems))]
        esac
    | String (strVal) -> [false, env, singletonBuffer(STRING(strVal))]
    | Sexp (tag, elems) -> 
        case compileMany(env, elems) of
          [env, elemsCode] -> [false, env, elemsCode <+ CONST(tagHash(tag)) <+ SEXP (tag, size (elems))]
        esac
    | Elem (e, i) -> 
        case compileMany(env, {e, i}) of
          [env, argsCode] -> [false, env, argsCode <+ ELEM]
        esac
    | ElemRef (e, i) -> 
        case compileMany(env, {e, i}) of
          [env, argsCode] -> [false, env, argsCode <+ STA]
        esac
    esac
  }

  fun compileFun (env, Fun (fLab, args, body, state)) {
    case compileNew(addArgs(beginFun(env, state), args), body) of 
      [env, code] -> [env, singletonBuffer(LABEL(fLab)) <+ BEGIN (fLab, args.size, getLocals(env)) <+> code <+ END]
    esac
  }

  fun compileFuns(env) {
    case getFuns(env) of
        [{}, env] -> emptyBuffer()
      | [funs, env] -> 
          case foldl (fun ([env, code], f) {
              case compileFun(env, f) of
                [env, funCode] -> [env, code <+> funCode]
              esac
            }, [env, emptyBuffer()], funs)
          of [env, funsCode] -> funsCode <+> compileFuns(env)
          esac
    esac 
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
        [endLabUsed, env, code] -> 
          getBuffer $ singletonBuffer(LABEL("main")) <+ BEGIN ("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed) <+ END <+> compileFuns(env)
      esac
  esac
}
