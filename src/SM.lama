-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stck, q, [i, o]], instructions) {
  case instructions of
    0 -> [stck, q, [i, o]]
    | ins : rest ->
        case ins of
          READ -> case i of
            x:s -> eval([x:stck, q, [s, o]], rest)
          esac
        | WRITE -> case stck of
            x:s -> eval([s, q, [i, x:o]], rest)
          esac
        | BINOP (op) ->  case stck of
            x:y:s -> eval([evalBinOp(op, y, x) : s, q, [i, o]], rest)
          esac
        | LD (name) -> eval([q(name) : stck, q, [i, o]], rest)
        | ST (name) -> case stck of
            x:s -> eval([s, q <- [name, x], [i, o]], rest)
          esac
        | CONST (value) -> eval([value : stck, q, [i, o]], rest)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name) -> {LD (name)}
    | Const (value) -> {CONST (value)}
    | Binop (op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ {BINOP (op)}
    | _ -> failure("This expression cannot be compiled")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (name, expr) -> compileExpr(expr) +++ {ST (name)}
    | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Skip -> {}
    | Read (name) -> {READ, ST (name)}
    | Write (expr) -> compileExpr(expr) +++ {WRITE}
    | _ -> failure("This statement cannot be compiled")
  esac
}
