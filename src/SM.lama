-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Interpret config parameter change for eval
fun evalUpdateConfiguration(env, c @ [stack, st, world], insn) {
  case insn of
    READ -> 
      case readWorld(world) of 
        [v, newWorld] -> [v : stack, st, newWorld]
      esac
  | WRITE -> 
      case stack of
        z:s -> [s, st, writeWorld(z, world)]
      esac
  | BINOP (op) -> 
      case stack of 
        y : x : newStackTail -> [evalOp(op, x, y) : newStackTail, st, world]
      esac
  | LD (x) -> [st(x):stack, st, world]
  | ST (x) -> 
      case stack of 
        z : newStackTail -> [z : newStackTail, st <- [x, z], world]
      esac
  | CONST (n) -> [n : stack, st, world]
  | LABEL (lab) -> c
  | JMP (lab) -> c
  | CJMP (cond, lab) -> 
    case stack of 
      _ : newStack -> [newStack, st, world]
    esac
  | LDA (x) -> [Ref(x):stack, st, world]
  | STI -> 
      case stack of 
        n : Ref(x):newStackTail -> [n:newStackTail, st <- [x, n], world]
      esac
  | DROP ->
      case stack of 
        v:newStackTail -> [newStackTail, st, world]
      esac
  | _ -> failure(
           "Operation %s is not supported atevalUpdateConfiguration.\n",
           showSMInsn(insn)
         )
  esac
}

-- Interpret insn parameter change for eval.
fun evalUpdateInsns(env, stack, insn, insnsTail) {
  case insn of
    READ -> insnsTail
  | WRITE -> insnsTail
  | BINOP (op) -> insnsTail
  | LD (x) -> insnsTail
  | ST (x) -> insnsTail
  | CONST (n) -> insnsTail
  | LABEL (lab) -> insnsTail
  | JMP (lab) -> fromLabel(env, lab)
  | CJMP (cond, lab) -> 
    case stack of 
      0:tail -> 
        case cond of 
          "z" -> fromLabel(env, lab) |
          "nz" -> insnsTail
        esac
      | nz:tail -> 
        case cond of 
          "nz" -> fromLabel(env, lab) |
          "z" -> insnsTail
        esac
    esac
  | LDA (x) -> insnsTail
  | STI -> insnsTail
  | DROP -> insnsTail
  | _ -> failure(
           "Operation %s is not supported at evalUpdateInsns",
           showSMInsn(insn)
         )
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    {} -> c
    | insn : insnsTail -> 
      eval(
        env,
        evalUpdateConfiguration(env, c, insn),
        case c of
          [stack, _, _] -> evalUpdateInsns(env, stack, insn, insnsTail)
        esac
      )
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, expr) {
    fun compileIgnore(e, labelsGenerated @ [lab, env]) {
      case compile(lab, env, e) of 
        [labUsed, env, code] ->
          var compiled = code
            <+> label(lab, labUsed)
            <+ DROP;
          [false, env, compiled]
      esac
    }

    fun compileBinOp(op, e1, e2) {
      case env.genLabel of 
        [lab, env] ->
          case compile(lab, env, Seq (e1, e2)) of
            [labUsed, env, code] ->
              var compiled = code <+> label(lab, labUsed) <+ BINOP(op);
              [false, env, compiled]
          esac
      esac
    }

    fun compileWrite(e) {
      case compile(lab, env, e) of
        [labUsed, env, code] -> 
          var compiled = code <+> label(lab, labUsed) <+ WRITE;
          [false, env, compiled]
      esac
    }

    fun compileAssn(refE, e) {
      case env.genLabel of 
        [eLab, env] ->
          case compile(eLab, env, Seq (refE, e)) of 
            [labUsed, env, code] -> 
              var compiled = code <+> label(eLab, labUsed) <+ STI;
              [false, env, compiled]
          esac
      esac
    }

    fun compileSeq(e1, e2)  {
      case env.genLabel of
        [e2Lab, env] ->
           case compile (e2Lab, env, e1) of
             [e2LabUsed, env, e1Code] ->
                case compile (lab, env, e2) of
                  [labIsUsed, env, e2Code] -> 
                    var compiled = e1Code
                      <+> label (e2Lab, e2LabUsed)
                      <+> e2Code;
                    [labIsUsed, env, compiled]
                esac
           esac
      esac
    }

    fun compileIf(cond, eThen, eElse,
                  labelsGenerated @ [falseLab, condLab, env]) {
      case compile (lab, env, eThen) of 
        [_, env, eThenCompiled] ->
          case compile (lab, env, eElse) of
            [_, env, eElseCompiled] ->
              case compile(condLab, env, cond) of
                [condLabUsed, env, condCode] ->
                  var compiled = condCode
                    <+> label(condLab, condLabUsed)
                    <+ CJMP ("z", falseLab)
                    <+> eThenCompiled
                    <+ JMP (lab)
                    <+ LABEL (falseLab)
                    <+> eElseCompiled;
                  [true, env, compiled]
              esac
          esac
      esac
    }

    fun compileWhile(cond, e, labelsGenerated @ [cycleLab, condLab, env]) {
      case compile (cycleLab, env, e) of 
        [_, env, scode] -> 
          case compile(condLab, env, cond) of 
            [condLabUsed, env, condCode] ->
              var compiled = singletonBuffer(LABEL (cycleLab))
                <+> condCode
                <+> label(condLab, condLabUsed)
                <+ CJMP ("z", lab)
                <+> scode
                <+ JMP (cycleLab);
              [true, env, compiled]
          esac
      esac
    }

    fun compileDoWhile(e, cond, labelsGenerated @ [cycleLab, condLab, env]) {
      case compile (cycleLab, env, e) of 
        [_, env, scode] -> 
          case compile(condLab, env, cond) of 
            [condLabUsed, env, condCode] ->
              var compiled = singletonBuffer(LABEL (cycleLab))
                <+> scode
                <+> condCode
                <+> label(condLab, condLabUsed)
                <+ CJMP ("nz", cycleLab);
              [false, env, compiled]
          esac
      esac
    }

    case expr of
      Skip -> [false, env, emptyBuffer ()]                                  |
      Var (x) -> [false, env, singletonBuffer (LD (x))]                     |
      Ref (x) -> [false, env, singletonBuffer (LDA (x))]                    |
      Const (n) -> [false, env, singletonBuffer (CONST (n))]                |
      Ignore (e) -> compileIgnore(e, env.genLabel)                          |
      Binop (op, e1, e2) -> compileBinOp(op, e1, e2)                        |
      Read (x) -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]    |
      Write (e) -> compileWrite(e)                                          |
      Assn (refE, e) -> compileAssn(refE, e)                                |
      Seq (e1, e2) -> compileSeq(e1, e2)                                    |
      If (cond, e1, e2) -> compileIf(cond, e1, e2, env.genLabels(2))        |
      While (cond, e) -> compileWhile(cond, e, env.genLabels(2))            |
      DoWhile (e, cond) -> compileDoWhile(e, cond, env.genLabels(2))        |
      _ -> failure ("%s is not implemented\n", string(expr))   
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}