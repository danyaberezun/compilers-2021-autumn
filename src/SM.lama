-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, w], insns) {
   case insns of 
      i: is -> case i of
         READ -> 
            let [v, w1] = readWorld(c[2]) in
            eval([v:stack, state, w1], is)
         | WRITE ->
            let v:t = stack in
            eval([t, state, writeWorld(v, w)], is)
         | BINOP(op) ->
            let v2:t1 = stack in
            let v1:t2 = t1 in
            let v = case op of
               "+" -> v1 + v2
               | "-" -> v1 - v2
               | "*" -> v1 * v2
               | "/" -> v1 / v2
               | "%" -> v1 % v2
               | "<" -> v1 < v2
               | ">" -> v1 > v2
               | "<=" -> v1 <= v2
               | ">=" -> v1 >= v2
               | "==" -> v1 == v2
               | "!=" -> v1 != v2
               | "&&" -> v1 && v2
               | "!!" -> v1 !! v2
               esac
            in
            eval([v:t2, state, w], is)
         | LD(x) -> eval([state(x):stack, state, w], is)
         | ST(x) -> 
            let v:t = stack in
            eval([t, state <- [x, v], w], is)
         | CONST(n) -> eval([n:stack, state, w], is)
         esac
      | _ -> c
      esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of
      Var(x) -> {LD(x)}
      | Const(n) -> {CONST(n)}
      | Binop(op, e1, e2) ->
         compileExpr(e1) +++ compileExpr(e2) +++ {BINOP(op)}
   esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of
      Assn(x, e) -> compileExpr(e) +++ {ST(x)}
      | Seq(s1, s2) -> compileSM(s1) +++ compileSM(s2)
      | Skip -> {}
      | Read(x) -> {READ, ST(x)}
      | Write(e) -> compileExpr(e) +++ {WRITE}
   esac
}