-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of ins:tail ->
    case ins of
      READ -> case readWorld (world) of [n, newWorld] -> eval(env, [n:stack, state, newWorld], tail) esac
      | WRITE -> case stack of top:bottom -> eval(env, [bottom, state, writeWorld(top, world)], tail) esac
      | BINOP (binop) -> case stack of top1:top0:bottom ->
        var top = evalOp(binop, top0, top1);
        eval(env, [top:bottom, state, world], tail)
      esac
      | LD (x) -> eval(env, [state(x) : stack, state, world], tail)
      | ST (x) -> case stack of top:bottom -> eval(env, [top : bottom, state <- [x, top], world], tail) esac
      | CONST (n) -> eval(env, [n : stack, state, world], tail)
      | LABEL (_) -> eval(env, c, tail)
      | JMP (l) -> eval(env, c, fromLabel(env, l))
      | CJMP("z", l) -> case stack of top:bottom -> case top of
        0 -> eval(env, [bottom, state, world], fromLabel(env, l))
        | _ -> eval(env, [bottom, state, world], tail)
        esac esac
      | CJMP("nz", l) -> case stack of top:bottom -> case top of
        0 -> eval(env, [bottom, state, world], tail)
        | _ -> eval(env, [bottom, state, world], fromLabel(env, l))
        esac esac
      | LDA(x) -> eval (env, [x : stack, state, world], tail)
      | STI -> case stack of top1:top0:bottom -> eval (env, [top1:bottom, state <- [top0, top1], world], tail) esac
      | DROP -> eval (env, [tl (stack), state, world], tail)
    esac
  | {} -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Var    (x)     -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)     -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)     -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e)      -> case compile(lab, env, e) of [used, env, code] -> [false, env, code <+> label(lab, used) <+ WRITE] esac
    | Assn  (x, e)   -> case env.genLabels(2) of [lab1, lab2, env] ->
                          case compile(lab1, env, x) of [used1, env, code] ->
                            case compile(lab2, env, e) of [used2, env, eCode] -> 
                              [false, env, code <+> label (lab1, used1) <+> eCode <+> label (lab2, used2) <+ STI]
                            esac
                          esac
                        esac
    | Seq (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, body1, body2) -> 
      case env.genLabels(2) of [lab1, lab2, env] ->
        case compile(lab1, env, cond) of [used1, env, condCode] ->
          case compile(lab, env, body1) of [_, env, code1] ->
            case compile(lab, env, body2) of [_, env, code2] -> 
            [true, env, condCode <+ CJMP("z", lab2) <+> code1 <+> singletonBuffer(JMP(lab)) <+> label(lab2, true) <+> code2]
            esac
          esac
        esac
      esac
    | While (cond, body) -> 
      case env.genLabels(2) of [lab1, lab2, env] ->
        case compile(lab1, env, cond) of [used, env, condCode] ->
            case compile(lab2, env, body) of [_, env, code] ->
              [true, env, label(lab2, true) <+> condCode <+ CJMP("z", lab) <+> label(lab1, used) <+> code <+ JMP (lab2)]
          esac
        esac
      esac
    | DoWhile (body, cond) -> 
      case env.genLabels(2) of [lab1, lab2, env] ->
        case compile(lab1, env, cond) of [used, env, condCode] ->
          case compile(lab2, env, body) of [_, env, code] ->
            [false, env, label (lab1, true) <+> code <+> label (lab2, used) <+> condCode <+ CJMP ("nz", lab1)]
          esac
        esac
      esac
    | Ignore (e) -> 
      case compile (lab, env, e) of [used, env, code] -> [false, env, code <+> label (lab, used) <+ DROP] esac
    | Binop (op, l, r) ->         
      case env.genLabels (2) of [lab1, lab2, env] ->
        case compile (lab1, env, l) of [lUsed, env, lCode] ->
          case compile (lab2, env, r) of [rUsed, env, rCode] ->
            [false, env, lCode <+> label (lab1, lUsed) <+> rCode <+> label (lab2, rUsed) <+ BINOP (op)]
          esac          
        esac
      esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
