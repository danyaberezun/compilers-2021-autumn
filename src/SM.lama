-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
      READ      -> sprintf ("READ")
    | WRITE     -> sprintf ("WRITE")
    | BINOP (s) -> sprintf ("BINOP %s", s)
    | LD    (x) -> sprintf ("LD %s", x)
    | ST    (x) -> sprintf ("ST %s", x)
    | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world@[input, output]], insns) {
  case insns of
      {} -> c
    | inst : tail ->
    --       printf("%s\n\n", showSMInsn(inst).string);
      case inst of
          READ ->  eval([(hd(input)) : stack, state, [tl(input), output]], tail)
        | WRITE ->  eval([tl(stack), state, [input, hd(stack) : output]], tail)
        | LD(v) -> eval([state(v) : stack, state, world], tail)
        | ST(v) -> eval([tl(stack), state <- [v, hd(stack)], world], tail)
        | CONST(n) -> eval([n : stack, state, world], tail)
        | BINOP(x) -> case stack of
          a : b : tstack -> eval([evalBinOp(x, b, a) : tstack, state, world], tail)
        esac
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (variable) -> {LD(variable)}
    | Const (const) -> {CONST (const)}
    | Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP(op)}
    | x -> failure("unknown element of %s", x.string)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (name, expr) -> compileExpr(expr) +++ { ST(name) }
    | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Skip -> {}
    | Read (name) -> {READ, ST(name)}
    | Write (expr) -> compileExpr(expr) +++ {WRITE}
    | _ -> failure("unknown command")
  esac
}
