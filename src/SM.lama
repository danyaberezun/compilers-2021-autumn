-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, world, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, returns a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Interpret condition parameter change for eval
  fun evalUpdateCondition(c@[stack, callStack, state, world], insn, insnsTail) {
    case insn of
      READ ->
        case readWorld (world) of
          [x, newWorld] -> [x : stack, callStack, state, newWorld]
        esac
    | WRITE ->
        case stack of
          x : newStack ->
            [newStack, callStack, state, writeWorld(x, world)]
        esac
    | BINOP (op) ->
        case stack of
          y : x : newStack -> [evalOp(op, x, y) : newStack, callStack, state, world]
        esac
    | LD (x) -> [lookup(state, x) : stack, callStack, state, world]
    | LDA (x) -> [x : stack, callStack, state, world]
    | ST (x) ->
        case stack of
          taken : newStack -> assign(state, x, taken); [stack, callStack, state, world]
        esac
    | STI ->
        case stack of
          v : x : newStack ->
            assign(state, x, v); [v : newStack, callStack, state, world]
        esac
    | CONST (n) -> [n : stack, callStack, state, world]
    | LABEL (_) -> c
    | JMP (label) -> c
    | CJMP (cond, label) ->
        case stack of
          _ : newStack -> [newStack, callStack, state, world]
        esac
    | CALL (f, _) -> [stack, [state, insnsTail]:callStack, state, world]
    | BEGIN (f, a, l) ->
        case take(stack, a) of
          [newStack, args] ->
            var newState = makeState(a, l);
            foldl(
              fun (acc, x) { assign(newState, Arg (acc), x); acc + 1 },
              0,
              args
            );
            [newStack, callStack, newState, world]
        esac
    | GLOBAL (x) -> assign(state, Glb(x), 0); [stack, callStack, state, world]
    | END ->
        case callStack of
          {} -> c
        | [newState, _] : newCallStack -> [stack, newCallStack, newState, world]
        esac
    | DROP -> case stack of (_ : newStack) -> [newStack, callStack, state, world] esac
    | STRING (strName) -> [strName : stack, callStack, state, world]
    | ARRAY (n) ->
      case take(stack, n) of
        [newStack, arr] ->
          [listArray(arr) : newStack, callStack, state, world]
      esac
    | SEXP (name, n) ->
      case take(stack, n) of
        [newStack, vals] ->
          [Sexp(name, listArray(vals)) : newStack, callStack, state, world]
      esac
    | STA ->
        case stack of
          v : ind : arr : newStack ->
            case arr of
              Sexp (_, vals) -> vals[ind]
            | _ -> arr[ind]
            esac := v;
            [v : newStack, callStack, state, world]
        esac
    | ELEM ->
      case stack of
        idx : arr : newStack ->
          var placed =
            case arr of 
              Sexp (_, vals) -> vals[idx]
            | _ -> arr[idx]
            esac;
          [placed : newStack, callStack, state, world]
      esac
    | BUILTIN (f, n) ->
        case take(stack, n) of
          [newStack, args] ->
            case evalBuiltin(f, args, world) of
              [res, newWorld] -> [res : newStack, callStack, state, newWorld]
            esac
        esac
    esac
  }

  ------------------------------------------------------------------------------
  -- <From A06>                                                               --
  ------------------------------------------------------------------------------

  -- Interpret insn parameter change for eval.
  fun evalUpdateInsns(stack, callStack, insn, insnsTail) {
    case insn of
      READ -> insnsTail
    | WRITE -> insnsTail
    | BINOP(_) -> insnsTail
    | LD(_) -> insnsTail
    | ST(_) -> insnsTail
    | CONST(_) -> insnsTail
    | LABEL(_) -> insnsTail
    | JMP(label) -> fromLabel(env, label)
    | CJMP(cond, label) ->
        case stack of
          taken : stackTail ->
            case cond of
              "z" ->
                if taken == 0
                then fromLabel(env, label)
                else insnsTail
                fi
            | _ ->
                if taken == 0
                then insnsTail
                else fromLabel(env, label)
                fi
            esac
        esac
    | LDA(_) -> insnsTail
    | STI -> insnsTail
    | DROP -> insnsTail
    | GLOBAL(_) -> insnsTail
    | CALL(f, _) -> fromLabel(env, f)
    | BEGIN(_, _, _) -> insnsTail
    | END ->
        case callStack of
          {} -> {}
        | [_, newInsnsTail]:cst -> newInsnsTail
        esac
    | STRING(_) -> insnsTail
    | ARRAY(_) -> insnsTail
    | SEXP(_, _) -> insnsTail
    | STA -> insnsTail
    | ELEM -> insnsTail
    | BUILTIN(f, n) -> insnsTail
    | _ -> failure(
             "Operation %s is not supported at evalUpdateInsns",
             showSMInsn(insn)
           )
    esac
  }

  fun eval (c@[stack, callStack, s, world], insns) {
    case insns of
      {} -> c
      | insn : insnsTail ->
        var newCondition = evalUpdateCondition(c, insn, insnsTail);
        var newInsns = evalUpdateInsns(stack, callStack, insn, insnsTail);
        eval(
          newCondition,
          newInsns
        )
    esac
  }

  eval ([{}, {}, makeState (0, 0), world], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun addDefinitions(env, defs) {
    foldl(fun([code, env], def) {
      case def of
        Var (vars) ->
          var newEnv = addVars(env, vars);
          if isGlobal(newEnv) then
            [
              foldl(
                fun (code, variable) { code <+ GLOBAL (variable) }, code, vars
              ),
              newEnv
            ]
          else
            [code, newEnv]
          fi
        | Fun(name, args, body) ->
          case genFunLabel(env, name) of
            [fLabel, env] -> [code, addFun(env, name, fLabel, size(args))]
          esac
      esac
    }, [emptyBuffer(), env], defs)
  }

  fun rememberDefinitions(env, defs) {
    foldl(
      fun (env, def) {
        case def of
          Fun (name, args, body) ->
            case lookupFun(env, name) of
              Fun(fLabel, _) -> rememberFun(env, fLabel, args, body)
            esac 
          | _ -> env
        esac
      },
      env,
      defs
    )
  }

  fun compileFuns(env) {
    fun compileFunsStep(env, funs) {
      foldl(
        fun ([code, env], Fun(fLabel, args, body, state)) {
          case genLabel(addArgs(beginFun(env, state), args)) of
            [fEndLabel, env] ->
              case compile(fEndLabel, env, body) of
                [fEndLabelUsed, newEnv, fCode] ->
                  var newCode = code
                    <+ LABEL (fLabel)
                    <+ BEGIN (fLabel, size(args), getLocals(newEnv))
                    <+> fCode
                    <+> label(fEndLabel, fEndLabelUsed)
                    <+ END;
                  [newCode, leaveScope(newEnv)]
              esac
            esac
        },
        [emptyBuffer(), env],
        funs
      )
    }
    case getFuns(env) of
      [{}, env] -> [emptyBuffer(), env]
    | [funs, env] ->
      case compileFunsStep(env, funs) of
        [funcsCode, env] ->
          case compileFuns(env) of
            [newFuncsCode, env] -> [funcsCode <+> newFuncsCode, env]
          esac
      esac
    esac
  }

  fun compileList(lab, env, argsEpxrs) {
    compile(
      lab,
      env,
      foldr(fun (acc, arg) { Seq(arg, acc) }, Skip, argsEpxrs)
    )
  }

  ------------------------------------------------------------------------------
  -- <\From A06>                                                              --
  ------------------------------------------------------------------------------ 

  fun compile (lab, env, stmt) {
    ----------------------------------------------------------------------------
    -- <From A06>                                                             --
    ----------------------------------------------------------------------------

    fun compileIgnore(expr, labelsGenerated @ [lab, env]) {
      case compile(lab, env, expr) of
        [labIsUsed, env, exprCompiled] ->
          var compiled = exprCompiled
            <+> label(lab, labIsUsed)
            <+ DROP;
          [labIsUsed, env, compiled]
      esac
    }

    fun compileBinOp(op, expr1, expr2) {
      case env.genLabel of
        [lab, env] ->
          case compile(lab, env, Seq (expr1, expr2)) of
            [labIsUsed, env, seqCompiled] ->
              var compiled = seqCompiled <+> label(lab, labIsUsed) <+ BINOP(op);
              [labIsUsed, env, compiled]
          esac
      esac
    }

    fun compileRead(x) {
      var compiled = singletonBuffer(READ) <+ ST (lookupVar(env, x)) <+ DROP;
      [false, env, compiled]
    }

    fun compileWrite(expr) {
      case compile(lab, env, expr) of
        [labIsUsed, env, exprCompiled] ->
          var compiled = exprCompiled <+> label(lab, labIsUsed) <+ WRITE;
          [labIsUsed, env, compiled]
      esac
    }

    fun compileAssn(x, e, labelGenerated @ [eLabel, env]) {
      case compile(lab, env, x) of
        [labIsUsed, envX, xCompiled] ->
          case compile(eLabel, envX, e) of
            [eLabelUsed, envAll, eCompiled] ->
              var code = xCompiled
                <+> label(lab, labIsUsed)
                <+> eCompiled
                <+> label(eLabel, eLabelUsed)
                <+
                case x of
                  ElemRef (_, _) -> STA
                | _              -> STI
                esac;
              [labIsUsed, envAll, code]
          esac
      esac
    }

    fun compileSeq(expr1, expr2, labelsGenerated @ [expr2Lab, env]) {
      case compile (expr2Lab, env, expr1) of
        [expr2LabIsUsed, env, expr1Compiled] ->
          case compile (lab, env, expr2) of
            [labIsUsed, env, expr2Compiled] ->
              var compiled = expr1Compiled
                <+> label (expr2Lab, expr2LabIsUsed)
                <+> expr2Compiled;
              [labIsUsed, env, compiled]
          esac
      esac
    }

    fun compileIf(conditionExpr, thenExpr, elseExpr,
                  labelsGenerated @ [falseLab, condLab, env]) {
      case compile (lab, env, thenExpr) of
        [_, env, thenExprCompiled] ->
          case compile (falseLab, env, elseExpr) of
            [_, env, elseExprCompiled] ->
              case compile(condLab, env, conditionExpr) of
                [condLabUsed, env, condCode] ->
                  var compiled = condCode
                    <+> label(condLab, condLabUsed)
                    <+ CJMP ("z", falseLab)
                    <+> thenExprCompiled
                    <+ JMP (lab)
                    <+ LABEL (falseLab)
                    <+> elseExprCompiled;
                  [true, env, compiled]
              esac
          esac
      esac
    }

    fun compileWhile(conditionExpr, loopExpr,
                     labelsGenerated @ [cycleLab, condLab, env]) {
      case compile (cycleLab, env, loopExpr) of
        [_, env, loopExprCompiled] ->
          case compile(condLab, env, conditionExpr) of
            [condLabUsed, env, conditionExprCompiled] ->
              var compiled = singletonBuffer(LABEL (cycleLab))
                <+> conditionExprCompiled
                <+> label(condLab, condLabUsed)
                <+ CJMP("z", lab)
                <+> loopExprCompiled
                <+ JMP(cycleLab);
              [true, env, compiled]
          esac
      esac
    }

    fun compileDoWhile(loopExpr,
                       conditionExpr,
                       labelsGenerated @ [cycleLab, condLab, env]) {
      case compile (cycleLab, env, loopExpr) of
        [_, env, loopExprCompiled] ->
          case compile(condLab, env, conditionExpr) of
            [condLabUsed, env, conditionExprCompiled] ->
              var compiled = singletonBuffer(LABEL (cycleLab))
                <+> loopExprCompiled
                <+> conditionExprCompiled
                <+> label(condLab, condLabUsed)
                <+ CJMP ("nz", cycleLab);
              [false, env, compiled]
          esac
      esac
    }

    fun compileScope(defs, expr, labelGenerated @ [scopeEndLabel, env]) {
      case addDefinitions(beginScope(env), defs) of
        [code, envAddDefs] ->
          case genLabel(rememberDefinitions(envAddDefs, defs)) of
            [scopeEndLabel, envGenLabel] ->
              case compile(scopeEndLabel, envGenLabel, expr) of
                [scopeEndLabelUsed, envCompile, codeEndLabel] ->
                  var newCode = code
                    <+> codeEndLabel
                    <+> label(scopeEndLabel, scopeEndLabelUsed);
                  [false, leaveScope(envCompile), newCode]
              esac
          esac
      esac
    }

    fun compileCall(f, args_epxr, labelGenerated @ [fCallLabel, env]) {
      case lookupFun(env, f) of 
        Fun (funcLabel, numArgs) -> case compileList(fCallLabel, env, args_epxr) of
          [fCallLabelUsed, env, code] ->
            [
              false,
              env,
              code
                <+> label(fCallLabel, fCallLabelUsed)
                <+
                case funcLabel[0] of
                  '$' -> BUILTIN (f, numArgs)
                | _ -> CALL(funcLabel, numArgs)
                esac
            ]
        esac 
      esac
    }

    fun compileArray(valsList, generatedLabel @ [genLabel, env]) {
      case compileList(genLabel, env, valsList) of 
        [labelIsUsed, env, code] ->
          var compiled = code
            <+> label(genLabel, labelIsUsed)
            <+ ARRAY(valsList.size);
          [false, env, compiled]
      esac 
    }

    fun compileSet(x, e, generatedLabel @ [genLabel, env]) {
      case compile(genLabel, env, e) of 
        [labelIsUsed, env, code] ->
          case lookupVal(env, x) of 
            x ->
              var compiled = code
                <+> label(genLabel, labelIsUsed)
                <+ ST (x);
              [false, env, compiled]
          esac
      esac
    }

    fun compileSexp(name, valsList, generatedLabel @ [genLabel, env]) {
      case compileList(genLabel, env, valsList) of
        [labelIsUsed, env, code] ->
          var compiled = code
            <+> label(genLabel, labelIsUsed)
            <+ SEXP (name, valsList.size);
          [false, env, compiled]
      esac
    }

    fun compileElem(arrExpr,
                    idxExpr,
                    labelsGenerated @ [genArrLab, genIdxLab, env]) {
      case compile(genArrLab, env, arrExpr) of
        [arrLabIsUsed, compileArrEnv, arrCode] ->
          case compile(genIdxLab, compileArrEnv, idxExpr) of
            [idxLabIsUsed, compileIdxEnv, idxCode] ->
              var compiled = arrCode
                <+> label(genArrLab, arrLabIsUsed)
                <+> idxCode
                <+> label(genIdxLab, idxLabIsUsed)
                <+ ELEM;
              [false, env, compiled]
          esac
      esac
    }

    fun compileElemRef(arrExpr,
                       idxExpr,
                       labelsGenerated @ [genArrLab, genIdxLab, env]) {
      case compile(genArrLab, env, arrExpr) of
        [arrLabIsUsed, compileArrEnv, arrCode] ->
          case compile(genIdxLab, compileArrEnv, idxExpr) of
            [idxLabIsUsed, compileIdxEnv, idxCode] ->
              var compiled = arrCode
                <+> label(genArrLab, arrLabIsUsed)
                <+> idxCode
                <+> label(genIdxLab, idxLabIsUsed);
              [false, env, compiled]
          esac
      esac
    }

    ----------------------------------------------------------------------------
    -- <\From A06>                                                            --
    ----------------------------------------------------------------------------

    case stmt of
      Skip -> [false, env, emptyBuffer ()]                                  |
      Var (x) -> [false, env, singletonBuffer (LD (lookupVal(env, x)))]     |
      Ref (x) -> [false, env, singletonBuffer (LDA (lookupVal(env, x)))]    |
      Const (n) -> [false, env, singletonBuffer (CONST (n))]                |
      Ignore (e) -> compileIgnore(e, [lab, env])                            |
      Binop (op, e1, e2) -> compileBinOp(op, e1, e2)                        |
      Assn (refE, e) -> compileAssn(refE, e, env.genLabel)                  |
      Seq (e1, e2) -> compileSeq(e1, e2, env.genLabel)                      |
      If (cond, thenExpr, elseExpr) ->
        compileIf(cond, thenExpr, elseExpr, env.genLabels(2))               |
      While (cond, e) -> compileWhile(cond, e, env.genLabels(2))            |
      DoWhile (e, cond) -> compileDoWhile(e, cond, env.genLabels(2))        |
      Scope (defs, expr) -> compileScope(defs, expr, env.genLabel)          |
      Call (name, exprs) -> compileCall(name, exprs, env.genLabel)          |
      String (x) -> [false, env, singletonBuffer(STRING(x))]                |
      Array (valsList) -> compileArray(valsList, env.genLabel)              |
      Set(x, e) -> compileSet(x, e, env.genLabel)                           |
      Sexp(name, valsList) -> compileSexp(name, valsList, env.genLabel)     |
      Elem (arrExpr, indExpr) ->
        compileElem(arrExpr, indExpr, env.genLabels(2))                     |
      ElemRef (arr_expr, ind_expr) ->
        compileElemRef(arr_expr, ind_expr, env.genLabels(2))
    esac
  }

  fun addGlobalScope(expr) {
    case expr of 
      Scope(_, _) -> expr 
      | _ -> Scope({}, expr)
    esac 
  }

  fun compileWithMain (endLab, env, expr) {
    case compile(endLab, env, addGlobalScope(expr)) of 
      [_, env, code] -> case compileFuns(env) of 
        [funs_code, env] -> [false, env, singletonBuffer(BEGIN("main", 0, getLocals(env))) <+> code <+ END <+> funs_code]
      esac 
    esac 
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compileWithMain (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}