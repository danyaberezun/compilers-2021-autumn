-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun eval1 (c, x) {
  case x of
    READ      ->
      var rv_nw = readWorld(c[2]);
      [{rv_nw[0]} +++ c[0], c[1], rv_nw[1]]
  | WRITE     -> [tl (c[0]), c[1], writeWorld(hd (c[0]), c[2])]
  | BINOP (s) -> case c[0] of
        (r:l:z) -> [{evalBop(s, l, r)} +++ z, c[1], c[2]]
      | _ -> failure("empty stack on bop")
    esac
  | LD    (x) -> [{c[1](x)} +++ c[0], c[1], c[2]]
  | ST    (x) -> [tl (c[0]), updState(x, hd(c[0]), c[1]), c[2]]
  | CONST (n) -> [{n} +++ c[0], c[1], c[2]]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | x:xs  -> eval(eval1(c, x), xs)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (s) -> {LD (s)}
  | Const (i) -> {CONST (i)}
  | Binop (s, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP (s)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (s, e) ->
      compileExpr(e) +++ {ST (s)}
  | Seq (s1, s2) -> compileSM(s1) +++ compileSM(s2)
  | Skip -> {}
  | Read (s) -> {READ} +++ {ST (s)}
  | Write (e) ->
      compileExpr (e) +++ {WRITE}
  esac
}
