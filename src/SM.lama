-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun evalInsnRead ([stack, st, w]) {
  var readResult = readWorld (w);
  [readResult[0]:stack, st, readResult[1]]
}

fun evalInsnWrite ([value:stack, st, w]) {
  [stack, st, writeWorld (value, w)]
}

fun evalInsnBinop ([b:a:stack, st, w], op) {
  var result = case op of
    "+"  -> a +  b |
    "-"  -> a -  b |
    "*"  -> a *  b |
    "/"  -> a /  b |
    "%"  -> a %  b |
    "==" -> a == b |
    "!=" -> a != b |
    "<"  -> a <  b |
    "<=" -> a <= b |
    ">"  -> a >  b |
    ">=" -> a >= b |
    "&&" -> a && b |
    "!!" -> a !! b |
    _    -> failure ("eval BINOP insn is not supported\n")
  esac;
  [result:stack, st, w]
}

fun evalInsnLd ([stack, st, w], varName) {
  [st(varName):stack, st, w]
}

fun evalInsnSt ([value:stack, st, w], varName) {
  [stack, st <- [varName, value], w]
}

fun evalInsnLda ([stack, st, w], varName) {
  [Ref (varName):stack, st, w]
}

fun evalInsnSti ([value:Ref (varName):stack, st, w]) {
  [value:stack, st <- [varName, value], w]
}

fun evalInsnConst ([stack, st, w], value) {
  [value:stack, st, w]
}

fun evalInsnDrop ([value:stack, st, w]) {
  [stack, st, w]
}

fun evalInsnDup ([value:stack, st, w]) {
  [value:value:stack, st, w]
}

fun evalCJmp([stack, st, w], cond, label, env, suffix) {
  case case stack of
    0:stack -> case cond of
                 "nz" -> [stack, suffix] |
                 "z" -> [stack, fromLabel (env, label)]
                esac |
    _:stack -> case cond of
                 "nz" -> [stack, fromLabel (env, label)] |
                 "z" -> [stack, suffix]
               esac
  esac of
    [stack, insns] -> [[stack, st, w], insns]
  esac
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      READ : insns               -> eval (env, evalInsnRead (c), insns) |
      WRITE : insns              -> eval (env, evalInsnWrite (c), insns) |
      BINOP (op) : insns         -> eval (env, evalInsnBinop (c, op), insns) |
      LD (name) : insns          -> eval (env, evalInsnLd (c, name), insns) |
      ST (name) : insns          -> eval (env, evalInsnSt (c, name), insns) |
      LDA (name) : insns         -> eval (env, evalInsnLda (c, name), insns) |
      STI : insns                -> eval (env, evalInsnSti (c), insns) |
      CONST (value) : insns      -> eval (env, evalInsnConst (c, value), insns) |
      JMP (label) : insns        -> eval (env, c, fromLabel (env, label)) |
      CJMP (cond, label) : insns -> case evalCJmp (c, cond, label, env, insns) of
                                      [c, insns] -> eval (env, c, insns)
                                  esac |
      LABEL (label) : insns      -> eval (env, c, insns) |
      DROP : insns               -> eval (env, evalInsnDrop (c), insns) |
      DUP : insns                -> eval (env, evalInsnDup (c), insns)  |
      unknown : insns            -> failure (sprintf("SM eval not implemented for %s", string(unknown))) |
      {}                         -> c
    esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

fun compileExprVar (Var (varName), env) {
  [singletonBuffer (LD (varName)), env]
}

fun compileExprConst (Const (value), env) {
  [singletonBuffer (CONST (value)), env]
}

fun compileExprRef (Ref (varName), env) {
  [singletonBuffer (LDA (varName)), env]
}

fun compileExprBinop (Binop (op, expr0, expr1), env) {
  case compileExpr (expr0, env) of
    [leftInsns, env] ->
    case compileExpr (expr1, env) of
      [rightInsns, env] -> [leftInsns <+> rightInsns <+ BINOP (op), env]
    esac
  esac
}

-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr, env) {
  case expr of
    Var   (_)          -> compileExprVar     (expr, env) |
    Const (_)          -> compileExprConst   (expr, env) |
    Ref (_)            -> compileExprRef     (expr, env) |
    Binop (_, _, _)    -> compileExprBinop   (expr, env) |
    Assn  (Ref (_), _) -> compileExprAssnRef (expr, env) |
    Assn (_, _)        -> compileExprAssn    (expr, env) |
    Seq   (_, _)       -> compileExprSeq     (expr, env) |
    Skip               -> [{}, env]                      |
    Read  (Ref (_))    -> compileExprRead    (expr, env) |
    Write (_)          -> compileExprWrite   (expr, env) |
    While (_, _)       -> compileExprWhile   (expr, env) |
    DoWhile (_, _)     -> compileExprDoWhile (expr, env) |
    If (_, _, _)       -> compileExprIf      (expr, env) |
    Ignore (_)         -> compileExprIgnore  (expr, env) |
    Scope (_, exp)     -> compileExpr        (exp, env)  |
    _                  -> failure (sprintf("compileExpr for %s not implemented\n", string(expr)))
  esac
}

fun compileExprAssnRef (Assn (Ref (varName), expr), env) {
  case compileExpr (expr, env) of
    [insns, env] -> [insns <+ DUP <+ ST (varName), env]
  esac
}

fun compileExprAssn (Assn (refExpr, expr), env) {
  case compileExpr (refExpr, env) of
    [refInsns, env] ->
    case compileExpr (expr, env) of
      [insns, env] -> [refInsns <+> insns <+ STI, env]
    esac
  esac
}

fun compileExprSeq (Seq (stmt0, stmt1), env) {
  case compileExpr (stmt0, env) of
    [insns0, env] -> case compileExpr (stmt1, env) of
                      [insns1, env] -> [insns0 <+> insns1, env]
                    esac
  esac
}

fun compileExprRead (Read ( Ref(varName)), env) {
  [listBuffer ({READ, ST (varName)}), env]
}

fun compileExprWrite (Write (expr), env) {
  case compileExpr (expr, env) of
    [insns, env] -> [insns <+ WRITE, env]
  esac
}

fun compileExprWhile (While (expr, stmt), env) {
  case genLabels (env, 2) of
    [start, cond, env] ->
      case compileExpr(stmt, env) of
        [stmtInsns, env] ->
        case compileExpr (expr, env) of
          [exprInsns, env] -> [singletonBuffer (JMP (cond)) <+ LABEL (start) <+> stmtInsns <+ LABEL (cond) <+>
                               exprInsns <+ CJMP ("nz", start),  env]
        esac
      esac
  esac
}

fun compileExprDoWhile (DoWhile (stmt, expr), env) {
  case genLabel (env) of
    [start, env] ->
      case compileExpr(stmt, env) of
        [stmtInsns, env] ->
        case compileExpr (expr, env) of
          [exprInsns, env] -> [singletonBuffer (LABEL (start)) <+> stmtInsns <+>
                               exprInsns <+ CJMP ("nz", start),  env]
        esac
      esac
  esac
}

fun compileExprIfExit (If (expr, stmtThen, stmtElse), exitLabel, env) {
  case genLabel (env) of
    [thenStart, env] ->
      case compileExpr (stmtThen, env) of
        [instThen, env] ->
          case case stmtElse of
                 If (_, _, _) -> compileExprIfExit (stmtElse, exitLabel, env) |
                 _ -> compileExpr (stmtElse, env)
               esac of
            [instElse, env] ->
            case compileExpr(expr, env) of
              [exprInsns, env] -> [exprInsns <+ CJMP ("nz", thenStart) <+> instElse <+ JMP (exitLabel) <+
                                  LABEL (thenStart) <+> instThen, env]
            esac
          esac
      esac
  esac
}

fun compileExprIf (ifStmt, env) {
  case genLabel (env) of
    [thenEnd, env] ->
      case compileExprIfExit (ifStmt, thenEnd, env) of
        [insns, env] -> [insns <+ LABEL (thenEnd), env]
      esac
  esac
}

fun compileExprIgnore (Ignore (expr), env) {
  case compileExpr (expr, env) of
    [exprInsns, env] -> [exprInsns <+ DROP, env]
  esac
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (expr) {
  case compileExpr (expr, initCompEnv()) of
    [insns, _] -> getBuffer (insns)
  esac

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

}
(* End *)
