-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun eval_one(env, c@[stack, st, w], i, is) {
  case i of 
    WRITE -> case stack of v:vs -> [env, [vs, st, writeWorld(v, w)], is] esac
  | READ -> case readWorld(w) of [v, w_prime] -> [env, [v:stack, st, w_prime], is] esac
  | BINOP (s) -> case stack of b:a:vs -> [env, [evalOp(s, a, b):vs, st, w], is] esac
  | LD (x) -> [env, [st(x):stack, st, w], is]
  | JMP (l) -> [env, c, env.fromLabel(l)]
  | ST (x) -> case stack of v:vs -> [env, [v:vs, st <- [x, v], w], is] esac
  | CJMP (c, l) -> case stack of
      0:vs -> 
        case c of "z"  -> [env, [vs, st, w], env.fromLabel(l)] | "nz" -> [env, [vs, st, w], is] esac
    | v:vs -> 
        case c of "nz" -> [env, [vs, st, w], env.fromLabel(l)] | "z"  -> [env, [vs, st, w], is] esac esac
  | LDA (x) -> [env, [Ref(x):stack, st, w], is]
  | STI -> case stack of v:Ref(x):vs -> [env, [v:vs, st <- [x, v], w], is] esac
  | CONST (v) -> [env, [v:stack, st, w], is]
  | LABEL (_) -> [env, c, is]
  | DROP -> case stack of v:vs -> [env, [vs, st, w], is] esac
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, st, w], insns) {
  case insns of 
    {} -> c | 
    i : is -> 
      case eval_one(env, c, i, is) of 
        [envv, cc, iss] -> eval(envv, cc, iss)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Var   (x)      -> [false, env, singletonBuffer (LD (x))]
    | Ref   (x)      -> [false, env, singletonBuffer (LDA (x))]
    | Const (n)      -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)     -> 
        case env.genLabel of 
          [lab, env] ->
            case compile(lab, env, e) of 
              [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ DROP]
            esac
        esac
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e)      -> 
        case compile(lab, env, e) of
          [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ WRITE]
        esac
    | Binop (op, s1, s2) -> 
        case env.genLabel of 
          [lab, env] ->
            case compile(lab, env, Seq (s1, s2)) of 
              [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ BINOP(op)]
            esac
        esac
    | Assn  (x, e)   -> 
        case env.genLabel of 
          [eLab, env] ->
            case compile(eLab, env, Seq (x, e)) of 
              [labUsed, env, code] -> [false, env, code <+> label(eLab, labUsed) <+ STI]
            esac
        esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, e1, e2) ->
        case env.genLabel of 
          [fLab, env] ->
            case compile (lab, env, e1) of 
              [_, env, e1code] ->
                case compile (lab, env, e2) of
                  [_, env, e2code] ->
                    case env.genLabel of
                      [condLab, env] -> 
                        case compile(condLab, env, cond) of 
                          [condLabUsed, env, condCode] -> [true, env, condCode <+> label(condLab, condLabUsed) <+ CJMP ("z", fLab) <+> e1code <+ JMP (lab) <+ LABEL (fLab) <+> e2code]
                        esac
                    esac
                esac
            esac
        esac
    | DoWhile (e, cond) ->
        case env.genLabel of 
          [cLab, env] ->
            case compile (cLab, env, e) of 
              [_, env, scode] -> 
                case env.genLabel of 
                  [condLab, env] -> 
                    case compile(condLab, env, cond) of 
                      [condLabUsed, env, condCode] -> [false, env, singletonBuffer(LABEL (cLab)) <+> scode <+> condCode <+> label(condLab, condLabUsed) <+ CJMP ("nz", cLab)]
                    esac
                esac
            esac
        esac
    | While (cond, e) ->
        case env.genLabel of 
          [cLab, env] ->
            case compile (cLab, env, e) of 
              [_, env, scode] -> 
                case env.genLabel of 
                  [condLab, env] -> 
                    case compile(condLab, env, cond) of 
                      [condLabUsed, env, condCode] -> [true, env,  singletonBuffer(LABEL (cLab)) <+> condCode <+> label(condLab, condLabUsed) <+ CJMP ("z", lab) <+> scode <+ JMP (cLab)]
                    esac
                esac
            esac
        esac
    | _ -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
