-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %d, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of insn:other_insns ->
    case insn of 
      READ -> case readWorld(world) of [value, updatedWorld] -> eval(env, [value:stack, state, updatedWorld], other_insns) esac
    | WRITE -> case stack of value:updatedStack -> eval(env, [updatedStack, state, writeWorld(value, world)], other_insns) esac 
    | LD (x) -> eval(env, [state(x):stack, state, world], other_insns)
    | ST (x) -> case stack of value:updatedStack -> eval(env, [updatedStack, state <- [x, value], world], other_insns) esac
    | CONST (n) -> eval(env, [n:stack, state, world], other_insns)
    | BINOP (operation) -> case stack of right:left:updatedStack -> eval(env, [evalExpr(emptyState, Binop(operation, Const (left), Const (right))):updatedStack, state, world], other_insns) esac
    | CJMP (cond, l) -> case stack of value:updatedStack -> if cond == value then eval(env, [updatedStack, state, world], fromLabel(env, l)) else eval(env, [updatedStack, state, world], other_insns) fi esac
    | JMP (l) -> eval(env, c, fromLabel(env, l))
    | LABEL (s) -> eval(env, c, other_insns)
    esac
  | {} -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Const (n) -> singletonBuffer(CONST (n))
  | Var (x) -> singletonBuffer(LD (x))
  | Binop (operation, left, right) -> compileExpr(left) <+> compileExpr(right) <+ BINOP(operation)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (expr, stmt1, stmt2) -> 
      case env.genLabel of [stmt2Label, env] ->
        case compile(lab, env, stmt1) of [stmt1LabUsed, env, stmt1Code] ->
          case compile(lab, env, stmt2) of [stmt2LabUsed, env, stmt2Code] ->
            [true, env, compileExpr(expr) <+ CJMP(0, stmt2Label) <+> stmt1Code <+ JMP(lab) <+ LABEL(stmt2Label) <+> stmt2Code]
          esac
        esac
      esac
    | While (expr, stmt) ->
      case env.genLabel of [whileLabel, env] ->
        case compile(whileLabel, env, stmt) of [stmtLabUsed, env, stmtCode] ->
          [true, env, singletonBuffer(LABEL(whileLabel)) <+> compileExpr(expr) <+ CJMP(0, lab) <+> stmtCode <+ JMP(whileLabel)]
        esac
      esac
    | DoWhile (expr, stmt) ->
      case env.genLabels(2) of [doWhileLabel, endLabel, env] ->
        case compile(endLabel, env, stmt) of [stmtLabUsed, env, stmtCode] ->
          [true, env, singletonBuffer(LABEL(doWhileLabel)) <+> stmtCode <+ LABEL(endLabel) <+> compileExpr(expr)  <+ CJMP(1, doWhileLabel)]
        esac
      esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
