-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
  case i of
      READ         -> sprintf("READ")
    | WRITE        -> sprintf("WRITE")
    | BINOP (s)    -> sprintf("BINOP %s", s)
    | LD    (x)    -> sprintf("LD %s", x)
    | ST    (x)    -> sprintf("ST %s", x)
    | CONST (n)    -> sprintf("CONST %d", n)
    | LABEL (s)    -> sprintf("LABEL %s", s)
    | JMP   (l)    -> sprintf("JMP %s", l)
    | CJMP  (c, l) -> sprintf("CJMP %s, %s", c, l)
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
            { }              -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c@[stack, state, world@[input, output]], insns) {
  case insns of
      { }         -> c
    | inst : tail ->
    --       printf("%s\n\n", showSMInsn(inst).string);
      case inst of
          READ        -> eval(env, [(hd(input)):stack, state, [tl(input), output]], tail)
        | WRITE       -> eval(env, [tl(stack), state, [input, hd(stack):output]], tail)
        | LD(v)       -> eval(env, [state(v):stack, state, world], tail)
        | ST(v)       -> eval(env, [tl(stack), state <- [v, hd(stack)], world], tail)
        | CONST(n)    -> eval(env, [n:stack, state, world], tail)
        | BINOP(x)    -> case stack of
          a : b : tstack -> eval(env, [binop(x)(b, a):tstack, state, world], tail)
        esac
        | JMP(l)      -> eval(env, c, fromLabel(env, l))
        | CJMP(NZ, l) -> case stack of
          hd : stack -> eval(env, [stack, state, world], if hd == 0
            then tail
            else fromLabel(env, l)
          fi)
        esac

        | CJMP(Z, l)  -> case stack of
          hd : stack -> eval(env, [stack, state, world], if hd != 0
            then tail
            else fromLabel(env, l)
          fi)
        esac
        | LABEL(l)    -> eval(env, c, tail)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), [{ }, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv(n) {
  [fun () {
    [sprintf("L%d", n), makeCompEnv(n + 1)]
  }]
}

fun initCompEnv() {
  makeCompEnv(0)
}

-- Accessor function: generates one label
fun genLabel(env) {
  env [0]()
}

-- Utility function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case env.genLabel of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expr) {
  case expr of
      Var (variable)   -> singletonBuffer(LD(variable))
    | Const (const)    -> singletonBuffer(CONST(const))
    | Binop (op, l, r) -> compileExpr(l) <+> compileExpr(r) <+ BINOP(op)
    | x                -> failure("unknown element of %s", x.string)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
-- Generates a buffer with an optional label
--    lab     --- the name of the label
--    labUsed --- a flag if the lebel is needed
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile(lab, env, stmt) {
    case stmt of
        Skip                -> [false, env, emptyBuffer()]
      | Read  (x)           -> [false, env, singletonBuffer(READ) <+ ST(x)]
      | Write (e)           -> [false, env, compileExpr(e) <+ WRITE]
      | Assn  (x, e)        -> [false, env, compileExpr(e) <+ ST(x)]
      | Seq   (s1, s2)      ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | If(cond, tb, fb)    ->
        case env.genLabel of
          [falseLabel, env] ->
            case compile(lab, env, tb) of
              [_, env, trueCode] ->
                case compile(lab, env, fb) of
                  [_, env, falseCode] ->
                    [true, env, compileExpr(cond) <+ CJMP(Z, falseLabel)
                      <+> trueCode <+ JMP(lab)
                      <+> label(falseLabel, true) <+> falseCode
                    ]
                esac
            esac
        esac
      | DoWhile(body, expr) ->
        case env.genLabels(2) of
          [bodyStart, afterBody, env] -> case compile(afterBody, env, body) of
            [bodyLabelUsed, env, code] -> [
              false, env,
              label(bodyStart, true) <+> code <+> label(afterBody, bodyLabelUsed) <+>
                compileExpr(expr) <+ CJMP(NZ, bodyStart)]
          esac
        esac
      | While(expr, body)   ->
        case env.genLabels(2) of
          [bodyStart, afterBody, env] -> case compile(afterBody, env, body) of
            [_, env, code] -> [
              false, env,
              singletonBuffer(JMP(afterBody)) <+>
                label(bodyStart, true) <+>
                code <+>
                label(afterBody, true) <+>
                compileExpr(expr) <+
                CJMP(NZ, bodyStart)
            ]
          esac
        esac
      | _                   -> failure("compileSM not implemented\n")
    esac
  }

  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label(endLab, endLabUsed)
      esac
  esac
}
