-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  | _         -> "??undefined??"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluator of single SM instruction
-- returns a configuration after execution
fun evalSingleInst (config@[stack, state, world], ins) {
  case ins of
    READ            -> case readWorld (world) of [value, world] -> [value : stack, state, world] esac
  | WRITE           -> case stack of value:restStack -> [restStack, state, writeWorld (value, world)] esac
  | BINOP (s)       -> case stack of r:l:restStack -> [parseBinop (s) (l, r) : restStack, state, world] esac
  | LD    (varName) -> [state (varName) : stack, state, world]
  | ST    (varName) -> case stack of value:restStack -> [restStack, state <- [varName, value], world] esac
  | CONST (n)       -> [n : stack, state, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (config, insns) {
  case insns of
    {}               -> config
  | ins : otherInsns -> eval (evalSingleInst (config, ins), otherInsns)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (value)        -> {LD (value)}
  |	Const (x)          -> {CONST (x)}
  |	Binop (fStr, l, r) -> compileExpr (l) +++ compileExpr (r) +++ {BINOP (fStr)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (varName, expr) -> compileExpr (expr) +++ {ST (varName)}
  | Seq  (first, second) -> compileSM (first) +++ compileSM (second)
  | Skip                 -> {}
  | Read (varName)       -> {READ, ST (varName)}
  | Write (expr)         -> compileExpr (expr) +++ {WRITE}
  esac
}
