import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
  case i of
      READ         -> sprintf("READ")
    | WRITE        -> sprintf("WRITE")
    | BINOP (s)    -> sprintf("BINOP %s", s)
    | LD    (x)    -> sprintf("LD %s", x)
    | ST    (x)    -> sprintf("ST %s", x)
    | CONST (n)    -> sprintf("CONST %d", n)
    | LABEL (s)    -> sprintf("LABEL %s", s)
    | JMP   (l)    -> sprintf("JMP %s", l)
    | CJMP  (c, l) -> sprintf("CJMP %s, %s", c, l)
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
            { }              -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

var memed = false;
var progr = 1;
var log = "";
var pot = 12;
var isIf = false;

fun oneStepSM(env, c@[stack, state, w], i, rest) {
  fun pop(st@(x : xs)) {
    [x, xs]
  }

  fun expected(jtype) {
    case jtype of
        "nz" -> 1
      | "z"  -> 0
    esac
  }

  case i of
      READ       -> (
        var rw = readWorld(w);
        [[rw.fst:stack, state, rw.snd], rest]
      )
    | WRITE      -> (
      var ps = pop(stack);
      [[ps.snd, state, writeWorld(ps.fst, w)], rest]
    )
    | BINOP (s)  -> (
      var ps = pop(stack);
      var pps = pop(ps.snd);
      [[evalOp(pps.fst, ps.fst, s):pps.snd, state, w], rest]
    )
    | LD (x)     -> (
      [[state(x):stack, state, w], rest]
    )
    | ST (x)     -> (
      var ps = pop(stack);
      [[ps.snd, state <- [x, ps.fst], w], rest]
    )
    | CONST (n)  -> (
      [[n:stack, state, w], rest]
    )
    | JMP (l)    -> (
      [c, env.fromLabel(l)]
    )
    | CJMP(v, l) -> (
      case pop(stack) of
        [head, tail] -> (
          -- TODO: add guard here
          if head == expected(v)
            then
              [[tail, state, w], env.fromLabel(l)]
            else
              [[tail, state, w], rest]
          fi
        )
      esac
    )
    | LABEL(l)   -> (
      [c, rest]
    )
    | _          -> failure("oneStepSM not implemented\n")
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c, insns) {
--   if isIf
--     then failure(sprintf("%s", showSMInsn(insns)))
--   fi;

  case insns of
      { }         -> c
    | (i0 : rest) ->
      case oneStepSM(env, c, i0, rest) of
        [c, insns] -> eval(env, c, insns)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), [{ }, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv(n) {
  [fun () {
    [sprintf("L%d", n), makeCompEnv(n + 1)]
  }]
}

fun initCompEnv() {
  makeCompEnv(0)
}

-- Accessor function: generates one label
fun genLabel(env) {
  env [0]()
}

-- Utility function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case env.genLabel of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expr) {
  case expr of
      Const (value)        -> singletonBuffer(CONST(value))
    | Var   (name)         -> singletonBuffer(LD(name))
    | Binop (type, e1, e2) -> compileExpr(e1) <+> compileExpr(e2) <+> singletonBuffer(BINOP(type))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
-- Generates a buffer with an optional label
--    lab     --- the name of the label
--    labUsed --- a flag if the lebel is needed
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  fun lJmp(lab, jmpUsed) {
    if jmpUsed
      then singletonBuffer(JMP(lab))
      else emptyBuffer()
    fi
  }
  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer
  fun compile(lab, env, stmt) {
    case stmt of
        Skip           -> [false, env, emptyBuffer()]
      | Read  (x)      -> [false, env, singletonBuffer(READ) <+ ST(x)]
      | Write (e)      -> [false, env, compileExpr(e) <+ WRITE]
      | Assn  (x, e)   -> [false, env, compileExpr(e) <+ ST(x)]
      | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | While(e, s)    -> (
        case env.genLabel of
          [l1, env] ->
            case env.genLabel of
              [l2, env] ->
                case compile(l2, env, s) of
                  [_, env, sCode] ->
                    case compileExpr(e) of
                      eCode -> [false, env,
                        singletonBuffer(JMP(l2)) <+>
                          singletonBuffer(LABEL(l1)) <+>
                          sCode <+>
                          singletonBuffer(LABEL(l2)) <+>
                          eCode <+>
                          singletonBuffer(CJMP("nz", l1))
                      ]
                    esac
                esac
            esac
        esac
      )
      | DoWhile(e, s) -> (
        case env.genLabel of
          [l1, env] ->
            case env.genLabel of
              [l2, env] ->
                case compile(l2, env, s) of
                  [l2Used, env, sCode] ->
                    case compileExpr(e) of
                      eCode -> [false, env,
                        singletonBuffer(LABEL(l1)) <+>
                          sCode <+>
                          label(l2, l2Used) <+>
                          eCode <+>
                          singletonBuffer(CJMP("nz", l1))
                      ]
                    esac
                esac
            esac
        esac
      )
      | If(e, s1, s2) -> (
        isIf := true;
        case env.genLabel of
          [l1, env] ->
            case compile(lab, env, s2) of
              [flag2, env, s2Code] ->
                case compile(lab, env, s1) of
                  [flag1, env, s1Code] ->
                    case compileExpr(e) of
                      eCode -> [true, env,
                        eCode <+>
                          singletonBuffer(CJMP("nz", l1)) <+>
                          s2Code <+>
                          singletonBuffer(JMP(lab)) <+>  -- fix it, conditional instruction
                          singletonBuffer(LABEL(l1)) <+>
                          s1Code
                      ]
                    esac
                esac
            esac
        esac
      )
      | _              -> failure("compileSM not implemented\n")
    esac
  }

  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label(endLab, endLabUsed)
      esac
  esac
}