-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }

    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }

  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s, f)    -> sprintf ("LABEL %s, %d", s, f)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  | META (m)         -> sprintf ("META %s", m.string)
  | PATT (p)         -> sprintf ("PATT %s", p.string)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}                  -> m
            | LABEL (lab, _) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl              -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, cstack, state, world], insns) {
      case insns of
        i:rest -> case i of
      READ -> case readWorld(world) of [value, world] -> eval ([value:stack, cstack, state, world], rest) esac
      | WRITE -> case stack of
              st:stackR -> eval ([stackR, cstack, state, writeWorld(st, world)], rest)
              esac
      | BINOP(s) -> case stack of
              fst:snd:stackR -> eval([binop(s) (snd, fst) : stackR, cstack, state, world], rest)
              esac
      | LD(x) -> eval([state.lookup(x):stack, cstack, state, world], rest)
      | LDA(x) -> eval([Ref(x):stack, cstack, state, world], rest)
      | ST(x) -> case stack of
            value:stackR -> state.assign(x, value); eval(c, rest)
       esac
      | STI -> case stack of
              value:Ref(x):stackR -> state.assign(x, value); eval([value:stackR, cstack, state, world], rest)
         esac
      | DROP -> case stack of
              _:stackR -> eval ([stackR, cstack, state, world], rest) esac
      | DUP -> case stack of
                  x:stackR -> eval ([x:x:stackR, cstack, state, world], rest) esac
      | CONST(n) -> eval([n:stack, cstack, state, world], rest)
      | LABEL(s) -> eval(c, rest)
      | JMP(label) -> eval(c, fromLabel(env, label))
      | CJMP(c, label) -> case stack of
          fl:stackR -> case c of
              "z" -> case fl of
                  0 -> eval([stackR, cstack, state, world], fromLabel(env, label))
                  |_ -> eval([stackR, cstack, state, world], rest)
              esac
              | "nz" -> case fl of
                  0 -> eval([stackR, cstack, state, world], rest)
                  |_ -> eval([stackR, cstack, state, world], fromLabel(env, label))
              esac
          esac
       esac
      | GLOBAL(x) -> assign(state, Glb(x), 0); eval(c, rest)
      | END -> case cstack of
            [state, rest]:cstack -> eval([stack, cstack, state, world], rest)
            | {} -> c
       esac
      | CALL(fname, args) -> eval ([stack, [state, rest]:cstack, state, world], env.fromLabel(fname))
      | BEGIN (fname, argc, varc) ->
            case take (stack, argc) of
                [stack, args] ->
                  var newState = makeState(argc, varc);
                  var state = assignArgs(newState, args);
                  eval([stack, cstack, state, world], rest)
            esac
       esac
      | {} -> c
    esac
  }
  (* End *)

  fun assignArgs(newState, args) {
    foldl (fun ([state, i], arg) {
        state.assign (Arg(i), arg);
        [state, i + 1]
    }, [newState, 0], args)[0]
  }
  -- printf ("%s\n", showSM (insns));

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (env, stmt) {
    case stmt of
       Assn(x, e) -> case compile(env, x) of [env, xs] -> case compile (env, e) of [env, xe] -> [env, xs +++ xe +++ {STI}] esac esac
       | Var (s) -> [env, {LD (lookupVar(env, s))}]
       | Const (i) -> [env, {CONST(i)}]
       | Binop (s, e1, e2) -> case compile(env, e1) of
             [env, s1] -> case compile(env, e2) of
                 [env, s2] -> [env, s1 +++ s2 +++ {BINOP(s)}]
                 esac esac
       | Skip -> [env, {}]
       | Ref (x) -> [env, {LDA (lookupVar(env, x))}]
       | Seq (s1, s2) -> case compile(env, s1) of
            [env1, st1] -> case compile(env1, s2) of
                 [env2, st2] -> [env2, st1 +++ st2]
                 esac
            esac
       | Read (s) -> [env, {READ, ST(lookupVar(env, s)), DROP}]
       | Write (e) -> case compile(env, e) of
             [env, s] -> [env, s +++ {WRITE}] esac
       | If (e, s1, s2) -> case genLabels (env, 2) of
           [lfls, lend, env1] -> case compile(env1, e) of
               [env2, es] -> case compile(env2, s1) of
                   [env3, stru] -> case compile(env3, s2) of
                        [env4, sfls] -> [env4, es +++ {CJMP ("z", lfls)} +++ stru +++ {JMP(lend), LABEL(lfls)} +++ sfls +++ {LABEL(lend)}]
                   esac esac esac esac
       | While (e, s) -> case genLabels (env, 2) of
             [le, ls, env] -> case compile(env, e) of
                 [env, ce] -> case compile(env, s) of
                     [env, cs] -> [env, {JMP(le), LABEL(ls)} +++ cs +++ {LABEL(le)} +++ ce +++ {CJMP("nz", ls)}]
                 esac esac esac
       | DoWhile (s, e) -> case genLabels (env, 2) of
              [le, ls, env] -> case compile(env, s) of
                  [env, cs] -> case compile(env, e) of
                     [env, ce] -> [env, {LABEL(ls)} +++ cs +++ {LABEL(le)} +++ ce +++ {CJMP("nz", ls)}]
                  esac esac esac
       | Ignore (e) -> case compile (env, e) of
             [env, cs] -> [env, cs +++ {DROP}] esac
       | Scope (defs, expr) -> case addDefs(beginScope(env), defs) of [env, funs, globs] ->
             var codeG = map (fun(a) {GLOBAL(a)}, globs);
             case compile(rememberFuns(env, funs), expr) of [env, code] ->
               [env.endScope, codeG +++ code]
             esac
       esac
       | Call (f, args) -> case compileList(env, args) of
           [env, code] -> case lookupFun(env, f) of
               Fun(fLabel, n) -> [env, code +++ {CALL(fLabel, n)}]
           esac
       esac
       | Fun (fLabel, args, body, state) -> case compile(addArgs(beginFun(env, state), args), body) of
           [env, code] -> [env, {LABEL(fLabel), BEGIN(fLabel, size(args), getLocals(env))} +++ code +++ {END}]
        esac
    esac
    }
    fun rememberFuns(env, funs) {
       foldl (fun (env, Fun (fLabel, args, body)) {
           rememberFun(env, fLabel, args, body)
       }, env, funs)
    }
    fun compileOne([env, code], expr) {
       case compile(env, expr) of
           [env, cCode] -> [env, code +++ cCode]
       esac
    }
    fun compileList(env, exprs) {
       foldl(compileOne, [env, {}], exprs)
    }
    fun compileFuns(env) {
       case getFuns(env) of
           [{}, _] -> [env, {}]
           | [funs, env] -> case compileList(env, funs) of
               [env, code] -> case compileFuns(env) of
                   [env, cCode] -> [env, code +++ cCode]
               esac
           esac
       esac
    }
    fun addDefs(env, defs) {
       foldl (fun([env, funs, globs], def) {
           case def of
               Fun (name, args, body) -> case genFunLabel (env, name) of
                [fLabel, env] -> env := addFun(env, name, fLabel, size(args));
                             [env, Fun (fLabel, args, body) : funs, globs]
                esac
               | Var (names) -> env := addVars (env, names);
                                globs := (if isGlobal (env) then names else {} fi) +++ globs;
                                [env, funs, globs]
           esac
       }, [env, {}, {}], defs)
    }
    case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compile (env, stmt) of
            [env, code] -> {LABEL("main"), BEGIN("main", 0, getLocals(env))} +++ code +++ {LABEL(endLab), END} +++ compileFuns(env)[1]
          esac
    esac
}
