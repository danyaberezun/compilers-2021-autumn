-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    (i : is) -> eval(evalInstr(c, i), is)
    | _ -> c
  esac
}

fun evalInstr([stack, state, world], instr) {
  case instr of
    READ -> case readWorld(world) of
        [elem, new_world] -> [elem:stack, state, new_world]
      esac
    | WRITE ->
      case stack of
        (elem : tail) -> [tail, state, writeWorld(elem, world)]
      esac
    | BINOP (op) -> case stack of
        elem2 : elem1 : tail -> [evalBinOp(op, elem1, elem2) : tail, state, world]
      esac
    | LD (x) -> [state(x) : stack, state, world]
    | ST (x) -> case stack of
        (elem : tail) -> [tail, state <- [x, elem], world]
      esac
    | CONST (n) -> [n : stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (variable) -> {LD (variable)}
    | Const (const) -> {CONST (const)}
    | Binop (op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    case stmt of
      Assn (variable, expr) -> compileExpr(expr) +++ {(ST (variable))}
      | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
      | Read (variable) -> {READ} +++ {(ST (variable))}
      | Write (expr) -> compileExpr(expr) +++ {WRITE}
      | Skip -> {}
    esac
}
