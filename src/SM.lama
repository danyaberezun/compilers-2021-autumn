-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  stringcat (map (fun (i) {showSMInsn (i) ++ "\n"}, prg))
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs

-- Create evaluation environment from a SM program.
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
--
-- Given a label, returns the subprogram of this label.
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun evalImpl (env) {
  fun evalInst (config, inst) {
    case config of [stack, state, world] ->
      case inst of
        READ ->
          case readWorld (world) of [value, newWorld] ->
            [Forward, [value : stack, state, newWorld]]
          esac
      | WRITE ->
          case stack of stackTop : stackTail ->
            [Forward, [stackTail, state, writeWorld (stackTop, world)]]
          esac
      | BINOP (op) ->
          case stack of rhs : lhs : stackTail ->
            var result = case op of 
              "+"  -> lhs +  rhs
            | "-"  -> lhs -  rhs
            | "*"  -> lhs *  rhs
            | "/"  -> lhs /  rhs
            | "%"  -> lhs %  rhs
            | "==" -> lhs == rhs
            | "!=" -> lhs != rhs
            | "<"  -> lhs <  rhs
            | "<=" -> lhs <= rhs
            | ">"  -> lhs >  rhs
            | ">=" -> lhs >= rhs
            | "&&" -> lhs && rhs
            | "!!" -> lhs !! rhs
            esac;
            [Forward, [result : stackTail, state, world]]
          esac
      | LD (varName) ->
          [Forward, [state (varName) : stack, state, world]]
      | ST (varName) ->
          case stack of stackTop : stackTail ->
            [Forward, [stackTail, state <- [varName, stackTop], world]]
          esac
      | CONST (intConst) ->
          [Forward, [intConst : stack, state, world]]
      | LABEL (_) ->
          [Forward, config]
      | JMP (label) ->
          [JumpTo (label), config]
      | CJMP (condition, label) ->
          case stack of stackTop : stackTail ->
            var programStep = case condition of
              "z" ->
                if (stackTop == 0)
                  then JumpTo (label)
                  else Forward
                fi
            | "nz" ->
                if (stackTop != 0)
                  then JumpTo (label)
                  else Forward
                fi
            esac;
            [programStep, [stackTop, state, world]]
          esac
      esac
    esac
  }

  fun eval (config, program) {
    case program of
      {} -> config
    | firstInst : nextInsts ->
      case evalInst (config, firstInst) of [programStep, config] ->
        var subprogram = case programStep of
          Forward -> nextInsts
        | JumpTo (label) -> fromLabel (env, label)
        esac;
        eval (config, subprogram)
      esac
    esac
  }

  eval
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
--
-- Program is from the first instruction to the last.
fun eval (env, config, program) {
  var impl = evalImpl (env);
  impl (config, program)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

fun makeCompEnv () {
  var nextLabelNo = 0;

  fun genLabel () {
    var label = sprintf ("L%d", nextLabelNo);
    nextLabelNo := nextLabelNo + 1;
    label
  }
  
  genLabel
}

---- Utility function: generates n labels
--fun genLabels (env, n) {
--  fun inner (env, n) {
--    if n == 0
--    then {env}
--    else case env.genLabel of
--           [lab, env] -> lab : inner (env, n-1)
--         esac
--    fi
--  }
--
--  listArray (inner (env, n))
--}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a buffer of stack machine instructions.
fun compileExpr (expr) {
  case expr of
    Var (varName) -> singletonBuffer (LD (varName))
  | Const (int) -> singletonBuffer (CONST (int))
  | Binop (op, lhs, rhs) ->
      compileExpr (lhs) <+> compileExpr (rhs) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the label is needed
  fun maybeLabel (lab, labUsed) {
    if labUsed
      then singletonBuffer (LABEL (lab))
      else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    label --- a label, which goes after the statement has been executed
  --    stmt  --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "label" was used
  --    code buffer
  fun compile (label, stmt) {
    case stmt of
      Skip           -> [false, emptyBuffer ()]
    | Read  (x)      -> [false, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        var s2Label = compEnv ();
        case compile (s2Label, s1) of [s2LabelUsed, s1Code] ->
          case compile (label, s2) of [labelUsed, s2Code] ->
            [labelUsed, s1Code <+> maybeLabel (s2Label, s2LabelUsed) <+> s2Code]
          esac
        esac
    | If (condExpr, thenStmt, elseStmt) ->
        var thenLabel = compEnv ();
        var code = case compile (label, thenStmt) of [_, thenInsts] ->
          case compile (label, elseStmt) of [_, elseInsts] ->
            compileExpr (condExpr)
              <+ CJMP ("nz", thenLabel)
              <+> elseInsts
              <+ JMP (label)
              <+ LABEL (thenLabel)
              <+> thenInsts
          esac
        esac;
        [true, code]
    | While (condExpr, bodyStmt) ->
        var condLabel = compEnv ();
        var code = case compile (condLabel, bodyStmt) of [_, bodyCode] ->
          singletonBuffer (LABEL (condLabel))
            <+> compileExpr (condExpr)
            <+ CJMP ("z", label)
            <+> bodyCode
            <+ JMP (condLabel)
        esac;
        [true, code]
    | DoWhile (bodyStmt, condExpr) ->
        var bodyLabel = compEnv ();
        var condLabel = compEnv ();
        var code = case compile (condLabel, bodyStmt) of [condLabelUsed, bodyCode] ->
          singletonBuffer (LABEL (bodyLabel))
            <+> bodyCode
            <+> maybeLabel (condLabel, condLabelUsed)
            <+> compileExpr (condExpr)
            <+ CJMP ("nz", bodyLabel)
        esac;
        [false, code]
    | For (init, cond, step, body) ->
        var condLabel = compEnv ();
        var initCode = (compile (condLabel, init))[1];
        var stepCode = (compile (condLabel, step))[1];
        var stepLabel = compEnv ();
        var code = case compile (stepLabel, body) of [stepLabelUsed, bodyCode] ->
          initCode
            <+ LABEL (condLabel)
            <+> compileExpr (cond)
            <+ CJMP ("z", label)
            <+> bodyCode
            <+> maybeLabel (stepLabel, stepLabelUsed)
            <+> stepCode
            <+ JMP (condLabel)
        esac;
        [true, code]
    | _ -> failure ("Invalid AST node")
    esac
  }  

  var compEnv = makeCompEnv();
  var endLabel = compEnv ();
  case compile (endLabel, stmt) of [endLabelUsed, code] ->
    getBuffer $ code <+> maybeLabel (endLabel, endLabelUsed)
  esac
}
