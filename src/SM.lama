-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  case insns of
    {} -> c
  | CONST (c)        : insTail -> eval ([c : stack, state, world], insTail)
  | LD    (variable) : insTail -> eval ([state (variable) : stack, state, world], insTail)
  | ST    (variable) : insTail -> eval ([stack.tl, state <- [variable, stack.hd], world], insTail)
  | WRITE            : insTail -> eval ([stack.tl, state, writeWorld(stack.hd, world)], insTail) 
  | BINOP (op)       : insTail -> case stack of 
                                    y : x : stackTail -> eval ([applyBinOp (op, x, y) : stackTail, state, world], insTail) 
                                  esac
  | READ             : insTail -> case readWorld(world) of 
                                    [value, newWorld] -> eval ([value : stack, state, newWorld], insTail) 
                                  esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x)                             -> {LD (x)}
  | Const (c)                             -> {CONST (c)}
  | Binop (op, leftSubtree, rightSubtree) -> compileExpr (leftSubtree) +++ compileExpr (rightSubtree) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (variable, expr)            -> compileExpr (expr) +++ {ST (variable)}
  | Seq   (leftSubtree, rightSubtree) -> compileSM (leftSubtree) +++ compileSM (rightSubtree)
  | Skip                              -> {}
  | Read  (variable)                  -> {READ, ST (variable)}
  | Write (expr)                      -> compileExpr (expr) +++ {WRITE}
  esac
}