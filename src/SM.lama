-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun stepInsns ([stack, state, w], insn) {
   case insn of
     READ      -> case readWorld(w) of
                    [v, new_w] -> [v : stack, state, new_w]
                  esac
   | WRITE     -> case stack of
                    v: tail -> [tail, state, writeWorld(v, w)]
                  esac
   | BINOP(op) -> case stack of
                    rhs: lhs: tail -> [evalBinop(op, lhs, rhs) : tail, state, w]
                  esac
   | LD(x)     -> [state(x) : stack, state, w]
   | ST(x)     -> case stack of
                    v: tail -> [tail, state <- [x, v], w]
                  esac
   | CONST(n)  -> [n : stack, state, w]
   esac
}
fun eval (c, insns) {
   case insns of
     {}         -> c
   | head: tail -> eval(stepInsns(c, head), tail)
   esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
   case expr of
     Var(x)              -> {LD(x)}
   | Const(n)            -> {CONST(n)}
   | Binop(op, lhs, rhs) -> compileExpr(lhs) +++ compileExpr(rhs) +++ {BINOP(op)}
   esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of
     Assn(varName, varExpr) -> compileExpr(varExpr) +++ {ST(varName)}
   | Seq(stmt1, stmt2)      -> compileSM(stmt1) +++ compileSM(stmt2)
   | Skip                   -> {}
   | Read(destName)         -> {READ, ST(destName)}
   | Write(expr)            -> compileExpr(expr) +++ {WRITE}
   esac
}
