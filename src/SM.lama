-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun eval1 (c, x) {
  case x of
    READ      ->
      var rv_nw = readWorld(c[2]);
      [{rv_nw[0]} +++ c[0], c[1], rv_nw[1]]
  | WRITE     -> [tl (c[0]), c[1], writeWorld(hd (c[0]), c[2])]
  | BINOP (s) -> case c[0] of
        (r:l:z) -> [{evalOp(s, l, r)} +++ z, c[1], c[2]]
      | _ -> failure("empty stack on bop")
    esac
  | LD    (x) -> [{c[1](x)} +++ c[0], c[1], c[2]]
  | LDA   (x) -> [{x} +++ c[0], c[1], c[2]]
  | STI       ->
    case c[0] of (v:e:xs) ->
      [xs, updState(v, e, c[1]), c[2]]
    esac
  | ST    (x) -> [tl (c[0]), updState(x, hd(c[0]), c[1]), c[2]]
  | DROP      -> [tl (c[0]), c[1], c[2]]
  | DUP       -> [{hd (c[0])} +++ c[0], c[1], c[2]]
  | CONST (n) -> [{n} +++ c[0], c[1], c[2]]
  | LABEL (x) -> c
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    {} -> c
  | x:xs  ->
    case x of
      JMP (lab) ->
        var xs = env.fromLabel (lab);
        eval(env, c, xs)
    | CJMP (cond, lab) ->
        c := eval1(c, BINOP (cond));
        case c[0] of
          (v:vs) ->
            var cNext = [vs, c[1], c[2]];
            if v
            then
                var xs = env.fromLabel (lab);
                eval(env, cNext, xs)
            else eval(env, cNext, xs)
            fi
        esac
    | _ -> eval(env, eval1(c, x), xs)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles expression into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt, isExpr) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e) ->
      case compile(lab, env, e, true) of [r, env, e] -> [r, env, e <+ DROP] esac
    | Binop (s, l, r) ->
      case compile (lab, env, l, true) of [lab1, env, l] ->
        case compile (lab, env, r, true) of [lab2, env, r] ->
          [lab1 !! lab2, env, l <+> r <+ BINOP (s)]
        esac
      esac
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      ->
      case compile(lab, env, e, true) of [r, env, e] ->
        [r, env, e <+ WRITE]
      esac
    | Assn  (x, e)   ->
      case compile(lab, env, e, true) of [r1, env, e] ->
        case compile(lab, env, x, true) of [r2, env, x] ->
          [r1 !! r2, env, e <+ DUP <+> x <+ STI]
        esac
      esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1, false) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2, isExpr) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | While (e, s)   ->
        case env.genLabel of
          [begLab, env] ->
            case env.genLabel of
              [endLab, env] ->
                case compile(lab, env, e, true) of [_, env, e] ->
                  var res0 = label (begLab, true) <+> e <+ CONST (0) <+ CJMP ("==", endLab);
                  case compile (begLab, env, s, false) of
                    [_, env, scode] -> [false, env, res0 <+> scode <+ JMP (begLab) <+> label (endLab, true)]
                  esac
                esac
            esac
        esac
    | If (e, t, f)   ->
        case env.genLabel of
          [elsLab, env] ->
            case env.genLabel of
              [endLab, env] ->
                case compile (endLab, env, t, isExpr) of
                  [_, env, tcode] ->
                    case compile (endLab, env, f, isExpr) of [_, env, f] ->
                      case compile (endLab, env, e, true) of [_, env, e] ->
                        if isExpr
                        then
                          [false, env, e <+ CONST (0) <+ CJMP ("==", elsLab)
                            <+> tcode <+ JMP (endLab) <+> label (elsLab, true) <+> f <+> label (endLab, true)]
                        else
                          [false, env, e <+ CONST (0) <+ CJMP ("==", elsLab)
                            <+> tcode <+ JMP (endLab) <+> label (elsLab, true) <+> f <+> label (endLab, true)]
                        fi
                      esac
                    esac
                esac
            esac
        esac
    | DoWhile (s, e)   ->
        case env.genLabel of
          [begLab, env] ->
            case env.genLabel of
              [endLab, env] ->
                case compile (begLab, env, s, false) of
                  [_, env, scode] ->
                    case compile (endLab, env, e, true) of [_, env, e] ->
                      [false, env, label (begLab, true) <+> scode <+> e <+ CONST (0) <+ CJMP ("!=", begLab) <+> label (endLab, true)]
                    esac
                esac
            esac
        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt, false) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
