-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s, f)    -> sprintf ("LABEL %s, %d", s, f)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  | META (m)         -> sprintf ("META %s", m.string)
  | PATT (p)         -> sprintf ("PATT %s", p.string)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}                  -> m
            | LABEL (lab, _) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl              -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun eval (c@[st, cst, s, w], insns) {
     case insns of
        instr : prog ->
          case instr of
            JMP (l) -> eval(c, fromLabel(env, l))
            | CJMP  (c, l) -> case st of
              i:vals -> eval([vals, cst, s, w], if (compare(c, "z") == 0) == (i == 0) then
                      env.fromLabel (l)
                      else
                      prog
                      fi
              )
              esac
            | END -> 
              case cst of
                {} -> c |
                [nS, insns]: cst -> eval([st, cst, nS, w], insns)
              esac
            | CALL (f, p) -> eval([st, [s, prog] : cst, s, w], fromLabel(env, f))
            | _ -> eval(evalInstr(c, instr), prog)
          esac
        | {} -> c
      esac
  }

  fun evalInstr(c@[stack, cStack, st@[a, b], world], instr) {
  case instr of
      READ      -> 
      case readWorld(world) of
        [v, newWorld] -> [v:stack, cStack, st, newWorld]
      esac                                      
    | WRITE     -> 
      case stack of
        v : vals -> [vals, cStack, st, writeWorld(v, world)]
      esac
    | BINOP (op) -> 
      case stack of 
        a : b : vals -> [evalOp(op, b, a) : vals, cStack, st, world]
      esac
    | LD (x) -> [st.lookup(x): stack, cStack, st, world]
    | LDA (x) -> [Ref(x) : stack, cStack, st, world]
    | ST (x) -> 
      case stack of
        v : vals ->
         st.assign(x, v);
        [vals, cStack, st, world]
      esac 
    | STI -> 
      case stack of
        v : u : vals -> 
          st.assign(u, v);
          [v :vals, cStack, st, world]
      esac 
    | CONST (n) -> [n:stack, cStack, st, world]
    | LABEL (s, _) -> c
    | DROP -> case stack of
        v : vals -> [vals, cStack, st, world]
        | _ -> c
      esac 
    | DUP -> case stack of
        v : vals -> [v : v : vals, cStack, st, world] 
      esac 
    | GLOBAL (x) -> assign(st, Glb(x), 0);
      [stack, cStack, st, world]
    | BEGIN (f, n, l) -> case take(stack, n) of
      [stack, p] -> 
        fun makeArgs(s, args, i) {
          case args of
            a : rest -> 
              assign(s, Arg(i) , a);
              makeArgs(s, rest, i + 1)
            | {} -> i
          esac
        }

        var nSt = makeState(n, l);
        makeArgs(nSt, p, 0);
        [stack, cStack, nSt, world]
      esac
    | STA -> case stack of
        v : Ref(x) : stack -> st.assign(x, v); 
          [v : stack, cStack, st, world]
        | v : i : xs : stack -> xs[i] := v;
        [v : stack, cStack, st, world]
      esac
    | STRING (x) -> [x : stack, cStack, st, world]
    | ELEM ->case stack of
        i : xs : rest -> case xs of
          Sexp (_, xs) -> [xs[i] : rest, cStack, st, world]
          | x -> [x[i] : rest, cStack, st, world]
          esac
      esac
    | ARRAY (n) -> case take(stack, n) of
      [stack, xs] -> [listArray(xs) : stack, cStack, st, world]
      esac
    | SEXP (n, nx) -> case take(stack, nx) of
      [stack, xs] -> [Sexp(n, listArray(xs)) : stack, cStack, st, world]
      esac
    | BUILTIN (f, np) -> case take(stack, np) of
      [stack, p] -> case evalBuiltin(f, p, world) of
          [v, world] -> [v : stack, cStack, st, world]
          esac
      esac
    | META(msg) -> failure (msg)
    | PATT ([s, n])  -> case stack of
          Sexp (x, vals):stack -> var tf = compare (s, x) == 0 && n == length(vals);
            [tf:stack, cStack, st, world]
        esac
    | _ -> failure(string(instr))
  esac
}

  -- printf ("%s\n", showSM (insns));
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | Arg (x)       -> Arg (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab, false))
    else emptyBuffer ()
    fi
  }

  fun compileList (lab, env, stmts) {
    case stmts of
      {} -> [false, env, emptyBuffer ()]
    | stmt : {} -> compile (lab, env, stmt)
    | stmt : stmts -> case genLabel (env) of
      [stmtLab, env] -> case compile (stmtLab, env, stmt) of
	      [stmtLabUsed, env, stmtCode] -> case compileList (lab, env, stmts) of
	        [labUsed, env, stmtsCode] -> [labUsed, env, stmtCode <+> label (stmtLab, stmtLabUsed) <+> stmtsCode]
	        esac
	      esac
      esac
    esac
  }

  fun compileBranch (env, [pattern, e], labOk) {
    fun labDepth (lab, depth) {
      if   depth == 0
      then lab
      else sprintf ("%s_DROP_%d", lab, depth)
      fi
    }

    fun generateDrops (lab, depth) {
      var code;
      code := emptyBuffer();
      for var i; i := 0, i < depth, i := i+1
      do   
        code := code <+ LABEL (labDepth (lab, depth - i), false) <+ DROP
      od;
      code
    }

    fun getDepth(newD, maxD) {
      if newD > maxD
      then newD
      else maxD
      fi
    }

    fun compilePattern (env, pattern, depth, labEnd) {
      case pattern of
        Wildcard  -> [env, emptyBuffer (), depth]
      | Const (x) -> [env, 
      singletonBuffer (DUP) <+ CONST (x)<+ BINOP ("==") <+ CJMP  ("z", labDepth (labEnd, depth)),
      depth]
      | Named (_, p)  ->  compilePattern (env, p, depth, labEnd)
      | Sexp  (s, xs) -> case compilePatterns (env, xs, depth, labEnd) of
                           [env, codeA, maxD] -> [env, 
                           singletonBuffer (DUP)<+  PATT ([s, size (xs)])
                           <+  CJMP ("z", labDepth (labEnd, depth)) <+> codeA, 
                            maxD]
                         esac
      | Array (vals) -> compilePattern (env, Sexp ("[]", vals), depth, labEnd)
      esac
    }

    fun compilePatterns (env, ps, depth, labEnd) {
      var r = foldl (fun ([env, code, maxD, i], p) {
        case compilePattern (env, p, depth + 1, labEnd) of
          [env, codeP, newD] -> [env, 
            code <+ DUP <+ CONST (i) <+ ELEM <+> codeP <+ DROP, 
            getDepth(newD, maxD),
            i + 1]
        esac
      }, [env, emptyBuffer (), depth, 0], ps);
      [r[0], r[1], r[2]]
    }

    case genLabels (env, 2) of
      [labP, labE, env] -> case compilePattern (env, pattern, 0, labP) of
        [env, codeP, maxDepth] -> case compile (labE, env, e) of
          [used, env, codeE] -> [env, codeP <+ DROP <+> codeE <+> label (labE, used) 
          <+  JMP(labOk) <+> generateDrops(labP, maxDepth) <+ LABEL(labP, false)]
          esac
      esac
    esac
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip       -> [false, env, emptyBuffer ()]
    | Var    (x) -> [false, env, singletonBuffer (LD  (lookupVar (env, x)))]
    | Ref    (x) -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n) -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e) -> case genLabel (env) of
      [lab, env] -> case compile (lab, env, e) of
        [used, env, code] -> [false, env, code <+> label (lab, used) <+ DROP]
        esac
      esac
    | Binop (op, e1, e2) -> case genLabels (env, 2) of
        [lab1, lab2, env] -> case compile (lab1, env, e1) of
          [used1, env, code1] -> case compile (lab2, env, e2) of
            [used2, env, code2] -> [false, env, 
            code1 <+> label (lab1, used1) <+> code2 <+> label (lab2, used2) <+  BINOP (op)]
            esac
        esac
      esac
    | Set  (s, e) -> compile (lab, env, Assn (Ref (s), e))
    | Assn (x, e) -> case genLabels (env, 2) of
      [labX, labE, env] -> case compile (labX, env, x) of
        [usedX, env, codeX] -> case compile (labE, env, e) of
          [usedE, env, codeE] -> [false, env, 
          codeX <+> label (labX, usedX) <+> codeE <+> label (labE, usedE) <+  STA]
          esac
        esac
      esac
    | Seq (s1, s2) -> case genLabel (env) of
        [labS2, env] -> case compile (labS2, env, s1) of
          [usedS2, env, codeS1] -> case compile (lab, env, s2) of
            [used, env, codeS2] -> [used, env, codeS1 <+> label (labS2, usedS2) <+> codeS2]
            esac
        esac
      esac
    | If (e, s1, s2) -> case genLabels (env, 2) of
      [labE, l, env] -> case compile (labE, env, e) of
        [used, env, codeE] -> case compile (lab, env, s1) of
          [_, env, codeT] -> case compile (lab, env, s2) of
            [_, env, codeF] -> [true, env, 
            emptyBuffer () <+> codeE <+> label (labE, used) <+  CJMP ("z", l)
            <+> codeT <+  JMP (lab) <+> label (l, true) <+> codeF]
              esac
          esac
        esac
      esac
    | While (e, s) -> case genLabels (env, 3) of
        [l, labS, labE, env] -> case compile (l, env, s) of
          [_, env, codeS] -> case compile (labE, env, e) of
            [used, env, codeE] -> [false, env, 
            emptyBuffer () <+  JMP   (l) <+  LABEL (labS, true) <+> codeS
            <+> label (l, true) <+> codeE <+> label (labE, used) <+  CJMP  ("nz", labS)]
          esac
        esac
      esac
    | DoWhile (b, e) -> case genLabels (env, 3) of
        [l, labS, labE, env] -> case compile (labS, env, b) of
          [usedS, env, codeS] -> case compile (labE, env, e) of
            [usedE, env, codeE] -> [false, env, 
            emptyBuffer () <+  LABEL (l, true) <+> codeS <+> label (labS, usedS)
            <+> codeE <+> label (labE, usedE) <+  CJMP  ("nz", l)]
          esac
        esac
      esac
    | Scope (v, s) -> var gCode;
      fun addDefs (env, vv) {
      	case vv of
          Var (vs) -> env.addVars (vs)
        | Val (vs) -> addDefs(env, Var(vs))
        | Fun (name, args, body) -> addFun (env, name, name, size(args))
        esac
      }
      fun rememberFuns (env, vv) {
        case vv of
          Var (vs) -> env
        | Val (vs) -> env
        | Fun (name, args, body) -> rememberFun (env, name, args, body)
        esac
      }
      fun addGlobalsCode (code, vv) {
	      code <+ GLOBAL (vv)
      }
      fun addCode (code, vv) {
        case vv of
          Var (vs) -> foldl(addGlobalsCode, code, vs)
        | Val (vs) -> addCode(code, Var(vs))
        | Fun (name, args, body) -> code
        esac
      }
      env := foldl(rememberFuns, foldl(addDefs, beginScope (env), v), v);
      if isGlobal (env) then gCode := foldl(addCode, emptyBuffer (), v) fi;
      case compile (lab, env, s) of [used, env, code] ->
	    [used, env.endScope, gCode <+> code]
      esac
    | Call (f, args) -> case genLabel (env) of
      [endLab, env] -> case compileList (endLab, env, args) of
	      [endLabUsed, env, argsCode] -> case lookupFun (env, f) of
	        Fun (fLab, n) -> if fLab[0] == '$' 
            then [false, env, argsCode <+> label (endLab, endLabUsed) <+ BUILTIN (f, n)]
		        else [false, env, argsCode <+> label (endLab, endLabUsed) <+ CALL (fLab, n)]
		        fi
	        esac
	      esac
      esac
    | String (x) -> [false, env, singletonBuffer(STRING(x))]
    | Elem (x, i) -> 
        case env.genLabel of
          [xsLab, env] -> 
            case compileList(xsLab, env, {x, i}) of
              [xsLabUsed, env, xsCode] -> [false, env, xsCode <+> label(xsLab, xsLabUsed) <+ ELEM]
            esac
        esac
    | ElemRef (x, i) -> compileList(lab, env, {x, i})
    | Array (xs) -> 
      case env.genLabel of
        [xsLab, env] -> 
          case compileList(xsLab, env, xs) of
            [xsLabUsed, env, xsCode] -> [false, env, xsCode <+> label(xsLab, xsLabUsed) <+ ARRAY(size(xs))]
          esac
      esac
    | Sexp (n, xs) ->
      case env.genLabel of
        [xsLab, env] -> 
          case compileList(xsLab, env, xs) of
            [xsLabUsed, env, xsCode] -> [false, env, xsCode <+> label(xsLab, xsLabUsed) <+ SEXP(n, size(xs))]
          esac
      esac
    | Set (x, v) -> compile(lab, env, Assn(Ref(x), v))
    | Case (s, branches)   -> case lookupVar (env, s) of
      c -> case genLabel (env) of
        [lab, env] ->  var r = foldl (fun ([env, code], b) {
                  case compileBranch (env, b, lab) of
                    [env, codeB] -> [env, code <+> codeB]
                  esac }, [env, emptyBuffer ()], branches);
        [false, r[0], singletonBuffer (LD (c)) <+> r[1] <+  META  ("Match failed") <+  LABEL (lab, true)]
        esac
      esac
    | _                 ->  failure ("compileSM not implemented for %s\n", stmt.string)
    esac
  }


case beginScope (initCompEnv ()).addFun ("read", "$read", 0)
                                  .addFun ("write", "$write", 1)
				                          .addFun ("length", "$length", 1)
				of env ->
    fun compileFunction (env, Fun (name, args, body, st)) {
      fun compEnv(st, env) {
        case st of 
          {} -> env
          | st -> addArgs (beginFun (env, st), args) 
        esac
      }
      case (compEnv(st, env)).genLabel of 
        [fLab, env] -> case compile (fLab, env, body) of 
          [fLabUsed, env, code] -> [env, singletonBuffer (LABEL (name,false))
           <+ BEGIN (name, size (args), getLocals (env))
           <+> code
           <+> label (fLab, fLabUsed)
           <+ END]
        esac
      esac
    }
    fun compileFunctions (env, fs) {
      case fs of
        {} -> [env, emptyBuffer ()]
      | f:fs ->
        case compileFunction (env, f) of [env, fCode] ->
          case getFuns (env) of [rest, env] ->
            case compileFunctions (env, fs +++ rest) of [env, code] ->
              [env, fCode <+> code] 
            esac
          esac
        esac
      esac
    }
    case compileFunctions (env, {Fun ("main", emptyBuffer (), stmt, emptyBuffer ())}) of
      [env, code] -> getBuffer $ code
    esac
  esac
}
