-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
<<<<<<< HEAD
fun eval (env, c, insns) {
  failure ("SM eval not implemented\n")
=======
fun eval (c, insns) {
  var stack = c[0];
  var state = c[1];
  var world = c[2];
  var count = size(insns);

  for var i; i:= 0, i < count, i := i + 1 do
    case insns.fst of
      READ      -> case readWorld(world) of [n, w] -> stack := n:stack; world := w esac
    | WRITE     -> 
        case stack of 
          n:tail  -> stack := tail; world := writeWorld(n, world)
        | _       -> failure ("Stack is empty!")
        esac
    | BINOP (s) -> 
        case stack of 
          y:tail  -> case tail of x:remains -> stack := evalExpr(state, Binop(s, Const(x), Const(y))):remains | _ -> failure ("Stack is empty!") esac
        | _       -> failure ("Stack is empty!")
        esac
    | LD    (x) -> stack := state(x):stack
    | ST    (x) -> 
        case stack of 
          n:tail  -> stack := tail; state := state <- [x, n] 
        | _       -> failure ("Stack is empty!")
        esac
    | CONST (n) -> stack := n:stack
    esac;
    insns := insns.snd
  od;

  -- TODO rewrite "for" with iter call "iter (evalSMInsns, insns);"
  -- The proble with iter is that "world" doesn't change
  [stack, state, world]
>>>>>>> d4eb84e... Implement stack machine interpretaion
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  var output = emptyBuffer();
  case expr of
    Var (x) -> output := output <+ LD (x)
  | Const (value) -> output := output <+ CONST (value)
  | Binop (op, left, right) -> 
      output := output <+> compileExpr(left); 
      output := output <+> compileExpr(right);  
      output := output <+ BINOP (op)
  esac;
  output
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  var output = emptyBuffer();
  case stmt of
    Skip -> skip
  | Assn (x, expr) -> output := output <+> compileExpr(expr); output := output <+ ST (x)
  | Seq (stm1, stm2) -> output := output <+> listBuffer(compileSM(stm1)); output := output <+> listBuffer(compileSM(stm2))
  | Read (x) -> output := output <+ READ; output := output <+ ST (x)
  | Write (expr) -> output := output <+> compileExpr(expr); output := output <+ WRITE
  esac;
  getBuffer(output)
}
