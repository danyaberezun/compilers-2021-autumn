-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalOne (c, insn) {
  var stack = c[0];
  var state = c[1];
  var world = c[2];
  case insn of
    READ ->
      case readWorld(world) of
        [num, newWorld] -> [num:stack, state, newWorld]
      esac
  | WRITE ->
      case stack of
        head:tail -> [tail, state, writeWorld(head, world)]
      esac
  | BINOP (s) ->
      case stack of
        rhv:lhv:tail -> [evalOP(s, lhv, rhv):tail, state, world]
      esac
  | LD (x) -> [state(x):stack, state, world]
  | ST (x) ->
      case stack of
        head:tail -> [tail, state <- [x, head], world]
      esac
  | CONST (n) -> [n:stack, state, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (evalOne, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (varname)        -> {LD (varname)}
  | Const (num)          -> {CONST (num)}
  | Binop (op, lhs, rhs) -> compileExpr(lhs) +++ compileExpr(rhs) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (varname, expr) -> compileExpr(expr) +++ {ST (varname)}
  | Seq (s1, s2)         -> compileSM(s1) +++ compileSM(s2)
  | Skip                 -> {}
  | Read (varname)       -> {READ, ST (varname)}
  | Write (expr)         -> compileExpr(expr) +++ {WRITE}
  esac
}