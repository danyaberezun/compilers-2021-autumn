-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (conf@[stack, state, world], prog) {
  case prog of
    {} -> conf
  | ins:prog ->
      case ins of
        READ -> case readWorld (world) of [x, world] -> eval ([x : stack, state, world], prog) esac
      | WRITE -> case stack of x : stack -> eval ([stack, state, writeWorld (x, world)], prog) esac
      | CONST (x) -> eval ([x : stack, state, world], prog)
      | LD (name) -> eval ([state (name) : stack, state, world], prog)
      | ST (name) -> case stack of x : stack -> eval ([stack, state <- [name, x], world], prog) esac
      | BINOP (op) ->
          case stack of y : x : stack ->
              var z = case op of
                "+" -> x + y
              | "-" -> x - y
              | "*" -> x * y
              | "/" -> x / y
              | "%" -> x % y
              | "<" -> x < y
              | ">" -> x > y
              | "<=" -> x <= y
              | ">=" -> x >= y
              | "==" -> x == y
              | "!=" -> x != y
              | "&&" -> x && y
              | "!!" -> x !! y
              esac;
              eval ([z : stack, state, world], prog)
          esac
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name) -> {LD (name)}
  | Const (x) -> {CONST (x)}
  | Binop (op, ex, ey) -> compileExpr (ex) +++ compileExpr (ey) +++ {BINOP (op)}
  esac
}

fun compileStmt (stmt) {
  case stmt of
    Skip -> {}
  | Assn (name, expr) -> compileExpr (expr) +++ {ST (name)}
  | Seq (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  | Read (name) -> {READ, ST (name)}
  | Write (expr) -> compileExpr (expr) +++ {WRITE}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  compileStmt (stmt)
}
