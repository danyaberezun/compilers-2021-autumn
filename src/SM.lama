-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalBinop (l, r, op) {
  case op of
    "+"     -> infix +
    | "-"   -> infix -
    | "*"   -> infix *
    | "/"   -> infix /
    | "%"   -> infix %
    | "<"   -> infix <
    | ">"   -> infix >
    | "<="  -> infix <=
    | ">="  -> infix >=
    | "=="  -> infix ==
    | "!="  -> infix !=
    | "&&"  -> infix &&
    | "!!"  -> infix !!
  esac (l, r)
}


fun evalInsn ([stack, state, w], insn) {
  case insn of
  READ              -> case readWorld(w) of [value, newWorld] -> [value:stack, state, newWorld] esac
  | WRITE           -> case stack of x:xs -> [xs, state, writeWorld(x, w)] esac
  | LD (string)     -> [state(string):stack, state, w]
  | ST (string)     -> case stack of s:sn -> [sn, state <- [string, s], w] esac
  | CONST (n)       -> [n:stack, state, w]
  | BINOP (op)      -> case stack of l:r:sn -> [evalBinop(l, r, op):sn, state, w] esac 
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
    | x:xs -> eval(evalInsn(c, x), xs)
  esac
  
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var     (x) -> {LD (x)}
    | Const (n) -> {CONST (n)}
    | Binop (op, l, r) -> compileExpr(r) +++ compileExpr(l) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Skip -> {}
    | Assn (string, expr) -> compileExpr(expr) +++ {ST (string)}
    | Read (string)       -> {READ, ST (string)}
    | Write (expr)        -> compileExpr(expr) +++ {WRITE}
    | Seq (lStmt, rStmt)  -> compileSM(lStmt) +++ compileSM(rStmt)
  esac
}
