-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun evalIns(env, c, ins, prog) {
  case ins of
    READ -> 
    var read = readWorld(c[2]);
    [[{read.fst} +++ c[0], c[1], read.snd], prog]
  | WRITE ->
    case c[0] of
      z:st -> [[st, c[1], writeWorld(z, c[2])], prog]
    esac
  | BINOP (op) ->
    case c[0] of
      y:x:st -> [[{evalBinop(op, x, y)} +++ st, c[1], c[2]], prog]
    esac
  | LD (x) -> [[{c[1] (x)} +++ c[0], c[1], c[2]], prog]
  | ST (x) ->
    case c[0] of
      z:st -> [[st, c[1] <- [x, z], c[2]], prog]
    esac
  | CONST (n) -> [[{n} +++ c[0], c[1], c[2]], prog]
  | LABEL(l) -> [c, prog]
  | JMP(l) -> [c, fromLabel(env, l)]
  | CJMP(s, l) ->
      case c[0] of
        z:st ->
          var jmp = case s of
            "z"  -> z == 0
          | "nz" -> z != 0
          esac;
          [c, if jmp then fromLabel(env, l) else prog fi]
      esac
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    {} -> c
  | ins:prog ->
    case evalIns(env, c, ins, prog) of
      [c, prog] -> eval(env, c, prog)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> singletonBuffer(LD (x))
  | Const (n) -> singletonBuffer(CONST (n))
  | Binop (op, e1, e2) -> compileExpr(e1) <+> compileExpr(e2) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If(e, s1, s2) ->
      case env.genLabel of
        [elseLab, env] ->
          var code = compileExpr(e) <+ CJMP("z", elseLab);
          case compile(lab, env, s1) of
            [_, env, codeThen] ->
              case compile(lab, env, s2) of
                [_, env, codeElse] -> [true, env, code <+> codeThen <+ JMP(lab) <+ LABEL(elseLab) <+> codeElse]
              esac
          esac
      esac
    | While(e, s) ->
      case env.genLabels(2) of
        [stmtLab, condLab, env] ->
          case compile(condLab, env, s) of
            [_, env, stmtCode] ->
              [false, env, singletonBuffer(JMP(condLab)) <+> label(stmtLab, true) <+> stmtCode <+> 
                  label(condLab, true) <+> compileExpr(e) <+ CJMP("nz", stmtLab)]
          esac
      esac
    | DoWhile(s, e) ->
      case env.genLabels(2) of
        [stmtLab, condLab, env] ->
          case compile(condLab, env, s) of
            [_, env, stmtCode] ->
              [false, env, label(stmtLab, true) <+> stmtCode <+> 
                  label(condLab, true) <+> compileExpr(e) <+ CJMP("nz", stmtLab)]
          esac
      esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
