-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (cfg, insns) {
  var result = cfg;
  -- printf("In eval. cfg: %s, insns: %s\n", cfg.string, insns.string);
  foldl (fun ([stack, state, world], instr){
    -- printf("Executing instrutions: %s\n", instr.string);
    case instr of
        READ -> case readWorld(world) of 
            [n, world] -> [n:stack, state, world] 
          | _ -> failure("Error in SM.eval: can't read from world while READ") esac

      | WRITE -> case stack of 
            n:stack -> [stack, state, writeWorld(n, world)] 
          | _ -> failure("Error in SM.eval: no value on stack for WRITE") esac

      -- arguments on stack are in reverse order (last argument is first on stack) 
      | BINOP (s) -> case stack of 
            b:a:stack -> [evalBinop(s, a, b):stack, state, world]
          | _ -> failure("Error in SM.eval: no 2 values on stack for BINOP") esac

      | LD (x) -> case stack of 
            a:stack -> [stack, state <- [x, a], world] 
          | _ -> failure("Error in SM.eval: no value on stack for LD") esac

      | ST (x) -> [state(x):stack, state, world]

      | CONST (n) -> [n:stack, state, world]

      | _ -> failure("Unexpected stack machine instruction: %s", instr.string)
    esac
  }, cfg, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (s) -> {ST (s)}
  | Const (n) -> {CONST (n)}
  | Binop (s, a, b) -> compileExpr(a)+++compileExpr(b)+++{BINOP (s)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (s, expr) -> compileExpr(expr) +++ {LD(s)}
  | Seq (a, b) -> compileSM(a) +++ compileSM(b)
  | Skip -> {}
  | Read (s) -> {READ, LD (s)}
  | Write (expr) -> compileExpr(expr) +++ {WRITE}
  esac
}
