-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c @ [stack, state, world], insns) {
--  printf("Instrs:\n%s", showSM(insns));
  case insns of
    i:tail -> 
--      printf("Config: %s\n\n", string(c));
      case i of
        READ      -> 
          case readWorld(world) of
            [n, world2] -> eval([n:stack, state, world2], tail)
          esac
      | WRITE     ->  
          case stack of
            s:tack -> eval([tack, state, writeWorld(s, world)], tail)
          | _        -> failure ("empty stack when write ")
          esac
      | BINOP (s) -> 
          case stack of
            s1:s2:tack -> eval([evalOp(s, s2, s1):tack, state, world], tail)
          | _            -> failure ("not enought values in stack for operator")
          esac
      | LD    (x) -> 
          case stack of
            s:tack -> eval([tack, state <- [x, s], world], tail)
          | _        -> failure ("empty stack when load")
          esac
      | ST    (x) -> eval([state (x) : stack, state, world], tail)
      | CONST (n) -> eval([n:stack, state, world], tail)
      esac
  | {}     -> c
  esac
  
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (s)            -> {ST (s)}
  | Const (n)          -> {CONST (n)}
  | Binop (op, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn  (s, e)     -> compileExpr(e) +++ {LD (s)}
  | Seq   (st1, st2) -> compileSM(st1) +++ compileSM(st2)
  | Skip             -> {}
  | Read  (s)        -> READ : {LD (s)}
  | Write (e)        -> compileExpr(e) +++ {WRITE}
  esac
}