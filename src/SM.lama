-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {}         -> c
  | i : insns2 -> eval (
      case c of [si, st, w] ->
        case i of
          READ      ->
            case readWorld (w) of
              [n, w2]       -> [n : si, st, w2]
            esac
        | WRITE     ->
            case si of
              v : si2       -> [si2, st, writeWorld (v, w)]
            esac
        | BINOP (s) ->
            case si of
              v1 : v2 : si2 -> [evalExpr (st, Binop (s, Const (v2), Const (v1))) : si2, st, w]
            esac
        | LD    (x) -> [st (x) : si, st, w]
        | ST    (x) ->
            case si of
              v : si2       -> [si2, st <- [x, v], w]
            esac
        | CONST (n) -> [n : si, st, w]
        esac
      esac,
      insns2
    )
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x)         -> {LD (x)}
  | Const (n)         -> {CONST (n)}
  | Binop (s, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ {BINOP (s)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (x, e)   -> compileExpr (e) +++ {ST (x)}
  | Seq   (s1, s2) -> compileSM (s1) +++ compileSM (s2)
  | Skip           -> {}
  | Read  (x)      -> {READ, ST (x)}
  | Write (e)      -> compileExpr (e) +++ {WRITE}
  esac
}
