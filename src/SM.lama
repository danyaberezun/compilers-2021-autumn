-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Evaluate single SM instruction.
-- Takes SM-configuration and an instruction.
-- Returns a final configuration.
fun evalInsn(env, c@[stack, state, world], insn) {
  case insn of
      READ       ->
        case readWorld(world) of
          [x, newWorld] -> [env, [x:stack, state, newWorld]]
        esac
    | WRITE      ->
        case stack of
            x : stackRest -> [env, [stackRest, state, writeWorld(x, world)]]
          | _             -> failure("Unexpected WRITE: stack is empty\n")
        esac
    | BINOP (op) ->
        case stack of
            y : x : stackRest -> [env, [evalOp(op, x, y):stackRest, state, world]]
          | _                 -> failure("Unexpected BINOP: stack must contains at least two values\n")
        esac
    | LD (x)     -> [env, [state(x):stack, state, world]]
    | LDA (x)    -> [env, [x:stack, state, world]]
    | ST (x)     ->
        case stack of
            value : stackRest -> [env, [stackRest, state <- [x, value], world]]
          | _                 -> failure("Unexpected ST: stack must contains at least one value\n")
        esac
    | STI        ->
        case stack of
            value : x : stackRest -> [env, [value:stackRest, state <- [x, value], world]]
          | _                     -> failure("Unexpected STI: stack must contains value and ref\n")
        esac
    | CONST (v)  -> [env, [v:stack, state, world]]
    | LABEL (l)  -> [env, c]
    | JMP (l)    -> [env, c]
    | CJMP(c, l) ->
        case stack of
            _ : stackRest -> [env, [stackRest, state, world]]
          | _             -> failure("Unexpected CJMP: stack must be not empty")
        esac
    | DUP        ->
        case stack of
            x : _ -> [env, [x:stack, state, world]]
          | _     -> failure("Unexpected DUP: stack must contains at least one value\n")
        esac
    | DROP       ->
        case stack of
            x : stackRest -> [env, [stack, state, world]]
          | _             -> failure("Unexpected DROP: stack must contains at least one value\n")
        esac
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c@[stack, state, world], insns) {
  case insns of
    { }           -> c |
    p : insnsRest ->
    case evalInsn(env, c, p) of
      [env, c] ->
        case p of
            JMP (l)        -> eval(env, c, fromLabel(env, l))
          | CJMP (flag, l) ->
            case stack of
              x : stackRest ->
                case [flag, x] of
                    ["z", 0]  -> eval(env, c, fromLabel(env, l))
                  | ["z", x]  -> eval(env, c, insnsRest)
                  | ["nz", 0] -> eval(env, c, insnsRest)
                  | ["nz", x] -> eval(env, c, fromLabel(env, l))
                  | _         -> failure("Unexpected CJMP arguments")
                esac
            esac
          | _              -> eval(env, c, insnsRest)
        esac
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (expr) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile(lab, env, expr) {
    case expr of
        Skip               -> [false, env, emptyBuffer()]
      | Var    (x)         -> [false, env, singletonBuffer(LD(x))]
      | Ref    (x)         -> [false, env, singletonBuffer(LDA(x))]
      | Const  (n)         -> [false, env, singletonBuffer(CONST(n))]
      | Read  (x)          -> [false, env, singletonBuffer(READ) <+ ST(x)]
      | Ignore (e)         ->
        case compile(lab, env, e) of
          [labUsed, env, code] -> [labUsed, env, code <+ DROP]
        esac
      | Binop (op, e1, e2) ->
        case genLabels(env, 2) of
          [e1Lab, e2Lab, env] ->
            case compile(e1Lab, env, e1) of
              [e1LabUsed, env, e1Code] ->
                case compile(e2Lab, env, e2) of
                  [e2LabUsed, env, e2Code] -> [false, env, e1Code <+> label(e1Lab, e1LabUsed) <+> e2Code <+> label(e2Lab, e2LabUsed) <+ BINOP(op)]
                esac
            esac
        esac
      | Write (e)          ->
        case genLabel(env) of
          [lab, env] ->
            case compile(lab, env, e) of
              [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ WRITE]
            esac
        esac
      | Assn  (e1, e2)     ->
        case genLabels(env, 2) of
          [lab1, lab2, env] ->
            case compile(lab1, env, e1) of
              [lab1Used, env, code1] ->
                case compile(lab2, env, e2) of
                  [lab2Used, env, code2] -> [false, env, code1 <+> label(lab1, lab1Used) <+> code2 <+> label(lab2, lab2Used) <+ STI]
                esac
            esac
        esac
      | Seq   (e1, e2)     ->
        case env.genLabel of
          [e1Lab, env] ->
            case compile(e1Lab, env, e1) of
              [e1LabUsed, env, e1Code] ->
                case compile(lab, env, e2) of
                  [labUsed, env, e2Code] -> [labUsed, env, e1Code <+> label(e1Lab, e1LabUsed) <+> e2Code]
                esac
            esac
        esac
      | If (e, e1, e2)     ->
        case genLabels(env, 3) of
          [e1BeginLabel, e2EndLabel, eLab, env] ->
            case compile(lab, env, e1) of
              [e1BeginLabelUsed, env, e1Code] ->
                case compile(e2EndLabel, env, e2) of
                  [e2EndLabelUsed, env, e2Code] ->
                    case compile(eLab, env, e) of
                      [eLabUsed, env, eCode] -> [true, env, eCode <+> label(eLab, eLabUsed) <+ CJMP("nz", e1BeginLabel) <+> e2Code <+> label(e2EndLabel, e2EndLabelUsed) <+ JMP(lab) <+ LABEL(e1BeginLabel) <+> e1Code]
                    esac
                esac
            esac
        esac
      | While (e1, e2)     ->
        case genLabels(env, 3) of
          [e2BeginLabel, e2EndLabel, e1Lab, env] ->
            case compile(e2EndLabel, env, e2) of
              [_, env, e2Code] ->
                case compile(e1Lab, env, e1) of
                  [e1LabUsed, env, e1Code] -> [false, env, singletonBuffer(JMP(e2EndLabel)) <+ LABEL(e2BeginLabel) <+> e2Code <+ LABEL(e2EndLabel) <+> e1Code <+> label(e1Lab, e1LabUsed) <+ CJMP("nz", e2BeginLabel)]
                esac
            esac
        esac
      | DoWhile (e1, e2)   ->
        case genLabels(env, 3) of
          [e1BeginLabel, e1EndLabel, e2Lab, env] ->
            case compile(e1EndLabel, env, e1) of
              [e1EndLabelUsed, env, e1Code] ->
                case compile(e2Lab, env, e2) of
                  [e2LabUsed, env, e2Code] -> [false, env, singletonBuffer(LABEL(e1BeginLabel)) <+> e1Code <+> label(e1EndLabel, e1EndLabelUsed) <+> e2Code <+> label(e2Lab, e2LabUsed) <+ CJMP("nz", e1BeginLabel)]
                esac
            esac
        esac
      | _                  -> failure("Unexcepted expression %s\n", expr.string)
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, expr) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
       esac
  esac
}