-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case c of [stack, st, rw] ->
    case insns of 
        {} -> c
      | ins:inss -> case ins of 
            READ      -> case readWorld (rw) of 
              [res, rrw] -> eval ([res : c, st, rrw], inss) 
            esac
          | WRITE     -> case stack of 
                {}   -> failure ("can't write from empty stack") 
              | x:xs -> eval ([xs, st, writeWorld(x, rw)], inss)
            esac
          | BINOP (s) -> case stack of 
              y:(x:xs) -> case s of 
                  "+"  -> eval ([(x + y)  : xs, st, rw], inss)
                | "-"  -> eval ([(x - y)  : xs, st, rw], inss)
                | "*"  -> eval ([(x * y)  : xs, st, rw], inss)
                | "/"  -> eval ([(x / y)  : xs, st, rw], inss)
                | "%"  -> eval ([(x % y)  : xs, st, rw], inss)
                | "<"  -> eval ([(x < y)  : xs, st, rw], inss)
                | "<=" -> eval ([(x <= y) : xs, st, rw], inss)
                | ">"  -> eval ([(x > y)  : xs, st, rw], inss)
                | ">=" -> eval ([(x >= y) : xs, st, rw], inss)
                | "==" -> eval ([(x == y) : xs, st, rw], inss)
                | "!=" -> eval ([(x != y) : xs, st, rw], inss)
                | "&&" -> eval ([(x && y) : xs, st, rw], inss)
                | "!!" -> eval ([(x !! y) : xs, st, rw], inss)
              esac
            | _        -> failure ("can't take enough arguments from stack") 
            esac
          | LD    (x) -> eval ([(st (x)) : stack, st,rw], inss)
          | ST    (x) -> 
            case stack of
                {}   -> failure ("can't read from empty stack")
              | y:xs -> eval ([xs, st <- [x, y], rw], inss)
            esac
          | CONST (n) -> eval ([n:stack, st, rw], inss)
      esac
    esac
  esac
  -- failure ("SM eval not implemented\n")
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
      Var (v)            -> {LD (v)}
    | Const (v)          -> {CONST (v)}
    | Binop (op, lhs, rhs) -> compileExpr (lhs) +++ compileExpr (rhs) +++ {BINOP (op)}
  esac
  -- failure ("compileExpr not implemented\n")
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
      Skip             -> {}
    | Assn (v, expr) -> compileExpr(expr) +++ {ST (v)}
    | Write (expr)     -> compileExpr(expr) +++ {WRITE}
    | Read (v)       -> {READ, ST (v)}
    | Seq (l, r)       -> compileSM(l) +++ compileSM(r)
  esac
  -- failure ("compileSM not implemented\n")
}