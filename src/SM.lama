-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  -- Evaluates single stack machine instruction
  fun evalInsn (c@[s, st, w], insn) {
    case insn of
      JMP (l) -> [Some (env.fromLabel (l)), c]
    | CJMP (cond, l) -> case s of x:s ->
        var z = case cond of "z" -> 1 | "nz" -> 0 esac;
        if x == z
        then [None, [s, st, w]]
        else [Some (env.fromLabel (l)), [s, st, w]]
        fi
      esac
    | _ -> [None, case insn of
        BINOP (op) -> case s of y:x:s -> [evalOp (op, x, y) : s, st, w] esac
      | CONST (n)  -> [n:s, st, w]
      | READ       -> case readWorld (w) of [n, ww] -> [n:s, st, ww] esac
      | WRITE      -> case s of z:s -> [s, st, writeWorld (z, w)] esac
      | LD    (x)  -> [st (x) : s, st, w]
      | LDA   (x)  -> [Ref (x) : s, st, w]
      | ST    (x)  -> case s of z:s -> [s, st <- [x, z], w] esac
      | STI        -> case s of v:Ref (x):s -> [v:s, st <- [x, v], w] esac
      | LABEL (l)  -> c
      | DROP       -> case s of _:s -> [s, st, w] esac
      esac]
    esac
  }

  case insns of
    {} -> c
  | insn : insns ->
      case evalInsn (c, insn) of
        [None, c]         -> eval (env, c, insns)
      | [Some (insns), c] -> eval (env, c, insns)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Compile expression with its own label after.
  fun compileL (env, expr) {
    case env.genLabel of
      [lab, env] ->
        case compile (lab, env, expr) of
          [labUsed, env, code] -> [env, code <+> label (lab, labUsed)]
        esac
    esac
  }

  fun compileL2 (env, e1, e2) {
    case compileL (env, e1) of
      [env, code1] ->
        case compileL (env, e2) of
          [env, code2] -> [env, code1 <+> code2]
        esac
    esac
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)        ->
        case compileL (env, e) of
          [env, code] -> [false, env, code <+ DROP]
        esac
    | Read   (x)        ->
        case compileL (env, x) of
          [env, code] -> [false, env, code <+ READ <+ STI <+ DROP]
        esac
    | Write  (e)        ->
        case compileL (env, e) of
          [env, code] -> [false, env, code <+ WRITE]
        esac
    | Assn   (x, e)     ->
        case compileL2 (env, x, e) of
          [env, code] -> [false, env, code <+ STI]
        esac
    | Binop  (op, l, r) ->
        case compileL2 (env, l, r) of
          [env, code] -> [false, env, code <+ BINOP (op)]
        esac
    | Seq    (s1, s2)   ->
        case compileL (env, s1) of
          [env, code1] ->
            case compile (lab, env, s2) of
              [used, env, code2] -> [used, env, code1 <+> code2]
            esac
        esac
    | If     (c, t, e)  ->
        case env.genLabel of [elseLabel, env] ->
          case compileL (env, c) of [env, codeC] ->
            case compile (lab, env, t) of [_, env, codeT] ->
              case compile (lab, env, e) of [_, env, codeE] ->
                [true, env,
                  codeC
                    <+ CJMP ("z", elseLabel)
                    <+> codeT
                    <+ JMP (lab)
                    <+ LABEL (elseLabel)
                    <+> codeE]
              esac
            esac
          esac
        esac
    | While   (c, b)    ->
        case env.genLabels (2) of [condLabel, bodyLabel, env] ->
          case compileL (env, c) of [env, codeC] ->
            case compile (condLabel, env, b) of [_, env, codeB] ->
              [false, env,
                singletonBuffer (JMP (condLabel))
                  <+ LABEL (bodyLabel)
                  <+> codeB
                  <+ LABEL (condLabel)
                  <+> codeC
                  <+ CJMP ("nz", bodyLabel)]
            esac
          esac
        esac
    | DoWhile (s, c) -> compile (lab, env, Seq (s, While (c, s)))
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
       esac
  esac
}
