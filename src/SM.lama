-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun emptyStackError () {
  failure ("Trying to get value from empty stack")
}

fun getValueFromStack (st) {
  case st of
    []     -> emptyStackError ()
  | x : xs -> [x, xs]
  esac
}

fun evalInsn (c, i) {
  var stack = c[0];
  var state = c[1];
  var world = c[2];
  --printf ("%s %s\n", stack.string, i.string);
  case i of
    READ      -> 
      var value = readWorld (world);
      [value[0] : stack, state, value[1]]
  | WRITE     ->
      var value = getValueFromStack (stack);
      [value[1], state, writeWorld (value[0], world)]
  | BINOP (s) ->
      var st1 = getValueFromStack (stack);
      var st2 = getValueFromStack (st1[1]);
      var r = st1[0];
      var l = st2[0];
      var newStack = st2[1];
      [(evalBinop (s, l, r)) : newStack, state, world]
  | LD    (x) ->
      [(state (x)) : stack, state, world]
  | LDA   (x) ->
      [x : stack, state, world]
  | ST    (x) ->
      var value = getValueFromStack (stack);
      [value[1], state <- [x, value[0]], world]
  | STI       ->
      var st1 = getValueFromStack (stack);
      var st2 = getValueFromStack (st1[1]);
      [st1[0] : st2[1], state <- [st2[0], st1[0]], world]
  | CONST (n) ->
      [n : stack, state, world]
  | LABEL (l) -> c
  | DUP       ->
      var st = getValueFromStack (stack);
      [st[0] : st[0] : st[1], state, world]
  | DROP      ->
      var st = getValueFromStack (stack);
      [st[1], state, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    {}     -> c
  | x : xs -> 
    case x of
      JMP  (l)    -> 
      eval (env, c, env.fromLabel (l))
    | CJMP (s, l) -> 
      var r = getValueFromStack (c[0]);
      case [s, r[0]] of
          ["z",  0] -> eval (env, [r[1], c[1], c[2]], env.fromLabel (l))
        | ["z",  _] -> eval (env, [r[1], c[1], c[2]], xs)
        | ["nz", 0] -> eval (env, [r[1], c[1], c[2]], xs)
        | ["nz", _] -> eval (env, [r[1], c[1], c[2]], env.fromLabel (l))
      esac
    | _           ->
      eval (env, evalInsn (c, x), xs)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  (eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns))[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    --printf ("%s\n", stmt.string);
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Seq    (s1, s2)   ->
        case env.genLabel of
          [s2Lab, env]  ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | Read   (x)        -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write  (e)        -> 
        case env.genLabel of
          [eLab, env]   ->
            case compile (eLab, env, e) of
              [eLabUsed, env, eCode] ->
                [false, env, eCode <+> label (eLab, eLabUsed) <+ WRITE]
            esac
        esac
    | Ignore (e)        -> 
        case env.genLabel of
          [eLab, env]   ->
            case compile (eLab, env, e) of
              [eLabUsed, env, eCode] ->
                [false, env, eCode <+> label (eLab, eLabUsed) <+ DROP]
            esac
        esac
    | Assn   (xe, e)    ->
        case xe of
            Ref (x)     -> 
              case env.genLabel of
                [eLab, env]   ->
                  case compile (eLab, env, e) of
                    [eLabUsed, env, eCode] ->
                      [false, env, eCode <+> label (eLab, eLabUsed) <+ DUP <+ ST (x)]
                  esac
              esac
          | _ ->
            case genLabels (env, 2) of
              [xeLab, eLab, env]  ->
                case compile (xeLab, env, xe) of
                  [xeLabUsed, env, xeCode] ->
                      case compile (eLab, env, e) of
                        [eLabUsed, env, eCode] -> 
                          [false, env, xeCode <+> label (xeLab, xeLabUsed) <+> eCode <+> label (eLab, eLabUsed) <+ STI]
                      esac
                esac
            esac
        esac
    | Binop (op, l, r)  -> 
        case genLabels (env, 2) of
          [lLab, rLab, env]  ->
            case compile (lLab, env, l) of
              [lLabUsed, env, lCode] ->
                  case compile (rLab, env, r) of
                    [rLabUsed, env, rCode] -> 
                      [false, env, lCode <+> label (lLab, lLabUsed) <+> rCode <+> label (rLab, rLabUsed) <+ (BINOP (op))]
                  esac
            esac
        esac
    | While (e, s)   ->
      case genLabels (env, 3) of
        [labStart, labS, labE, env] -> 
          case compile (labE, env, e) of
          [labEUsed, env, eCode] ->
            case compile (labS, env, s) of
              [_, env, sCode] -> 
                [false, env, 
                  singletonBuffer (JMP (labS)) <+> 
                  label (labStart, true) <+> 
                  sCode <+> 
                  label (labS, true) <+> 
                  eCode <+>
                  label (labE, labEUsed) <+ 
                  CJMP ("nz", labStart)]
            esac
          esac
      esac
    | DoWhile (s, e) ->
      case genLabels (env, 3) of
        [labStart, labS, labE, env] -> 
          case compile (labE, env, e) of
          [labEUsed, env, eCode] ->
            case compile (labS, env, s) of
              [labSUsed, env, sCode] -> 
                [false, env,
                  label (labStart, true) <+> 
                  sCode <+> 
                  label (labS, labSUsed) <+> 
                  eCode <+> 
                  label (labE, labEUsed) <+ 
                  CJMP ("nz", labStart)]
            esac
          esac
      esac
    | If (e, s1, s2) ->
      case genLabels (env, 2) of
        [labE, labS1Start, env] ->
          case compile (labE, env, e) of
            [labEUsed, env, eCode] ->
              case compile (lab, env, s1) of
                [_, env, codeS1] ->
                  case compile (lab, env, s2) of
                    [_, env, codeS2] ->
                      [true, env,
                        eCode <+>
                        label (labE, labEUsed) <+
                        CJMP ("nz", labS1Start) <+>
                        codeS2 <+
                        JMP (lab) <+>
                        label (labS1Start, true) <+>
                        codeS1]
                  esac
              esac
          esac
      esac
    | _                 -> failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}