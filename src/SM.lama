-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
  case i of
    READ         -> sprintf("READ")
  | WRITE        -> sprintf("WRITE")
  | BINOP(s)    -> sprintf("BINOP %s", s)
  | LD   (x)    -> sprintf("LD %s", x)
  | ST   (x)    -> sprintf("ST %s", x)
  | CONST(n)    -> sprintf("CONST %d", n)
  | LABEL(s)    -> sprintf("LABEL %s", s)
  | JMP  (l)    -> sprintf("JMP %s", l)
  | CJMP (c, l) -> sprintf("CJMP %s, %s", c, l)
  esac
}

public fun showSM(prg) {
  map(fun(i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

fun evaluateInstruction([stack, state, world], command) {
  case command of
    CONST(value) -> [value:stack, state, world]
  | READ ->(
      var valueWorld = readWorld(world);
      var value = valueWorld.fst;
      var newWorld = valueWorld.snd;
      [value:stack, state, newWorld]
  )
  | WRITE ->(
      case stack of
        value:newStack -> [newStack, state, writeWorld(value, world)]
      | _ -> failure("evaluateInstruction/write: Empty stack")
      esac
  )
  | BINOP(operation) ->(
      case stack of
        r:l:rest ->(
          var value = calculateBinaryOperation(operation, l, r);
          [value:rest, state, world]
      )
      | _ -> failure("evaluateInstruction/binop: Insufficient operands")
      esac
  )
  | LD(variableName) -> [state(variableName):stack, state, world]
  | ST(variableName) ->(
    case stack of
      value:newStack -> [newStack, state <- [variableName, value], world]
    | _ -> failure("evaluateInstruction/st: Empty stack")
    esac
  )
  | LABEL(_) -> [stack, state, world]
  esac
}

-- Evaluation environment: keeps a mapping between labels and(sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun(rec) {
      fun([m, insns]) {
        case insns of
          {}               -> m
          | LABEL(lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun(l) {
     case findMap(map, l) of Some(insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env[0](lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, configuration@[stack, state, world], instructions) {
  case instructions of
    {} -> configuration
    | i:instructionTail ->
      case i of
        CJMP(fl, lab) ->
          case stack of
            value:stackTail -> eval(
              env,
              [stackTail, state, world],
              if value == fl
              then fromLabel(env, lab)
              else instructionTail
              fi
            )
          esac
        | JMP(lab) -> eval(env, configuration, fromLabel(env, lab))
        | _ -> eval(env, evaluateInstruction(configuration, i), instructionTail)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), [{}, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv(n) {
  [fun() {
     [sprintf("L%d", n), makeCompEnv(n + 1)]
  }]
}

fun initCompEnv() {
  makeCompEnv(0)
}

-- Accessor function: generates one label
fun genLabel(env) {
  env[0]()
}

-- Utility function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
    then { env }
    else case env.genLabel of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expression) {
  case expression of
    Var(variableName) -> singletonBuffer(LD(variableName))
  | Const(value) -> singletonBuffer(CONST(value))
  | Binop(operation, l, r) ->
    (compileExpr(l) <+> compileExpr(r)) <+(BINOP(operation))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label(lab, labUsed) {
    if labUsed
    then singletonBuffer(LABEL(lab))
    else emptyBuffer()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer
  fun compile(lab, env, stmt) {

    fun gengencomp(body, f) {
      case env.genLabel of
        [l1, env] -> case env.genLabel of
          [l2, env] -> case compile(l2, env, body) of
            [l3, env, code] -> f(l1, l2, l3, env, code)
          esac
        esac
      esac
    }

    case stmt of
      Skip        -> [false, env, emptyBuffer()]
    | Read(x)     -> [false, env, singletonBuffer(READ) <+ ST(x)]
    | Write(e)    -> [false, env, compileExpr(e) <+ WRITE]
    | Assn(x, e)  -> [false, env, compileExpr(e) <+ ST(x)]
    | Seq(s1, s2) ->
        case env.genLabel of
          [l1, env] -> case compile(l1, env, s1) of
            [l2, env, code1] -> case compile(lab, env, s2) of
              [l3, env, code2] -> [l3, env, code1 <+> label(l1, l2) <+> code2]
            esac
          esac
        esac
    | While(cond, body) -> gengencomp(body, fun(l1, l2, l3, env, code) {
        [
          true,
          env,
          LABEL(l1).singletonBuffer
          <+> compileExpr(cond)
          <+ CJMP(0, lab)
          <+> code
          <+> label(l2, l3)
          <+ JMP(l1)
        ]
      })
    | If(cond, thenBody, elseBody) -> gengencomp(thenBody, fun(l1, l2, l3, env, code1) {
        case compile(lab, env, elseBody) of
          [_, env, code2] ->
            [
              true,
              env,
              compileExpr(cond)
              <+ CJMP(0, l1)
              <+> code1
              <+> label(l2, l3)
              <+ JMP(lab)
              <+> LABEL(l1).singletonBuffer
              <+> code2
            ]
        esac
      })
    | DoWhile(body, cond) -> gengencomp(body, fun(l1, l2, l3, env, code) {
        [
          true,
          env,
          LABEL(l1).singletonBuffer
          <+> code
          <+> label(l2, l3)
          <+> compileExpr(cond)
          <+ CJMP(0, lab)
          <+ JMP(l1)
        ]
      })
    esac
  }

  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label(endLab, endLabUsed)
      esac
  esac
}
