-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, cStack, state, w], insns) {
  -- failure("%s\n", showSM(insns));
    case insns of
        {} -> c
      | i:is ->
        case i of
            READ -> case readWorld(w) of
              [n, w] -> eval([n:stack, cStack, state, w], is)
            esac
          | WRITE -> eval([tl(stack), cStack, state, writeWorld(hd(stack), w)], is)
          | BINOP (op) -> case stack of
              r : l : stack -> eval([evalOp(op, l, r):stack, cStack, state, w], is)
            esac
          | LD (x) -> eval ([lookup(state, x):stack, cStack, state, w], is)
          | LDA (x)   -> eval ([x:stack, cStack, state, w], is)
          | ST (x) -> assign(state, x, hd(stack)); eval ([tl(stack), cStack, state, w], is)
          | STI    -> case stack of
              v : x : stack -> assign(state, x, v); eval([v:stack, cStack, state, w], is)
            esac
          | CONST (n) -> eval ([n:stack, cStack, state, w], is)
          | LABEL (s) -> eval(c, is)
          | JMP (l)   -> eval(c, fromLabel(env, l))
          | CJMP (0, l) -> eval([tl(stack), cStack, state, w], if hd(stack) then is else fromLabel(env, l) fi)
          | DUP       -> eval([hd(stack):stack, cStack, state, w], is)
          | DROP      -> eval([tl(stack), cStack, state, w], is)
          | CALL (funLabel, nArgs) -> eval ([stack, [state, is] : cStack, state, w], fromLabel(env, funLabel))
          | BEGIN (funName, nArgs, nVars) -> case take(stack, nArgs) of
                          [stack, args] ->  
                            case foldl(fun ([state, nArgs], arg){ assign(state, Arg(nArgs), arg);[state, nArgs + 1]}, [makeState(nArgs, nVars), 0], args) of
                              [state, _] -> eval([stack, cStack, state, w], is)
                            esac
                        esac
          | END -> case cStack of 
                      {} -> c
                    | [state, is]:cStack -> eval([stack, cStack, state, w], is)
                   esac

          | GLOBAL (x) -> assign(state, Glb(x), 0); eval(c, is)
        esac
    esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun addDefs (env, defs) {
    fun newGlobals(env, gdefs, names) {
      if isGlobal(env) then
        foldl(fun(defs, name) {
          defs <+ GLOBAL (name)
        },
          gdefs,
          names)
        else
          gdefs
      fi
    }

    foldl(
      fun ([env, funs, globalDefs], def) {
        case def of
          Var(names) -> [addVars(env, names), funs, newGlobals(env, globalDefs, names)]
          | f@Fun(name, args, body) -> case genFunLabel(env, name) of
            [lab, env] -> [addFun(env, name, lab, size(args)), [lab, args, body]: funs, globalDefs]
          esac
        esac
      },
      [env, {}, emptyBuffer()],
      defs
    )
  }

  fun compile (lab, env, stmt) {
    -- failure("%s", stmt.string);
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read   (x)        -> [false, env, singletonBuffer(READ) <+ ST(lookupVar(env, x))]
    | Write  (e)        -> case genLabel(env) of
                              [eLab, env] ->
                                  case compile(eLab, env, e) of
                                    [eLabUsed, env, eCode] ->  [false, env, eCode <+> label(eLab, eLabUsed) <+ WRITE]
                                  esac
                           esac
    | Assn (e1, e2)     -> case genLabels(env, 2) of
                              [e2Lab, stiLab, env] ->
                                  case compile(stiLab, env, e2) of
                                    [stiLabUsed, env, eCode] ->
                                      case compile(e2Lab, env, e1) of
                                        [e2LabUsed, env, xCode] -> [false, env, xCode <+> label(e2Lab, e2LabUsed) <+> eCode <+> label(stiLab, stiLabUsed) <+ STI]
                                      esac
                                  esac
                           esac
    | Seq (e1, e2)      -> case genLabel(env) of
                              [e2Lab, env] ->
                                  case compile(e2Lab, env, e1) of
                                    [e2LabUsed, env, e1Code] ->
                                      case compile(lab, env, e2) of
                                        [labUsed, env, e2Code] -> [labUsed, env, e1Code <+> label(e2Lab, e2LabUsed) <+> e2Code]
                                      esac
                                  esac
                           esac
    | If (e, e1, e2)    -> case genLabels(env, 2) of
                              [e2Lab, e1Lab, env] ->
                                case compile(e1Lab, env, e) of
                                  [e1LabUsed, env, eCode] ->
                                    case compile(lab, env, e1) of
                                      [_, env, e1Code] ->
                                        case compile(lab, env, e2) of
                                          [_, env, e2Code] -> [true, env, eCode <+> label(e1Lab, e1LabUsed) <+ CJMP(0, e2Lab) <+>
                                                                          e1Code  <+ JMP(lab) <+>  label(e2Lab, true) <+> e2Code]
                                        esac
                                    esac
                                esac
                           esac
    | While (e, e1)    -> case genLabels(env, 2) of
                              [e1Lab, eLab, env] ->
                                case compile(e1Lab, env, e) of
                                  [e1LabUsed, env, eCode] ->
                                    case compile(eLab, env, e1) of
                                      [_, env, e1Code] -> [true, env, label(eLab, true) <+> eCode <+> label(e1Lab, e1LabUsed) <+
                                                                      CJMP(0, lab) <+> e1Code <+ JMP(eLab)]
                                    esac
                                esac
                          esac
    | DoWhile (e1, e)  -> case genLabels(env, 3) of
                              [eLab, e1Lab, endLab, env] ->
                                case compile(endLab, env, e) of
                                  [endLabUsed, env, eCode] ->
                                    case compile(eLab, env, e1) of
                                      [eLabUsed, env, e1Code] -> [true, env, label (e1Lab, true) <+> e1Code <+> label(eLab, eLabUsed) <+>
                                                                             eCode <+> label(endLab, endLabUsed) <+ CJMP(0, lab) <+ JMP(e1Lab)]
                                    esac
                                esac
                          esac
    | Ignore (e)       -> case genLabel(env) of
                              [eLab, env] ->
                                case compile(eLab, env, e) of
                                  [eLabUsed, env, eCode] -> [false, env, eCode <+> label(eLab, eLabUsed) <+ DROP]
                                esac
                          esac
    | Binop (op, l, r) -> case genLabels(env, 2) of
                              [rLab, opLab, env] ->
                                case compile(rLab, env, l) of
                                  [rLabUsed, env, lCode] ->
                                    case compile(opLab, env, r) of
                                      [opLabUsed, env, rCode] -> [false, env, lCode <+> label(rLab, rLabUsed) <+>
                                                                              rCode <+> label(opLab, opLabUsed) <+ BINOP(op)]
                                    esac
                                esac
                          esac
    | Scope (defs, expr) -> case beginScope(env) of
                              env -> case addDefs(env, defs) of
                                [env, funs, globals] -> 
                                case foldl(fun(env, f) {
                                    case f of
                                      [lab, args, body] -> rememberFun(env, lab, args, body)
                                    esac}, env, funs) of
                                      env -> case compile(lab, env, expr) of
                                              [used, env, code] -> [used, leaveScope(env), globals <+> code]
                                             esac
                                esac
                              esac
                            esac

    | Call(name, args) ->
        case genLabel(env) of
          [argsLabel, env] ->
            case compile(argsLabel, env, foldl(fun (expr, arg) {Seq(expr, arg) }, Skip, args)) of
              [argsLabelUsed, env, argsCode] ->
                case lookupFun(env, name) of
                  Fun (funLabel, nArgs) ->
                    [false, env, argsCode <+> label(argsLabel, argsLabelUsed) <+ CALL(funLabel, nArgs)]
                esac
            esac
        esac
    esac
  }

  fun compileFunctions(env, code) {
    fun compileFun (env, f@Fun(funLabel, args, body, state)) {
      case genLabel(addArgs(beginFun(env, state), args)) of 
        [l, env] -> 
          case compile(l, env, body) of 
            [lUsed, env, bodyCode] -> 
              compileFunctions(env, singletonBuffer(LABEL(funLabel)) <+ BEGIN(funLabel, size(args), getLocals(env))
                                                                      <+> bodyCode <+> label(l, lUsed) <+ END)
          esac
      esac
    }

    case getFuns(env) of 
      [funs, env] -> foldl( fun (code, f) {code <+> compileFun(env, f)}, code, funs)
    esac
  }

  case genLabel(initCompEnv()) of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> 
          var main =  singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env)) <+> code <+> label(endLab, endLabUsed) <+ END;
          -- failure("aboba");
          getBuffer $ compileFunctions(env, main)
       esac
  esac
}
