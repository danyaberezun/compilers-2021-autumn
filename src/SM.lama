-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun eval (c@[st, cst, s, w], insns) {
    case insns of 
      {} -> c 
      | i : insns_ -> 
        -- printf("\n%s\n", showSMInsn(i));
        case i of 
          READ -> eval(case readWorld (w) of [x, w] -> [x : st, cst, s, w] esac, insns_)
          | WRITE -> eval(case st of (x : st_) -> [st_, cst, s, writeWorld(x, w)] esac, insns_)
          | BINOP (op) -> eval(case st of (y : x : st_) -> [evalOp(op, x, y) : st_, cst, s, w] esac, insns_)
          | LD (x) -> eval([lookup(s, x) : st, cst, s, w], insns_)
          | LDA (x) -> eval([x : st, cst, s, w], insns_)
          | ST (x) -> case st of (st_val : st_) -> assign(s, x, st_val); eval([st_val:st_, cst, s, w], insns_) esac
          | CONST (n) -> eval([n:st, cst, s, w], insns_)
          | LABEL (_) -> eval(c, insns_) 
          | JMP (label) -> eval(c, fromLabel(env, label))
          | CJMP (cond, label) -> case st of 
              cv : st_ -> case cond of 
                "z" -> eval([st_, cst, s, w], if cv == 0 then fromLabel(env, label) else insns_ fi)
                | _ -> eval([st_, cst, s, w], if cv == 0 then insns_ else fromLabel(env, label) fi)
              esac 
            esac
          | CALL (f, _) -> eval([st, [s, insns_]:cst, s, w], fromLabel(env, f))
          | BEGIN (f, a, l) -> case take(st, a) of 
              [st_, args] -> var snew = makeState(a, l); foldl(fun (acc, x) { assign(snew, Arg (acc), x); acc + 1 }, 0, args); eval([st_, cst, snew, w], insns_) 
            esac 
          | GLOBAL (x) -> assign(s, Glb(x), 0); eval([st, cst, s, w], insns_)
          | END -> case cst of 
              {} -> c 
              | [ps, pinsn_] : cst_ -> eval([st, cst_, ps, w], pinsn_)
            esac
          | DROP -> case st of (_:st_) -> eval([st_, cst, s, w], insns_) esac
          | STRING (str_) -> eval([str_:st, cst, s, w], insns_)
          | ARRAY (n) -> case take(st, n) of 
              [st_, arr] -> eval([listArray(arr):st_, cst, s, w], insns_)
            esac
          | SEXP (name, n) -> case take(st, n) of 
              [st_, vals] -> eval([Sexp(name, listArray(vals)):st_, cst, s, w], insns_)
            esac
          | STA -> case st of 
              (v : ind : x : st_) -> if ind == x then
                assign(s, x, v); eval([v : st_, cst, s, w], insns_)
              else 
                case x of
                  Sexp (_, vals) -> vals[ind] := v; eval([v:st_, cst, s, w], insns_)
                  | _ -> x[ind] := v; eval([v:st_, cst, s, w], insns_)
                esac
              fi
            esac 
          | ELEM -> case st of 
              (ind : arr : st_) -> case arr of 
                Sexp (_, vals) -> eval([vals[ind]:st_, cst, s, w], insns_)
                | _ -> eval([arr[ind]:st_, cst, s, w], insns_)
              esac
            esac
          | BUILTIN (f, n) -> case take(st, n) of 
              [st_, args] -> case evalBuiltin(f, args, w) of 
                [res, w] -> eval([res:st_, cst, s, w], insns_)
              esac  
            esac
        esac
    esac
  }
  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- printf("%s\n", showSM(insns));
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun traverseAdd(env, defs) {
    foldl(fun ([code, env], def) {
      case def of 
        Var (vars) -> var nenv = addVars(env, vars); if isGlobal(nenv) then 
            [foldl(fun (code, var_) { code <+ GLOBAL (var_) }, code, vars), nenv]
          else 
            [code, nenv]
          fi
        | Fun (name, args, body) -> case genFunLabel(env, name) of 
            [fLabel, env] -> [code, addFun(env, name, fLabel, size(args))]
          esac
      esac
    }, [emptyBuffer(), env], defs)
  }

  fun traverseRemember(env, defs) {
    foldl(fun (env, def) {
      case def of  
        Fun (name, args, body) -> case lookupFun(env, name) of 
            Fun(fLabel, _) -> rememberFun(env, fLabel, args, body)
          esac 
        | _ -> env
      esac
    }, env, defs)
  }

  fun compileFunsOneStep(env, funs) {
    foldl(fun ([code, env],  Fun (fLabel, args, body, state)) { 
      case genLabel(addArgs(beginFun(env, state), args)) of 
        [fEndLabel, env] -> case compile(fEndLabel, env, body) of
          [fEndLabelUsed, env, fCode] -> [code <+ LABEL (fLabel) <+ BEGIN (fLabel, size(args), getLocals(env)) <+> fCode <+> label(fEndLabel, fEndLabelUsed) <+ END, leaveScope(env)]
        esac 
      esac 
    }, [emptyBuffer(), env], funs)
  }

  fun compileFuns(env) {
    case getFuns(env) of 
      [{}, env] -> [emptyBuffer(), env] 
      | [funs, env] -> case compileFunsOneStep(env, funs) of 
          [f_code, env] -> case compileFuns(env) of 
            [nf_code, env] -> [f_code <+> nf_code, env]
          esac 
        esac
    esac        
  } 

  fun compileList(lab, env, args_epxrs) {
    compile(lab, env, foldr(fun (acc, arg) { Seq(arg, acc) }, Skip, args_epxrs))
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip               -> [false, env, emptyBuffer ()]
    | Var    (x)         -> [false, env, singletonBuffer (LD (lookupVal(env, x)))]
    | Ref    (x)         -> var ref = lookupVal(env, x); [false, env, singletonBuffer (LDA (ref)) <+ LDA(ref)]
    | Const  (n)         -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)         -> case compile(lab, env, e) of 
        [flag, env, code] -> [flag, env, code <+ DROP]
      esac
    | Assn  (x, e)       -> case genLabels(env, 2) of 
      [xLabel, eLabel, env] -> case compile(xLabel, env, x) of 
        [xLabelUsed, env, x_code] -> case compile(eLabel, env, e) of 
          [eLabelUsed, env, e_code] -> [false, env, x_code <+> label (xLabel, xLabelUsed) <+> e_code <+> label (eLabel, eLabelUsed) <+ STA]
          esac 
        esac
      esac
    | Binop (op, s1, s2) -> case genLabels(env, 2) of 
      [s1Label, s2Label, env] -> case compile(s1Label, env, s1) of 
          [s1LabelUsed, env, code_s1] -> case compile(s2Label, env, s2) of 
            [s2LabelUsed, env, code_s2] -> [false, env, code_s1 <+> label (s1Label, s1LabelUsed) <+> code_s2 <+> label (s2Label, s2LabelUsed) <+ BINOP (op)]
          esac 
        esac 
      esac
    | Seq (s1, s2)       -> case genLabel(env) of
        [s2Lab, env] ->
            case compile (s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile (lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
      esac
    | DoWhile (body, cond) -> case genLabels(env, 3) of 
        [condLabel, bodyLabel, condCalcLabel, env] -> 
          case compile(condCalcLabel, env, cond) of 
            [condCalcLabelUsed, env, condCode] -> case compile(condLabel, env, body) of 
              [_, env, bodyCode] -> [false, env, singletonBuffer (LABEL(bodyLabel)) <+> bodyCode <+ LABEL(condLabel) <+> condCode <+> label(condCalcLabel, condCalcLabelUsed)  <+ CJMP("nz", bodyLabel)]
            esac
          esac 
      esac
    | While (cond, body) -> case genLabels(env, 3) of 
        [condLabel, bodyLabel, condCalcLabel, env] -> 
          case compile(condCalcLabel, env, cond) of 
            [condCalcLabelUsed, env, condCode] -> case compile(condLabel, env, body) of 
              [_, env, bodyCode] -> [false, env, singletonBuffer (JMP(condLabel)) <+ LABEL(bodyLabel) <+> bodyCode <+ LABEL(condLabel) <+> condCode <+> label(condCalcLabel, condCalcLabelUsed) <+ CJMP("nz", bodyLabel)]
            esac 
          esac
      esac
    | If (cond, thenExpr, elseExpr) -> case genLabels(env, 3) of 
        [thenEndLabel, elseLabel, condCalcLabel, env] -> 
        case compile(condCalcLabel, env, cond) of 
            [condCalcLabelUsed, env, condCode] -> case compile(thenEndLabel, env, thenExpr) of 
              [thenLabelUsed, env, thenCode] -> 
                case compile(lab, env, elseExpr) of 
                  [_, env, elseCode] -> [true, env, condCode <+> label(condCalcLabel, condCalcLabelUsed) <+ CJMP("z", elseLabel) <+> thenCode <+> label(thenEndLabel, thenLabelUsed) <+ JMP(lab) <+ LABEL(elseLabel) <+> elseCode]
                esac
            esac
          esac
      esac
    | Call (f, args_epxr) -> case genLabel(env) of  
        [fCallLabel, env] -> case lookupFun(env, f) of 
          Fun (fLabel, an) -> case compileList(fCallLabel, env, args_epxr) of 
            [fCallLabelUsed, env, code] -> case fLabel[0] of 
              '$' -> [false, env, code <+> label(fCallLabel, fCallLabelUsed) <+ BUILTIN (f, an)]
              | _ -> [false, env, code <+> label(fCallLabel, fCallLabelUsed) <+ CALL(fLabel, an)]
            esac
          esac 
        esac
      esac
    | Scope (defs, expr) -> case traverseAdd(beginScope(env), defs) of 
        [init_code, env] -> case genLabel(traverseRemember(env, defs)) of 
          [scopeEndLabel, env] -> case compile(scopeEndLabel, env, expr) of 
            [scopeEndLabelUsed, env, code] -> 
              [false, leaveScope(env), init_code <+> code <+> label(scopeEndLabel, scopeEndLabelUsed)]
            esac
          esac 
        esac
    | String (s) -> [false, env, singletonBuffer(STRING(s))]
    | Array (vals_list) -> case genLabel(env) of 
        [arrayInitLabel, env] -> case compileList(arrayInitLabel, env, vals_list) of 
          [arrayInitLabelUsed, env, code] -> [false, env, code <+> label(arrayInitLabelUsed, arrayInitLabelUsed) <+ ARRAY (vals_list.size)]
        esac 
      esac
    | Set (x, e) -> case genLabel(env) of 
        [eLabel, env] -> case compile(eLabel, env, e) of 
          [eLabelUsed, env, code] -> case lookupVal(env, x) of 
            x -> [false, env, code <+> label(eLabel, eLabelUsed) <+ ST (x)]
          esac 
        esac
      esac
    | Sexp (name, vals_list) -> case genLabel(env) of 
        [sexpInitLabel, env] -> case compileList(sexpInitLabel, env, vals_list) of 
          [sexpInitLabelUsed, env, code] -> [false, env, code <+> label(sexpInitLabel, sexpInitLabelUsed) <+ SEXP (name, vals_list.size)]
        esac 
      esac 
    | Elem (arr_expr, ind_expr) -> case genLabels(env, 2) of 
        [arrLabel, indLabel, env] -> case compile(arrLabel, env, arr_expr) of 
          [arrLabelUsed, env, arr_code] -> case compile(indLabel, env, ind_expr) of 
            [indLabelUsed, env, ind_code] -> [false, env, arr_code <+> label(arrLabel, arrLabelUsed) <+> ind_code <+> label(indLabel, indLabelUsed) <+ ELEM]
          esac 
        esac
      esac
    | ElemRef (arr_expr, ind_expr) -> case genLabels(env, 2) of 
        [arrLabel, indLabel, env] -> case compile(arrLabel, env, arr_expr) of 
          [arrLabelUsed, env, arr_code] -> case compile(indLabel, env, ind_expr) of 
            [indLabelUsed, env, ind_code] -> [false, env, arr_code <+> label(arrLabel, arrLabelUsed) <+> ind_code <+> label(indLabel, indLabelUsed)]
          esac 
        esac
      esac
    esac
  }

  fun addGlobalScope(expr) {
    case expr of 
      Scope(_, _) -> expr 
      | _ -> Scope({}, expr)
    esac 
  }

  fun compileWithMain (endLab, env, expr) {
    case compile(endLab, env, addGlobalScope(expr)) of 
      [_, env, code] -> case compileFuns(env) of 
        [funs_code, env] -> [false, env, singletonBuffer(BEGIN("main", 0, getLocals(env))) <+> code <+ END <+> funs_code]
      esac 
    esac 
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compileWithMain (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}