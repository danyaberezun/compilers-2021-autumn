-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
  case i of
    READ -> sprintf("READ")
    | WRITE -> sprintf("WRITE")
    | BINOP (s) -> sprintf("BINOP %s", s)
    | LD    (x) -> sprintf("LD %s", x)
    | ST    (x) -> sprintf("ST %s", x)
    | CONST (n) -> sprintf("CONST %d", n)
    | LABEL (s) -> sprintf("LABEL %s", s)
    | JMP   (l) -> sprintf("JMP %s", l)
    | CJMP  (c, l) -> sprintf("CJMP %s, %s", c, l)
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
          { } -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}


fun evalInstraction([stack, state, world], instraction) {
  case instraction of
    WRITE -> fun (value : tail) { [tail, state, writeWorld(value, world)] }(stack)
    | CONST (value) -> [value:stack, state, world]
    | BINOP (op) -> fun (right : left : tail) { [evalBinaryOperation(op, left, right):tail, state, world] }(stack)
    | LD (name) -> [state(name):stack, state, world]
    | ST (name) -> fun (value : tail) { [tail, state <- [name, value], world] }(stack)
    | READ -> fun ([value, newWorld]) { [value:stack, state, newWorld] }(readWorld(world))
    | LABEL (_) -> [stack, state, world]
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c@[stack, state, world], instractions) {
  case instractions of
    { } -> c
    | i : tail ->
      case i of
        CJMP (fl, lab) ->
          case stack of
            value : sTail -> eval(env, [sTail, state, world], if value == fl then fromLabel(env, lab) else tail fi)
          esac
        | JMP (lab) -> eval(env, c, fromLabel(env, lab))
        | _ -> eval(env, evalInstraction(c, i), tail)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), [{ }, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv(n) {
  [fun () {
    [sprintf("L%d", n), makeCompEnv(n + 1)]
  }]
}

fun initCompEnv() {
  makeCompEnv(0)
}

-- Accessor function: generates one label
fun genLabel(env) {
  env [0]()
}

-- Utility function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case env.genLabel of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expr) {
  case expr of
    Var(name) -> LD(name).singletonBuffer
    | Const(value) -> CONST(value).singletonBuffer
    | Binop(op, left, right) -> compileExpr(left) <+> compileExpr(right) <+ BINOP(op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
-- Generates a buffer with an optional label
--    lab     --- the name of the label
--    labUsed --- a flag if the lebel is needed
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer
  fun compile(lab, env, stmt) {
    case stmt of
      Skip -> [false, env, emptyBuffer()]
      | Read  (x) -> [false, env, singletonBuffer(READ) <+ ST(x)]
      | Write (e) -> [false, env, compileExpr(e) <+ WRITE]
      | Assn  (x, e) -> [false, env, compileExpr(e) <+ ST(x)]
      | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | While (cond, body) ->
        case env.genLabel of
          [l1, env] ->
            case env.genLabel of [l2, env] ->
              case compile(l2, env, body) of
                [l2Used, env, code] ->
                  [true, env, LABEL(l1).singletonBuffer <+> compileExpr(cond) <+ CJMP(0, lab) <+> code <+> label(l2, l2Used) <+ JMP(l1)]
              esac
            esac
        esac
      | If (cond, ifTrue, ifFalse) ->
        case env.genLabel of
          [eL, env] ->
            case env.genLabel of [l1, env] ->
              case compile(l1, env, ifTrue) of
                [l1Used, env, codeT] ->
                  case compile(lab, env, ifFalse) of
                    [_, env, codeF] -> [true, env, compileExpr(cond) <+ CJMP(0, eL) <+> codeT <+> label(l1, l1Used) <+ JMP(lab) <+> LABEL(eL).singletonBuffer <+> codeF]
                  esac
              esac
            esac
        esac
      | DoWhile (body, cond) ->
        case env.genLabel of
          [l1, env] ->
            case env.genLabel of
              [l2, env] ->
                case compile(l2, env, body) of
                  [l2Used, env, code] ->
                    [true, env, LABEL(l1).singletonBuffer <+> code <+> label(l2, l2Used) <+> compileExpr(cond) <+ CJMP(0, lab) <+ JMP(l1)]
                esac
            esac
        esac
    esac
  }

  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label(endLab, endLabUsed)
      esac
  esac
}
