-- Stack machine. 

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
<<<<<<< HEAD
fun eval (env, c, insns) {
  failure ("SM eval not implemented\n")
=======
fun eval (c, insns) {
foldl (evalInsn, c, insns)
}

fun evalInsn(c, insn) {
case insn of
Read -> (
var newWorld = readWorld(c[2]);
[newWorld[0] : c[0], c[1], newWorld[1]]
) |

Write -> [c[0].tl, c[1], writeWorld (c[0].hd, c[2])] |

Binop (s) -> [evalOp (s, c[0].tl.hd, c[0].hd) : c[0].tl.tl, c[1], c[2]] |
LD (x) -> [c[1] (x) : c[0], c[1], c[2]] |

ST (x) -> [c[0].tl, c[1] <- [x,c[0].hd], c[2]] |
Const (n) -> [n : c[0], c[1], c[2]]
esac
>>>>>>> origin/A04-straight-show-int
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  getBuffer (compileExprForBuffer (expr))
}

fun compileExprForBuffer (expr) {
  case expr of
    Var (v)   -> singletonBuffer (LD (v))
  | Const (c) -> singletonBuffer (Const (c))
  | Binop (s, e1, e2) -> compileExprForBuffer (e1) <+> compileExprForBuffer (e2) <+> singletonBuffer (Binop (s))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (compileSMForBuffer (stmt))
}

public fun compileSMForBuffer (stmt) {
  case stmt of
    Assn (s, e) -> compileExprForBuffer (e) <+> singletonBuffer (ST (s))
  | Seq (st1, st2) -> compileSMForBuffer (st1) <+> compileSMForBuffer (st2)
  | Skip -> emptyBuffer ()
  | Read (s)  -> singletonBuffer (Read) <+> singletonBuffer (ST (s))
  | Write (e) -> compileExprForBuffer (e) <+> singletonBuffer (Write)
  esac
}