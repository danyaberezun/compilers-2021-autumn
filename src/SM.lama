-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun stepInsns (env, [stack, state, w], insn) {
  case insn of
    READ       -> case readWorld(w) of
                    [v, new_w] -> [v : stack, state, new_w]
                  esac
  | WRITE      -> case stack of
                    v:tail -> [tail, state, writeWorld(v, w)]
                  esac
  | BINOP(op)  -> case stack of
                    rhs: lhs: tail -> [evalBinop(op, lhs, rhs) : tail, state, w]
                  esac
  | LD(x)      -> [state(x) : stack, state, w]
  | ST(x)      -> case stack of
                    v: tail -> [tail, state <- [x, v], w]
                  esac
  | CONST(n)   -> [n : stack, state, w]
  | LABEL(s)   -> [stack, state, w]
  | JMP(l)     -> [[stack, state, w], fromLabel(env, l)]
  | CJMP(c, l) -> case stack of
                    x:xs -> case c of
                      "z" -> if (x == 0) then
                                [[xs, state, w], fromLabel(env, l)]
                            else 
                              [xs, state, w]       
                            fi
                      |"nz" -> if (x != 0) then
                                [[xs, state, w], fromLabel(env, l)]
                            else 
                              [xs, state, w]      
                            fi  
                            esac
                  esac                            
  esac
}
fun eval (env, c, insns) {
  case insns of
    {}     -> c
  | x : xs ->   case stepInsns (env, c, x) of
       c@[_, _, _] -> eval (env, c, xs)
    | [c@[_, _, _], insns] -> eval (env, c, insns)
                esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
    case expr of
    Var (x) -> emptyBuffer () <+ LD (x)
  | Const (n) -> emptyBuffer () <+ CONST (n)
  | Binop (op, l, r) -> compileExpr(l) <+> compileExpr(r) <+ BINOP(op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  condition
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If(expr, stmt1, stmt2) -> case env.genLabel of 
                                  [elseLab, env] -> case env.genLabel of
                                                    [afterLab, env] -> case compile(elseLab, env, stmt1) of 
                                                      [flag, env, stmt1Code] -> case compile(afterLab, env, stmt2) of
                                                        [flag2, env, stmt2Code] -> [flag2, env, compileExpr(expr) <+ CJMP("z", elseLab) 
                                                                                        <+> stmt1Code <+ JMP(afterLab) <+ LABEL(elseLab) 
                                                                                        <+> stmt2Code <+ LABEL(afterLab)]
                                                                                      esac
                                                                          esac
                                                    esac
                                esac
    | While(expr, stmt) -> case env.genLabel of 
                            [entryLab, env] -> case env.genLabel of 
                              [breakLab, env] -> case compile(breakLab, env, stmt) of
                                                  [flag, env, code] -> [flag, env, emptyBuffer() <+ LABEL(entryLab) 
                                                                        <+> compileExpr(expr) <+ CJMP("z", breakLab) 
                                                                        <+> code <+ JMP(entryLab) <+ LABEL(breakLab)]
                                                  esac
                                              esac
                          esac
    | DoWhile (stmt, expr) -> case env.genLabel of
                            [entryLab, env] -> case compile(entryLab, env, stmt) of
                                [flag, env, code] -> [flag, env, emptyBuffer() <+ LABEL(entryLab) <+> code <+> compileExpr(expr) <+ CJMP("nz", entryLab)]
            esac
        esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
