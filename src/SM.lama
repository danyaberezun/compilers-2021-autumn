-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case c of [stack, state, [input, output]] ->
    case insns of
        {} -> c
      | READ : insns -> eval (
          case input of v : input ->
            [v : stack, state, [input, output]]
          esac,
          insns
        )
      | WRITE : insns -> eval (
          case stack of v : stack ->
            [stack, state, [input, v : output]]
          esac,
          insns
        )
      | BINOP (op) : insns -> eval (
          case stack of v2 : v1 : stack ->
            case op of
                "+"  -> [(v1 + v2) : stack, state, [input, output]]
              | "-"  -> [(v1 - v2) : stack, state, [input, output]]
              | "*"  -> [(v1 * v2) : stack, state, [input, output]]
              | "/"  -> [(v1 / v2) : stack, state, [input, output]]
              | "%"  -> [(v1 % v2) : stack, state, [input, output]]
              | "<"  -> [(v1 < v2) : stack, state, [input, output]]
              | "<=" -> [(v1 <= v2) : stack, state, [input, output]]
              | ">"  -> [(v1 > v2) : stack, state, [input, output]]
              | ">=" -> [(v1 >= v2) : stack, state, [input, output]]
              | "==" -> [(v1 == v2) : stack, state, [input, output]]
              | "!=" -> [(v1 != v2) : stack, state, [input, output]]
              | "&&" -> [(v1 && v2) : stack, state, [input, output]]
              | "!!" -> [(v1 !! v2) : stack, state, [input, output]]
            esac
          esac,
          insns
        )
      | LD (x) : insns -> eval (
          [state (x) : stack, state, [input, output]],
          insns
        )
      | ST (x) : insns -> eval (
          case stack of v : stack ->
            [stack, state <- [x, v], [input, output]]
          esac,
          insns
        )
      | CONST (n) : insns -> eval (
          [n : stack, state, [input, output]],
          insns
        )
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (x) -> LD (x) : {}
    | Const (n) -> CONST (n) : {}
    | Binop (op, e1, e2) -> (
      var sm1 = compileExpr (e1);
      var sm2 = compileExpr (e2);
      case op of
          "+"  -> sm1 +++ sm2 +++ (BINOP ("+") : {})
        | "-"  -> sm1 +++ sm2 +++ (BINOP ("-") : {})
        | "*"  -> sm1 +++ sm2 +++ (BINOP ("*") : {})
        | "/"  -> sm1 +++ sm2 +++ (BINOP ("/") : {})
        | "%"  -> sm1 +++ sm2 +++ (BINOP ("%") : {})
        | "<"  -> sm1 +++ sm2 +++ (BINOP ("<") : {})
        | "<=" -> sm1 +++ sm2 +++ (BINOP ("<=") : {})
        | ">"  -> sm1 +++ sm2 +++ (BINOP (">") : {})
        | ">=" -> sm1 +++ sm2 +++ (BINOP (">=") : {})
        | "==" -> sm1 +++ sm2 +++ (BINOP ("==") : {})
        | "!=" -> sm1 +++ sm2 +++ (BINOP ("!=") : {})
        | "&&" -> sm1 +++ sm2 +++ (BINOP ("&&") : {})
        | "!!" -> sm1 +++ sm2 +++ (BINOP ("!!") : {})
      esac
    )
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (x, e) -> compileExpr (e) +++ (ST (x) : {})
    | Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
    | Skip -> {}
    | Read (x) ->  READ : ST (x) : {}
    | Write (e) -> compileExpr (e) +++ (WRITE : {})
  esac
}
