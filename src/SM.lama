-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  fun makeStateFromArgs (args, l) {
    [listArray (args), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    | _ -> failure("Invalid loc: " ++ string (loc))
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      {} -> c
    | i : insns ->
      case s of
        [args, locs] -> skip
      | _ -> failure(string(i))
      esac;
      case i of
        JMP (lab) -> eval (c, fromLabel(env, lab))
      | CJMP (cond, lab) ->
        case st of n : st ->
          if (cond.compare("e") == 0) == (n == 0)
          then eval ([st, cst, s, w], fromLabel(env, lab))
          else eval ([st, cst, s, w], insns) fi
        esac
      | CALL (lab, n) ->
        cst := [s, insns] : cst;
        insns := fromLabel(env, lab);
        eval ([st, cst, s, w], insns)
      | END ->
        case cst of
          {} -> [st, cst, s, w] -- end of main
        | [s, insns] : cst -> eval([st, cst, s, w], insns)
        esac
      | _ ->
        eval (
          case i of
            READ -> case readWorld (w) of [n, w] -> [n : st, cst, s, w] esac
          | WRITE -> case st of n : st -> [st, cst, s, writeWorld (n, w)] esac
          | BINOP (op) -> case st of y : x : st -> [evalOp (op, x, y) : st, cst, s, w] esac
          | CONST (n) -> [n : st, cst, s, w]
          | LD (x) -> [lookup (s, x) : st, cst, s, w]
          | LDA (x) -> [x : st, cst, s, w]
          | ST (x) ->
            case st of n : st ->
              assign(s, x, n);
              [st, cst, s, w]
            esac
          | STI ->
            case st of
              x : n : st ->
                assign(s, x, n);
                [st, cst, s, w]
            esac
          | LABEL (_) -> c
          | DUP -> case st of n : st -> [n : n : st, cst, s, w] esac
          | DROP -> case st of n : st -> [st, cst, s, w] esac
          | GLOBAL (x) ->
            assign(s, Glb (x), 0);
            [st, cst, s, w]
          | BEGIN (x, na, nl) ->
            case take(st, na) of
              [st, args] ->
                s := makeStateFromArgs(args, nl);
                [st, cst, s, w]
            esac
          esac,
          insns)
      esac
    esac
  }
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileWhile (env, e, s, isDoWhile) {
    case genLabels(env, 3) of
      [le, ls, lj, env] ->
        case compile (le, env, s) of
          [_, env, sCode] ->
            case compile (lj, env, e) of
              [ljUsed, env, eCode] ->
                [env, if isDoWhile then emptyBuffer() else singletonBuffer(JMP (le)) fi
                  <+ LABEL (ls)
                  <+> sCode
                  <+ LABEL (le)
                  <+> eCode
                  <+> label (lj, ljUsed)
                  <+ CJMP ("ne", ls)]
          esac
        esac
    esac
  }

  fun compileWithLabel (env, s) {
    case env.genLabel of
      [sLab, env] ->
        case compile (sLab, env, s) of
          [sLabUsed, env, sCode] -> [env, sCode <+> label (sLab, sLabUsed)]
        esac
    esac
  }

  fun compileList (env, stmts) {
    fun f ([env, code], s) {
      case compileWithLabel(env, s) of
        [env, sCode] -> [env, code <+> sCode]
      esac
    }
    foldl (f, [env, emptyBuffer()], stmts)
  }

  fun getGlobals (env, defs) {
    if isGlobal(env) then
      foldl(fun(code, def) {
        case def of
          Var (names) -> foldl(fun (code, name) {code <+ GLOBAL (name)}, code, names)
        | _ -> code
        esac
      }, emptyBuffer(), defs)
    else emptyBuffer() fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Binop (s, l, r)   ->
      case compileWithLabel (env, l) of
        [env, lCode] ->
          case compileWithLabel(env, r) of
            [env, rCode] -> [false, env, lCode <+> rCode <+ BINOP (s)]
          esac
      esac
    | Read   (x)        -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x))]
    | Write  (e)        -> case compileWithLabel (env, e) of [env, code] -> [false, env, code <+ WRITE] esac
    | Assn (x, e) ->
      case compileWithLabel (env, x) of
        [env, xCode] ->
          case compileWithLabel(env, e) of
            [env, eCode] -> [false, env, eCode <+ DUP <+> xCode <+ STI]
          esac
      esac
    | Seq (s1, s2) ->
      case compileWithLabel (env, s1) of
        [env, s1Code] ->
          case compile (lab, env, s2) of
            [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> s2Code]
          esac
      esac
    | If (e, s1, s2) ->
      case compileWithLabel(env, e) of
        [env, eCode] ->
          case env.genLabel of
            [elseLab, env] ->
              case compile (lab, env, s1) of
                [_, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [_, env, s2Code] ->
                      [true, env, eCode <+ CJMP("e", elseLab) <+> s1Code <+ JMP (lab) <+ LABEL (elseLab) <+> s2Code]
                  esac
              esac
          esac
      esac
    | While   (e, s) -> case compileWhile(env, e, s, false) of [env, code] -> [false, env, code] esac
    | DoWhile (s, e) -> case compileWhile(env, e, s, true) of [env, code] -> [false, env, code] esac
    | Call (f, args) ->
      case lookupFun(env, f) of
        Fun (fLab, nargs) ->
          case compileList(env, args) of
            [env, argsCode] -> [false, env, argsCode <+ CALL (fLab, nargs)]
          esac
      esac
    | Scope (defs, es) ->
      var funs, res;
      env := beginScope(env);

      res := foldl(fun([env, funs], def) {
        case def of
          Var (names) -> [addVars(env, names), funs]
        | Fun (name, args, body) ->
          case genFunLabel(env, name) of
            [label, env] ->
              [addFun(env, name, label, size(args)), Fun (label, args, body) : funs]
          esac
        esac
      }, [env, {}], defs);
      env := res[0];
      funs := res[1];
      env := foldl(fun(env, def) {
        case def of
          Fun (label, args, body) -> rememberFun(env, label, args, body)
        esac
      }, env, reverse(funs));
      case compile(lab, env, es) of
        [labUsed, env, esCode] -> [labUsed, endScope(env), getGlobals(env, defs) <+> esCode]
      esac
    | Ignore (e) ->
      case compileWithLabel(env, e) of
        [env, code] -> [false, env, code <+ DROP]
      esac
    esac
  }

  fun compileFunctions(env) {
    fun compileFun(env, f@Fun(fLab, args, body, state)) {
      env := beginFun(env, state);
      env := addArgs(env, args);
      case genLabel(env) of
        [lab, env] ->
          case compile(lab, env, body) of
            [labUsed, env, code] ->
              code := emptyBuffer()
                <+ LABEL(fLab)
                <+ BEGIN (fLab, size(args), getLocals(env))
                <+> code
                <+> label(lab, labUsed)
                <+ END;
              [env, code]
          esac
      esac
    }

    fun compileFuns(env, funs) {
      foldl(fun ([env, code], f) {
        case compileFun(env, f) of
          [env, funCode] -> [env, code <+> funCode]
        esac
      }, [env, emptyBuffer()], funs)
    }


    fun r([funs, env], code) {
       case compileFuns(env, funs) of
         [env, {}] -> [env, code]
       | [env, funsCode] -> r(getFuns(env), code <+> funsCode)
       esac
    }

    r(getFuns(env), emptyBuffer())
  }

  case genLabel(initCompEnv()) of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] ->
           case compileFunctions(env) of
             [env, funsCode] -> getBuffer(emptyBuffer()
               <+ LABEL ("main")
               <+ BEGIN ("main", 0, getLocals(env))
               <+> code
               <+> label (endLab, endLabUsed)
               <+ END
               <+> funsCode)
           esac
       esac
  esac
}

