-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, s, w], insns) {
  case insns of
    {} -> c
  | insn : insnRest ->
    case insn of
      CJMP (c, lab) ->
        case stack of
          v : stackRest -> eval (env, [stackRest, s, w], if v == c then fromLabel (env, lab) else insnRest fi)
        esac
    | JMP (lab) -> eval (env, c, fromLabel (env, lab))
    | _ -> eval (env, evalInstruction (c, insn), insnRest)
    esac
  esac
}

fun evalInstruction ([stack, s, w], insn) {
  case insn of
    WRITE ->
    case stack of
      n : stackn -> [ stackn, s, writeWorld (n, w) ]
    esac
  | CONST (n) -> [n : stack, s, w]
  | BINOP (op) ->
    case stack of
      r : l : stackn -> [ evalBinop (op, l, r) : stackn, s, w ]
    esac
  | LD (x) -> [ (s (x)) : stack, s, w ]
  | ST (x) ->
      case stack of
        z : stackn -> [z : stackn, s <- [x, z], w]
      esac
  | LDA (x) -> [x : stack, s, w]
  | STI -> 
    case stack of
      v : x : stackn -> [v : stackn, s <- [x, v], w]
    esac
  -- | DUP ->
  --   case stack of
  --     x : stackn -> [x : x : stackn, s, w]
  --   esac
  | DROP ->
    case stack of
      _ : stackn -> [stackn, s, w]
    esac
  | READ ->
      case readWorld (w) of
        [v, nw] -> [v : stack, s, nw]
      esac
  | LABEL (_) -> [stack, s, w]
  | _ -> failure ("%s instruction not implemented", insn.string)
  esac
}

fun evalBinop(op, l, r) {
    case op of
      "*" -> l * r
    | "+" -> l + r
    | "-" -> l - r
    | "/" -> l / r
    | "%" -> l % r
    | "<" -> l < r
    | "<=" -> l <= r
    | "==" -> l == r
    | "!=" -> l != r
    | ">=" -> l >= r
    | ">" -> l > r
    | "&&" -> l && r
    | "!!" -> l !! r
    | _ -> failure ("%s binop not implemented", op)
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)        ->
      case env.genLabel of
        [eLab, env] ->
	  case compile (eLab, env, e) of
	    [eLabUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eLabUsed) <+ DROP]
	  esac
      esac
    | Binop (op, el, er) ->
      case env.genLabels (2) of
        [elLab, erLab, env] ->
	  case compile (elLab, env, el) of
	    [elLabUsed, env, elCode] ->
	      case compile (erLab, env, er) of
	        [erLabUsed, env, erCode] -> [false, env, elCode <+> label (elLab, elLabUsed) <+> erCode <+> label (erLab, erLabUsed) <+ BINOP (op)]
	      esac
	  esac
      esac
    | Assn (ex, ev)     ->
      case env.genLabels (2) of
        [exLab, evLab, env] ->
	  case compile (exLab, env, ex) of
	    [exLabUsed, env, exCode] ->
	      case compile (evLab, env, ev) of
	        [evLabUsed, env, evCode] -> [false, env, exCode <+> label (exLab, exLabUsed) <+> evCode <+> label (evLab, evLabUsed) <+ STI]
	      esac
	  esac
      esac
    | Seq (e1, e2)      ->
      case env.genLabel of
        [e1Lab, env] ->
	  case compile (e1Lab, env, e1) of
	    [e1LabUsed, env, e1Code] ->
	      case compile (lab, env, e2) of
	        [labUsed, env, e2Code] -> [labUsed, env, e1Code <+> label (e1Lab, e1LabUsed) <+> e2Code]
	      esac
	  esac
      esac
    | Read (e)          ->
      case env.genLabel of
        [eLab, env] ->
	  case compile (eLab, env, e) of
	    [eLabUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eLabUsed) <+ READ <+ STI <+ DROP]
	  esac
      esac
    | Write (e)         ->
      case env.genLabel of
        [eLab, env] ->
	  case compile (eLab, env, e) of
	    [eLabUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eLabUsed) <+ WRITE]
	  esac
      esac
    | _                 ->  failure ("compileSM not implemented: %s\n", stmt.string)
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
