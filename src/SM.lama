-- Stack code printer. Takes a list of SM instructions, return its
-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalInstruction(c@[s, st, w], ins) {
  case ins of
    READ           ->  
      case readWorld (w) of 
        [z, w2] -> [{z} +++ s, st, w2]
      esac

  | WRITE          -> 
      case s of 
        (z: s2) -> [s2, st, writeWorld (z, w)]
      esac

  | BINOP (op)     ->
      case s of 
        (y: x: s2) -> [{evalOp (op, x, y)} +++ s2, st, w]
      esac

  | LD (x)         ->   [{st (x)} +++ s, st, w]

  | ST (x)         ->   
      case s of 
        (z: s2) -> [s2, st <- [x, z], w]
      esac

  | CONST (n)      ->  [{n} +++ s, st, w]

  esac 
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {}                      ->   c
  | (instruction : insns2)  -> 
      case evalInstruction (c, instruction) of 
        c2 -> eval (c2, insns2)
      esac 
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
    case expr of
    Var (s)          -> {LD (s)}
  | Const (n)        -> {CONST (n)}
  | Binop (op, l, r) -> compileExpr (l) +++ compileExpr (r) +++ {BINOP (op)}
  | _                -> failure("failed in pattern matching in compileExpr")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn (x, e)        ->  compileExpr (e) +++ {ST (x)}
  | Skip               ->  {}
  | Seq (stmt1, stmt2) ->  compileSM (stmt1) +++ compileSM (stmt2)
  | Read (x)           ->  {READ} +++ {ST (x)}
  | Write (e)          ->  compileExpr (e) +++ {WRITE}
  | _                  ->  failure("failed in pattern matching in compileSM")
  esac
}
