-- Stack machine.
import Data;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
  case i of
    READ           -> "READ"
    | WRITE        -> "WRITE"
    | BINOP (s)    -> sprintf("BINOP %s", s)
    | LD    (x)    -> sprintf("LD %s", x)
    | LDA   (x)    -> sprintf("LDA %s", x)
    | ST    (x)    -> sprintf("ST %s", x)
    | STI          -> "STI"
    | CONST (n)    -> sprintf("CONST %d", n)
    | LABEL (s)    -> sprintf("LABEL %s", s)
    | JMP   (l)    -> sprintf("JMP %s", l)
    | CJMP  (c, l) -> sprintf("CJMP %s, %s", c, l)
    | DUP          -> "DUP"
    | DROP         -> "DROP"
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
          { }                -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c@[stack, state, world], instructions) {
  case instructions of
    { }             -> c
    | ins : tailIns ->
      case ins of
        CONST(n)             -> (
          var newStack = n:stack;
          eval(env, [newStack, state, world], tailIns)
        )
        | READ               -> (
          var readResult = readWorld(world);
          var v = readResult.fst;
          var newWorld = readResult.snd;
          var newStack = v:stack;
          eval(env, [newStack, state, newWorld], tailIns)
        )
        | WRITE              -> case stack of v : tailStack -> (
          var newWorld = writeWorld(v, world);
          eval(env, [tailStack, state, newWorld], tailIns)
        ) esac
        | JMP (lab)          -> eval(env, c, fromLabel(env, lab))
        | CJMP (cond, label) -> case stack of stackHead : stackTail -> (
          var jumpRequired = case cond of
            "z"    -> stackHead == 0
            | "nz" -> stackHead != 0
          esac;
          if jumpRequired then
            eval(env, [stackTail, state, world], fromLabel(env, label))
            else eval(env, [stackTail, state, world], tailIns)
          fi
        ) esac
        | BINOP(op)          ->
          case stack of y : x : tailStack -> (
            var binopResult = evalBinaryOperation(op, x, y);
            var newStack = binopResult:tailStack;
            eval(env, [newStack, state, world], tailIns)
          ) esac
        | LD(x)              -> (
          var newStack = state(x):stack;
          eval(env, [newStack, state, world], tailIns)
        )
        | LDA (x)            -> eval(env, [x:stack, state, world], tailIns)
        | ST(x)              -> case stack of v : tailStack -> (
          var newState = state <- [x, v];
          eval(env, [tailStack, newState, world], tailIns)
        ) esac
        | STI                -> case stack of sh1 : sh2 : stackTail -> eval(env, [sh1:stackTail, state <- [sh2, sh1], world], tailIns) esac
        | LABEL (_)          -> eval(env, c, tailIns)
        | DUP                -> case stack of stackHead : stackTail -> eval(env, [stackHead:stack, state, world], tailIns) esac
        | DROP               -> case stack of stackHead : stackTail -> eval(env, [stackTail, state, world], tailIns) esac
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), [{ }, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv(n) {
  [fun () {
    [sprintf("L%d", n), makeCompEnv(n + 1)]
  }]
}

fun initCompEnv() {
  makeCompEnv(0)
}

-- Accessor function: generates one label
fun genLabel(env) {
  env [0]()
}

-- Utility function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case genLabel(env) of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  fun compile(lab, env, stmt) {
    case stmt of
      Skip                            -> [false, env, emptyBuffer()]
      | Var  (x)                      -> [false, env, singletonBuffer(LD(x))]
      | Ref  (x)                      -> [false, env, singletonBuffer(LDA(x))]
      | Const(n)                      -> [false, env, singletonBuffer(CONST(n))]
      | Read (x)                      -> [false, env, singletonBuffer(READ) <+ ST(x)]
      | Write(e)                      -> case compile(lab, env, e) of [labUsed, env, code] ->
        [false, env, code <+> label(lab, labUsed) <+ WRITE]
      esac
      | Assn(r, e)                    -> case genLabel(env) of [l1, env] ->
        case compile(l1, env, r) of [l2, env, code1] ->
          case compile(lab, env, e) of [l3, env, code2] ->
            [false, env, code1 <+> label(l1, l2) <+> code2 <+> label(lab, l3) <+ STI]
          esac
        esac
      esac
      | Binop(o, l, r)                -> case compile(lab, env, l) of [l1, env, code1] ->
        case genLabel(env) of [l2, env] ->
          case compile(l2, env, r) of [l3, env, code2] ->
            [false, env, code1 <+> label(lab, l1) <+> code2 <+> label(l2, l3) <+ BINOP(o)]
          esac
        esac
      esac
      | If (cond, firstBody, secBody) -> case genLabels(env, 2) of [l1, l2, env] ->
        case compile(l1, env, cond) of [l3, env, code1] ->
          case compile(lab, env, firstBody) of [_, env, code2] ->
            case compile(lab, env, secBody) of [_, env, code3] ->
              [true, env, code1 <+> label(l1, l3) <+ CJMP("z", l2) <+> code2 <+ JMP(lab) <+ LABEL(l2) <+> code3]
            esac
          esac
        esac
      esac
      | While (cond, body)            ->
        case genLabels(env, 2) of [l1, l2, env] ->
          case compile(l1, env, body) of [_, env, code1] ->
            case compile(l2, env, cond) of [l3, env, code2] ->
              [true, env, label(l1, true) <+> code2 <+> label(l2, l3) <+ CJMP("z", lab) <+> code1 <+ JMP(l1)]
            esac
          esac
        esac
      | DoWhile(body, cond)           -> case genLabels(env, 3) of [l1, l2, l3, env] ->
        case compile(l3, env, body) of [l4, env, code1] ->
          case compile(l1, env, cond) of [l5, env, code2] ->
            [false, env, label(l2, true) <+> code1 <+> label(l3, l4) <+> code2 <+> label(l1, l5) <+ CJMP("nz", l2)]
          esac
        esac
      esac
      | Ignor(e)                      -> case compile(lab, env, e) of [labUsed, env, code] ->
        [false, env, code <+> label(lab, labUsed) <+ DROP]
      esac
      | Seq(l, r)                     -> case genLabel(env) of [l1, env] ->
        case compile(l1, env, l) of [l2, env, code1] ->
          case compile(lab, env, r) of [l3, env, code2] ->
            [l3, env, code1 <+> label(l1, l2) <+> code2]
          esac
        esac
      esac
    esac
  }

  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label(endLab, endLabUsed)
      esac
  esac
}