-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
  case i of
    READ           -> sprintf("READ")
    | WRITE        -> sprintf("WRITE")
    | BINOP (s)    -> sprintf("BINOP %s", s)
    | LD    (x)    -> sprintf("LD %s", x)
    | ST    (x)    -> sprintf("ST %s", x)
    | CONST (n)    -> sprintf("CONST %d", n)
    | LABEL (s)    -> sprintf("LABEL %s", s)
    | JMP   (l)    -> sprintf("JMP %s", l)
    | CJMP  (c, l) -> sprintf("CJMP %s, %s", c, l)
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
          { }                -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c@[stack, state, world], instructions) {
  case instructions of
    { }             -> c
    | ins : tailIns ->
      case ins of
        CONST(n)         -> (
          var newStack = n:stack;
          eval(env, [newStack, state, world], tailIns)
        )
        | READ           -> (
          var readResult = readWorld(world);
          var v = readResult.fst;
          var newWorld = readResult.snd;
          var newStack = v:stack;
          eval(env, [newStack, state, newWorld], tailIns)
        )
        | WRITE          -> case stack of v : tailStack -> (
          var newWorld = writeWorld(v, world);
          eval(env, [tailStack, state, newWorld], tailIns)
        ) esac
        | JMP (lab)      -> eval(env, c, fromLabel(env, lab))
        | CJMP (fl, lab) -> case stack of v : stackTail -> (
          if v == fl then
            eval(env, [stackTail, state, world], fromLabel(env, lab))
            else eval(env, [stackTail, state, world], tailIns)
          fi
        )
        esac
        | BINOP(op)      ->
          case stack of y : x : tailStack -> (
            var binopResult = evalBinaryOperation(op, x, y);
            var newStack = binopResult:tailStack;
            eval(env, [newStack, state, world], tailIns)
          ) esac
        | LD(x)          -> (
          var newStack = state(x):stack;
          eval(env, [newStack, state, world], tailIns)
        )
        | ST(x)          -> case stack of v : tailStack -> (
          var newState = state <- [x, v];
          eval(env, [tailStack, newState, world], tailIns)
        ) esac
        | LABEL (_)      -> eval(env, c, tailIns)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), [{ }, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv(n) {
  [fun () {
    [sprintf("L%d", n), makeCompEnv(n + 1)]
  }]
}

fun initCompEnv() {
  makeCompEnv(0)
}

-- Accessor function: generates one label
fun genLabel(env) {
  env [0]()
}

-- Utility function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case genLabel(env) of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expr) {
  case expr of
    Const (c)         -> singletonBuffer(CONST(c))
    | Var (v)         -> singletonBuffer(LD(v))
    | Binop (o, l, r) -> compileExpr(l) <+> compileExpr(r) <+ BINOP(o)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
-- Generates a buffer with an optional label
--    lab     --- the name of the label
--    labUsed --- a flag if the lebel is needed
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer
  fun compile(lab, env, stmt) {
    case stmt of
      Skip                                   -> [false, env, emptyBuffer()]
      | Read  (x)                            -> [false, env, singletonBuffer(READ) <+ ST(x)]
      | Write (e)                            -> [false, env, compileExpr(e) <+ WRITE]
      | Assn  (x, e)                         -> [false, env, compileExpr(e) <+ ST(x)]
      | Seq   (s1, s2)                       ->
        case genLabel(env) of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | If (cond, initTrueBuf, initFalseBug) ->
        case genTwoLabels(env) of [env, l1, l2] ->
          case compile(l2, env, initTrueBuf) of [flag, env, trueBuf] ->
            case compile(lab, env, initFalseBug) of [_, env, falseBuf] -> (
              var newBuf = compileExpr(cond) <+ CJMP(0, l1) <+> trueBuf <+> label(l2, flag);
              newBuf := newBuf <+ JMP(lab) <+> singletonBuffer(LABEL(l1)) <+> falseBuf;
              [true, env, newBuf]
            )
            esac
          esac
        esac
      | While (cond, buf)                    ->
        case genTwoLabels(env) of [env, l1, l2] ->
          case compile(l2, env, buf) of [flag, env, code] -> (
            var newBuf = singletonBuffer(LABEL(l1)) <+> compileExpr(cond);
            newBuf := newBuf <+ CJMP(0, lab) <+> code <+> label(l2, flag) <+ JMP(l1);
            [true, env, newBuf]
          )
          esac
        esac
      | DoWhile (buf, cond)                  ->
        case genTwoLabels(env) of [env, l1, l2] ->
          case compile(l2, env, buf) of [flag, env, code] -> (
            var newBuf = singletonBuffer(LABEL(l1)) <+> code <+> label(l2, flag);
            newBuf := newBuf <+> compileExpr(cond) <+ CJMP(0, lab) <+ JMP(l1);
            [true, env, newBuf]
          )
          esac
        esac
    esac
  }

  case genLabel(initCompEnv()) of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label(endLab, endLabUsed)
      esac
  esac
}

fun genTwoLabels(env) {
  case genLabel(env) of [l1, env] ->
    case genLabel(env) of [l2, env] ->
      [env, l1, l2]
    esac
  esac
}