-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (l)    -> sprintf ("LABEL %s", l)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (l)    -> sprintf ("CJMP %s", l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, s, w], insns) {
  case insns of
      {}                  -> c
    | BINOP(op):insnsEnd  -> case stack of
                              (y:x:stackEnd) -> eval(env, [get_infix(op)(x, y):stackEnd, s, w], insnsEnd)
                              esac
    | CONST(n):insnsEnd   -> eval(env, [n:stack, s, w], insnsEnd)
    | READ:insnsEnd       -> case readWorld(w) of
                              [n, wr] -> eval(env, [n:stack, s, wr], insnsEnd)
                              esac
    | WRITE:insnsEnd      -> case stack of
                              n:stackEnd -> eval(env, [stack, s, writeWorld(n, w)], insnsEnd)
                              esac
    | LD(x):insnsEnd      -> eval(env, [s(x):stack, s, w], insnsEnd)
    | ST(x):insnsEnd      -> case stack of
                              n:stackEnd -> eval(env, [stack, s <- [x, n], w], insnsEnd)
                              esac
    | LABEL(l):insnsEnd     -> eval(env, c, insnsEnd)
    | JMP(l):insnsEnd       -> eval(env, c, fromLabel(env, l))
    | CJMP(l):insnsEnd   -> case stack of
                                n:stackEnd -> if n != 0
                                              then eval(env, c, fromLabel(env, l))
                                              else eval(env, c, insnsEnd) fi
                                esac
    esac
  -- failure ("SM eval not implemented\n")
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var(x)            -> singletonBuffer(LD(x))
    | Const(n)          -> singletonBuffer(CONST(n))
    | Binop(op, e1, e2) -> compileExpr(e1) <+> compileExpr(e2) <+ BINOP(op)
    esac
  -- failure ("compileExpr not implemented\n")
}


-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label to go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (stmt1, stmt2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, stmt1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, stmt2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> 
                                                             label (s2Lab, s2LabUsed) <+> 
                                                             s2Code]
                    esac
              esac
          esac
      -- esac
    | If (e, stmt1, stmt2) -> 
      case env.genLabel of
        [s1Lab, env] ->
          case env.genLabel of
            [s2Lab, env] ->  
              case compile(s2Lab, env, stmt2) of
                [s2LabUsed, env, s2Code] ->
                  case compile(lab, env, stmt1) of
                    [_, env, s1Code] -> [true, env, compileExpr(e) <+
                                                    CJMP(s1Lab) <+>
                                                    s2Code <+>
                                                    label(s2Lab, s2LabUsed) <+
                                                    JMP(lab) <+
                                                    LABEL(s1Lab) <+>
                                                    s1Code]
                    esac
                esac 
            esac
        esac                                                  
    | While (e, stmt1)      -> 
        case env.genLabel of 
          [sLab, env] -> 
            case env.genLabel of 
              [eLab, env] -> 
                case compile(eLab, env, stmt1) of
                  [_, env, sCode] -> [false, env, singletonBuffer(JMP(eLab)) <+ 
                                                                  LABEL(sLab) <+> 
                                                                  sCode <+ 
                                                                  LABEL(eLab) <+> 
                                                                  compileExpr(e) <+
                                                                  CJMP(sLab)]
                  esac
              esac 
          esac
    | DoWhile (stmt1, e)    -> 
        case env.genLabel(2) of 
          [sLab, env] -> 
            case env.genLabel of
              [eLab, env] ->
                case compile(eLab, env, stmt1) of
                  [eLabUsed, env, sCode] -> [false, env, singletonBuffer(LABEL(sLab)) <+> 
                                                                         sCode <+>
                                                                         label(eLab, eLabUsed) <+>
                                                                         compileExpr(e) <+ 
                                                                         CJMP(sLab)]
                  esac 
              esac
          esac
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}