-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl(fun (conf@[stack, st, w], ins) {
    case ins of
      READ ->
        case readWorld(w) of
          [v, wld] -> [v : stack, st, wld]
        esac
    | WRITE -> [tl(stack), st, writeWorld(hd(stack), w)]
    | BINOP (op) ->
      case stack of 
        y : x : rest -> [evalBinop(op, x, y) : rest, st, w]
      | _ -> failure("Stack does not have enough elements. Required >=2 for BINOP.")
      esac
    | LD (x) -> [st(x) : stack, st, w]
    | ST (x) -> [tl(stack), st <- [x, hd(stack)], w]
    | CONST (n) -> [n : stack, st, w]
    esac
  }, c, insns)
  -- failure ("SM eval not implemented\n")
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x) -> {LD (x)}
  | Const (n) -> {CONST (n)}
  | Binop (op, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ { BINOP (op) }
  esac
  -- failure ("compileExpr not implemented\n")
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn (x, expr) -> compileExpr(expr) +++ {ST (x)}
  | Seq  (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Skip -> {}
  | Read (x) -> {READ, ST (x)}
  | Write (expr) -> compileExpr(expr) +++ {WRITE}
  esac
  -- failure ("compileSM not implemented\n")
}
