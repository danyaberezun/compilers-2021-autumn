-- Stack machine.

import List;
import World;
import State;
import Expr;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl(evalSMInsn, c, insns)
}

fun evalSMInsn (c@[stack, st, w], insn) {
  case insn of
    READ -> case readWorld(w) of
      [varValue, updw] -> [varValue : stack, st, updw]
    esac
  | WRITE           -> [stack.tl, st, writeWorld(stack.hd, w)]
  | BINOP (op)      -> [applyBinop(op, stack.tl.hd, stack.hd) : stack.tl.tl, st, w]
  | LD    (varName) -> [st(varName) : stack, st, w]
  | ST    (varName) -> [stack.tl, st <- [varName, stack.hd], w]
  | CONST (value)   -> [value : stack, st, w]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (varName)         -> {LD(varName)}
  | Const (value)           -> {CONST(value)}
  | Binop (op, left, right) -> compileExpr(left) +++ compileExpr(right) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (varName, expr) -> compileExpr(expr) +++ {ST(varName)}
  | Seq   (fst, snd)      -> compileSM(fst) +++ compileSM(snd)
  | Skip                  -> {}
  | Read  (varName)       -> {READ, ST(varName)}
  | Write (expr)          -> compileExpr(expr) +++ {WRITE}
  esac
}
