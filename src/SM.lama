-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun evalInsn(env, c @ [stack, state, world], insn) {
  case insn of
    READ       -> 
      case readWorld(world) of
        [n, world2] -> [env, [n:stack, state, world2]]
      esac
  | WRITE      ->  
      case stack of
        s:tack   -> [env, [tack, state, writeWorld(s, world)]]
      | _        -> failure ("empty stack when write ")
      esac
  | BINOP (s)  -> 
      case stack of
        s1:s2:tack   -> [env, [evalOp(s, s2, s1):tack, state, world]]
      | _            -> failure ("not enought values in stack for operator")
      esac
  | ST    (x)  -> 
      case stack of
        s:tack   -> [env, [tack, state <- [x, s], world]]
      | _        -> failure ("empty stack when ST")
      esac
  | STI        -> 
      case stack of
        v:i:tack -> [env, [v:tack, state <- [i, v], world]]
      | _        -> failure ("empty stack when STI")
      esac
  | LD    (x)  -> [env, [state (x) : stack, state, world]]
  | LDA   (x)  -> [env, [x : stack, state, world]]
  | CONST (n)  -> [env, [n:stack, state, world]]
  | LABEL (l)  -> [env, c]
  | JMP (l)    -> [env, c]
  | CJMP(c, l) -> 
      case stack of
        _ : tack -> [env, [tack, state, world]]
      | _        -> failure("Stack is empty when CJMP operation invoke") 
      esac
  | DUP          -> 
      case stack of
        s:tack -> [env, [s:(s:tack), state, world]]
      | _        -> failure ("empty stack when DUP")
      esac
  | DROP         -> 
      case stack of
        s:tack -> [env, [tack, state, world]]
      | _        -> failure ("empty stack when DROP")
      esac
  | _          -> failure ("eval instruction not implemented fully: %s\n", insn.string)
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c @ [stack, state, world], insns) {
  case insns of 
    i:tail -> 
      case evalInsn(env, c, i) of
        [env, c] -> 
          case i of
            JMP  (l)       -> eval(env, c, fromLabel(env, l))
          | CJMP (flag, l) -> 
              case stack of
                s:tack ->
                    case [flag, s] of
                      ["z", 0]  -> eval(env, c, fromLabel(env, l))
                    | ["nz", 0] -> eval(env, c, tail)
                    | ["nz", s] -> eval(env, c, fromLabel(env, l))
                    | ["z", s]  -> eval(env, c, tail)
                    esac
              esac
          | _              -> eval(env, c, tail) 
          esac
      esac
  | {} -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Binop (op, e1, e2)-> 
        case genLabels(env, 2) of
          [label_1, label_2, env] ->
            case compile (label_1, env, e1) of 
              [lab_used_1, env, block_1] -> 
                case compile (label_2, env, e2) of 
                  [lab_used_2, env, block_2] -> [false, env, block_1 <+> label(label_1, lab_used_1) <+> block_2 <+> label(label_2, lab_used_2) <+ BINOP (op)]
                esac
            esac
        esac
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> 
        case env.genLabel of
          [label_1, env] ->
            case compile (label_1, env, e) of
              [label_used, env, block] -> [false, env, block <+> label(label_1, label_used) <+ WRITE]
            esac
        esac
    | Assn  (x, e)   -> 
        case genLabels(env, 2) of
          [label_1, label_2, env] ->
            case compile (label_1, env, x) of
              [label_1_used, env, lvalue] -> 
                case compile (label_2, env, e) of
                  [label_2_used, env, rvalue] -> 
                    [false, env, lvalue <+> label(label_1, label_1_used) <+> rvalue <+> label(label_2, label_2_used) <+ STI]
                esac
            esac
        esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2) -> 
        case genLabels(env, 1) of
          [label, env] ->
            case compile (lab, env, e) of
              [_, env, e_block] ->
                case compile (lab, env, s1) of
                  [_, env, s1_block] -> 
                    case compile (lab, env, s2) of
                      [_, env, s2_block] ->
                        [true, env, e_block <+ CJMP ("nz", label) <+> 
                        s2_block <+ JMP (lab) <+ LABEL(label) <+> s1_block <+ JMP(lab)]
                    esac
                esac
            esac
        esac
    | While (e, s)   -> 
        case genLabels(env, 1) of
          [label_begin, env] ->
            case compile (lab, env, e) of
              [_, env, expr_code] -> 
                case compile (label_begin, env, s) of 
                  [_, env, block] ->
                    [true, env, singletonBuffer ( LABEL(label_begin) ) <+> expr_code <+ CJMP ("z", lab) <+> block <+ JMP (label_begin)]
                esac
            esac
        esac
    | DoWhile (s, e) ->
        case genLabels(env, 2) of
          [label_begin, label_end, env] ->
            case compile (lab, env, e) of 
              [_, env, expr_code] ->
                case compile (label_end, env, s) of 
                  [_, env, block] ->
                    [true, env, singletonBuffer ( LABEL(label_begin) ) <+> block <+ LABEL(label_end) <+> expr_code <+ CJMP ("z", lab)  <+ JMP (label_begin)]
                esac
            esac
            
        esac
    | Ignore (e)     ->
        case compile (lab, env, e) of
          [_, env, code] -> [false, env, code <+ DROP]
        esac
    | _              ->  failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
