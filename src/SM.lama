-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {

  fun evalOne(env, c, insn) {

    fun applyOperator(op, lhs, rhs) {
      -- printf("Opearator `%s` called on operands %d, %d\n", op, lhs, rhs);
      case op of 
          "+"  -> lhs + rhs
        | "-"  -> lhs - rhs
        | "*"  -> lhs * rhs
        | "/"  -> lhs / rhs
        | "%"  -> lhs % rhs
        | "==" -> lhs == rhs
        | "!=" -> lhs != rhs
        | "<"  -> lhs < rhs
        | "<=" -> lhs <= rhs
        | ">"  -> lhs > rhs
        | ">=" -> lhs >= rhs
        | "&&" -> lhs && rhs
        | "!!" -> lhs !! rhs
      esac    
    }

    fun store([value:tail, state, world], name) {
      [[tail, state <- [name, value], world], Stay]
    }

    fun load([stack, state, world], name) {
      [[state(name):stack, state, world], Stay]
    }

    fun read([stack, state, world]) {
      case readWorld(world) of 
        [value, newWorld] ->  [[value : stack, state, newWorld], Stay]
      esac 
    }

    fun write([value:tail, state, world]) {
      [[tail, state, writeWorld(value, world)], Stay]
    }

    fun binop([rhs:lhs:tail, state, world], op) {
      [[applyOperator(op, lhs, rhs):tail, state, world], Stay]
    } 

    fun push([stack, state, world], value) {
      [[value : stack, state, world], Stay]
    }

    fun jmp(c, label) {
      case env.fromLabel(label) of 
          cmds -> [c, Goto(cmds)] 
      esac
    }

    fun cjmp([value:tail, state, world], mode, label) {
      var nextC = [tail, state, world];
      case mode of 
          "z"  -> case value of 
                      0 -> jmp(nextC, label)
                    | _ -> [nextC, Stay]
                  esac  
        | "nz" -> case value of 
                      0 -> [nextC, Stay]
                    | _ -> jmp(nextC, label)
                  esac  
      esac
    }

    fun label(c) {
      [c, Stay]
    }

    -- printf("perform %s\n", showSMInsn(insn));

    case insn of
        READ                -> read(c)
      | WRITE               -> write(c)
      | BINOP (op)          -> binop(c, op)
      | LD    (name)        -> load(c, name)
      | ST    (name)        -> store(c, name)
      | CONST (value)       -> push(c, value)
      | JMP   (label)       -> jmp(c, label)
      | CJMP  (mode, label) -> cjmp(c, mode, label)
      | LABEL (_)           -> label(c)
    esac
  }  

  -- printf("insns = %s\n", insns.string); 

  case insns of 
      {}        ->  c
    | insn:rest ->  case evalOne(env, c, insn) of 
                        [nextC, Goto(cmds)] -> eval(env, nextC, cmds)
                      | [nextC, Stay]       -> eval(env, nextC, rest)
                    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
      Var (name) -> singletonBuffer(LD(name))
    | Const (value) -> singletonBuffer(CONST(value)) 
    | Binop (op, lhs, rhs) -> compileExpr(lhs) <+> compileExpr(rhs) <+ BINOP(op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (c, ts, es) ->   
        case env.genLabel of 
          [elseLabel, env] -> 
            case compileExpr(c) of
              condition ->
                case compile(lab, env, ts) of 
                  [labUsedT, env, thenCode] -> 
                    case compile(lab, env, es) of 
                      [labUsedE, env, elseCode] -> [true, env, 
                        compileExpr(c) 
                        <+ CJMP("z", elseLabel)
                        <+> thenCode 
                        <+ JMP(lab)
                        <+ LABEL(elseLabel)
                        <+> elseCode] 
                    esac
                esac 
            esac
        esac    
    | While (c, b)   ->
        case env.genLabels(2) of 
          [conditionLabel, bodyLabel, env] ->
            case compileExpr(c) of 
              condition -> 
                case compile(conditionLabel, env, b) of 
                  [_, env, body] -> [false, env, 
                    singletonBuffer(JMP(conditionLabel)) 
                    <+  LABEL(bodyLabel)
                    <+> body
                    <+  LABEL(conditionLabel)
                    <+> condition
                    <+  CJMP("nz", bodyLabel)]
                esac
            esac
        esac    
    | DoWhile (b, c)   ->
        case env.genLabels(2) of 
          [conditionLabel, bodyLabel, env] ->
            case compileExpr(c) of 
              condition -> 
                case compile(conditionLabel, env, b) of 
                  [usedConditionalLabel, env, body] -> [false, env, 
                    singletonBuffer(LABEL(bodyLabel)) 
                    <+> body
                    <+> label(conditionLabel, usedConditionalLabel)
                    <+> condition
                    <+  CJMP("nz", bodyLabel)]
                esac
            esac
        esac    
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
