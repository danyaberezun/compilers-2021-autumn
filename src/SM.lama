-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun createLocal (stack, a, l) {
    case take (stack, a) of
      [stack, args] ->
        var state = makeState (a, l);
        foldl (fun (i, arg) {assign (state, Arg (i), arg); i + 1}, 0, args);
        [stack, state]
    esac    
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, ctrlStack, state, world], insns) {
    case insns of
      {}           -> c
    | insn : insns ->
        case insn of
          READ            ->
            case readWorld (world) of
              [z, world] -> eval ([z : stack, ctrlStack, state, world], insns)
            esac

        | WRITE           ->
            case stack of
              z : stack -> eval ([stack, ctrlStack, state, writeWorld (z, world)], insns) 
            esac

        | BINOP (op)      ->
            case stack of
              x : y : stack -> eval ([evalOp (op, y, x) : stack, ctrlStack, state, world], insns)
            esac

        | LD (x)          -> eval ([lookup (state, x) : stack, ctrlStack, state, world], insns)

        | LDA (x)         -> eval ([Ref (x) : stack, ctrlStack, state, world], insns)

        | ST (x)          ->
            case stack of
              z : _ -> assign (state, x, z); eval ([stack, ctrlStack, state, world], insns)
            esac

        | STI             ->
            case stack of
              v : Ref (x) : stack -> assign (state, x, v); eval ([v : stack, ctrlStack, state, world], insns)
            esac

        | CONST (z)       -> eval ([z : stack, ctrlStack, state, world], insns)

        | LABEL (l)       -> eval (c, insns)

        | JMP (l)         -> eval (c, fromLabel (env, l))

        | CJMP (c, l)     ->
            case c of
              "z"  -> case stack of
                        z : stack -> if z == 0
                                     then eval ([stack, ctrlStack, state, world], fromLabel (env, l))
                                     else eval ([stack, ctrlStack, state, world], insns)
                                     fi
                      esac
            | "nz" -> case stack of
                        z : stack -> if z == 0
                                     then eval ([stack, ctrlStack, state, world], insns)
                                     else eval ([stack, ctrlStack, state, world], fromLabel (env, l))
                                     fi
                      esac 
            esac

        | DROP            -> 
            case stack of
              _ : stack -> eval ([stack, ctrlStack, state, world], insns)
            esac

        | GLOBAL (x)      -> assign (state, Glb (x), 0); eval ([stack, ctrlStack, state, world], insns)

        | BEGIN (_, a, l) ->
            case createLocal (stack, a, l) of
              [stack, state] -> eval ([stack, ctrlStack, state, world], insns)
            esac

        | END             ->
            case ctrlStack of
              {}                         -> c
            | [state, insns] : ctrlStack -> eval ([stack, ctrlStack, state, world], insns)
            esac

        | CALL (f, _)     -> eval ([stack, [state, insns] : ctrlStack, state, world], fromLabel (env, f))
        esac
    esac
  }
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (expr) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun registerDef ([env, funs, globals], def) {
    case def of
      Var (vs)               -> [addVars (env, vs),
                                 funs,
                                 (if isGlobal (env)
                                  then map (fun (name) {GLOBAL (name)}, vs)
                                  else {}
                                  fi) +++ globals]
    | Fun (name, args, body) ->
        case genFunLabel (env, name) of
          [fLabel, env] -> [addFun (env, name, fLabel, args.size), [fLabel, args, body] : funs, globals]
        esac
    esac
  }

  fun compileMany (lab, env, exprs) {
      case exprs of
        {e}     -> compile (lab, env, e)
      | {e, es} ->
          case genLabel (env) of
            [eLab, env] ->
              case compile (eLab, env, e) of
                [eUsed, env, eSM] ->
                  case compileMany (lab, env, {es}) of
                    [labUsed, env, esSM] -> [labUsed, env, eSM <+> label (eLab, eUsed) <+> esSM]
                  esac
              esac
          esac
      esac
  }

  fun compile (lab, env, expr) {
    case expr of
      Skip              -> [false, env, emptyBuffer ()]

    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]

    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]

    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]

    | Binop (op, l, r)  ->
        case compile (lab, env, l) of
          [_, env, lSM] ->
            case compile (lab, env, r) of
              [_, env, rSM] -> [false, env, lSM <+> rSM <+ BINOP (op)]
            esac
        esac

    | Read (x)          -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, x)) <+ DROP]

    | Write (e)         ->
        case compile (lab, env, e) of
          [_, env, eSM] -> [false, env, eSM <+ WRITE]
        esac

    | Assn (x, e)       ->
        case compile (lab, env, x) of
          [_, env, xSM] ->
            case compile (lab, env, e) of
              [_, env, eSM] -> [false, env, xSM <+> eSM <+ STI]
            esac
        esac

    | Seq (s1, s2)      ->
        case genLabel (env) of
          [s2Lab, env] ->
            case compile (s2Lab, env, s1) of
              [s2LabUsed, env, s1SM] ->
                case compile (lab, env, s2) of
                  [labUsed, env, s2SM] -> [labUsed, env, s1SM <+> label (s2Lab, s2LabUsed) <+> s2SM]
                esac
            esac
        esac

    | Ignore (e)        ->
        case compile (lab, env, e) of
          [lu, env, instsSM] -> [lu, env, instsSM <+ DROP]
        esac

    | While (e, s)      ->
        case genLabels (env, 2) of
          [le, ls, env] ->
            case compile (lab, env, e) of
              [_, env, eSM] ->
                case compile (le, env, s) of
                  [_, env, sCode] ->
                    [false, env,
                      singletonBuffer (JMP (le)) <+
                      LABEL (ls)                 <+>
                      sCode                      <+
                      LABEL (le)                 <+>
                      eSM                        <+
                      CJMP ("nz", ls)]
                esac
            esac
        esac

    | If (e, s1, s2)    ->
        case genLabels (env, 2) of
          [lout, ls2, env] -> 
            case compile (lab, env, e) of
              [_, env, eSM] ->
                case compile (lab, env, s1) of
                  [labUsed1, env, s1Code] ->
                    case compile (lab, env, s2) of
                      [labUsed2, env, s2Code] ->
                        [true, env,
                          eSM             <+
                          CJMP ("z", ls2) <+>
                          s1Code          <+
                          JMP (lout)      <+ 
                          LABEL (ls2)     <+>
                          s2Code          <+
                          LABEL (lout)]
                    esac
                esac
            esac
        esac

    | DoWhile (s, e)    ->
        case genLabels (env, 2) of
          [ll, le, env] ->
            case compile (lab, env, e) of
              [_, env, eSM] ->
                case compile (le, env, s) of
                  [labUsed, env, sCode] ->
                    [false, env,
                      singletonBuffer (LABEL (ll)) <+>
                      sCode                        <+>
                      eSM                          <+
                      CJMP ("nz", ll)]
                esac
            esac
        esac

    | Scope (defs, e)   ->
        case foldl (fun (efg, def) {registerDef (efg, def)}, [beginScope (env), {}, {}], defs) of
          [env, funs, globals] ->
            case compile (lab, foldl (fun (env, [fLabel, args, body]) {rememberFun (env, fLabel, args, body)}, env, funs), e) of
              [flag, env, code] -> 
                  [flag, endScope (env), listBuffer (globals) <+> code]
            esac
        esac

    | Call (f, {})      ->
        case lookupFun (env, f) of
          Fun (fLabel, n) -> [false, env, singletonBuffer (CALL (fLabel, n))]
        esac

    | Call (f, args)    ->
        case genLabel (env) of
          [callLabel, env] ->
            case compileMany (callLabel, env, args) of
              [callUsed, env, argsSM] ->
                case lookupFun (env, f) of
                  Fun (fLabel, nargs) -> [false, env, argsSM <+> label (callLabel, callUsed) <+ CALL (fLabel, nargs)]
                esac
            esac
        esac

    esac
  }

  -- implementation from the lecture

  fun compileFunctions (env, main) {
    fun iterate (env, acc, funList) {
      case funList of
        {} ->
          case getFuns (env) of
            [{}, env] -> acc
          | [fs, env] -> iterate (env, acc, fs)
          esac
      | Fun (f, args, body, state) : fs ->
          case genLabel (addArgs (beginFun (env, state), args)) of
            [endLab, env] ->
              case compile (endLab, env, body) of
                [endUsed, env, code] ->
                  iterate (env,
                            acc                                   <+
                            LABEL (f)                             <+
                            BEGIN (f, args.size, getLocals (env)) <+>
                            code                                  <+>
                            label (endLab, endUsed)               <+
                            END,
                          fs)
              esac
          esac
      esac
    }

    iterate (env, main, {})
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, expr) of
         [endUsed, env, code] ->
              compileFunctions (env,
                                singletonBuffer (LABEL ("main"))   <+
                                BEGIN ("main", 0, getLocals (env)) <+>
                                code                               <+>
                                label (endLab, endUsed)            <+
                                END).fst
       esac
  esac
}
