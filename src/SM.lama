-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, st, w], insns) {
  fun jmpCompare (c, v) {
    case c of
      "z"  -> v == 0
    | "nz" -> v != 0
    esac
  }

  case insns of
    {}         -> c
  | ins : tail ->
    case ins of
      READ  -> case readWorld (w) of [n, newW] -> eval (env, [n : stack, st, newW], tail) esac
    | WRITE ->
      case stack of
        top : stack -> eval (env, [stack, st, writeWorld (top, w)], tail)
      | {}          -> emptyStackError ("WRITE")
      esac
    | BINOP (op) ->
      case stack of
        b : a : stack -> eval (env, [getOp (op) (a, b) : stack, st, w], tail)
      | _             -> emptyStackError ("BINOP")
      esac
    | LD (x) -> eval (env, [st (x) : stack, st, w], tail)
    | ST (x) ->
      case stack of
        top : stack -> eval (env, [stack, st <- [x, top], w], tail)
      | _           -> emptyStackError ("ST")
      esac
    | CONST (x)    -> eval (env, [x : stack, st, w], tail)
    | LABEL (_)    -> eval (env, [stack, st, w], tail)
    | JMP   (l)    -> eval (env, [stack, st, w],  env.fromLabel (l))
    | CJMP  (c, l) ->
      case stack of
        top : stack -> eval (env, [stack, st, w], if jmpCompare (c, top) then env.fromLabel (l) else tail fi)
      | {}         -> emptyStackError ("WRITE")
      esac
    | _            -> failure ("Unknown instruction: %s\n", ins.string)
    esac
  esac
}

fun emptyStackError (op) {
  failure ("Not enough values on the stack for %s\n", op)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x)               -> singletonBuffer (LD (x))
  | Const (n)               -> singletonBuffer (CONST (n))
  | Binop (op, left, right) -> compileExpr (left) <+> compileExpr (right) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (expr, thenBody, elseBody) ->
        case env.genLabel of
          [elseLabel, env] ->
            case compile (lab, env, thenBody) of
              [_, env, thenCode] -> 
                case compile (lab, env, elseBody) of
                  [_, env, elseCode] ->
                      [true, env, compileExpr (expr) <+ CJMP ("z", elseLabel) <+> thenCode <+ JMP (lab)
                                                         <+ LABEL (elseLabel) <+> elseCode <+ JMP (lab)]
                esac
            esac
        esac
    | While (expr, body) ->
        case env.genLabel of
          [startLabel, env] ->
            case env.genLabel of
              [exprLabel, env] ->
                case compile (exprLabel, env, body) of
                  [_, env, bodyCode] ->
                      [false, env, singletonBuffer (JMP (exprLabel)) <+ LABEL (startLabel) <+> bodyCode
                                   <+ LABEL (exprLabel) <+> compileExpr (expr) <+ CJMP ("nz", startLabel)]
                esac
            esac
        esac
    | DoWhile (body, expr) ->
        case env.genLabel of
          [startLabel, env] ->
            case env.genLabel of
              [exprLabel, env] ->
                case compile (exprLabel, env, body) of
                  [exprLabelUsed, env, bodyCode] ->
                      [false, env, singletonBuffer (LABEL (startLabel)) <+> bodyCode
                                  <+> label (exprLabel, exprLabelUsed) <+> compileExpr (expr) <+ CJMP ("nz", startLabel)]
                esac
            esac
        esac
    | _  -> failure ("Unknown statement: %s\n", stmt.string)
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
       esac
  esac
}
