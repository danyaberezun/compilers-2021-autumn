-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, w], insns) {
  -- showSMInsn(insns);
  -- failure("aboba");
  case insns of 
    ins:insns -> 
      case ins of 
        READ -> case readWorld(w) of
                  [n, w] -> eval ([n:stack, state, w], insns) 
                esac
        | WRITE -> eval ([tl(stack), state, writeWorld(hd(stack), w)], insns)
        | BINOP (op) -> case stack of 
                          r:l:stack -> eval ([execOp(op, l, r):stack, state, w], insns)
                        esac 
        | LD (x) -> eval ([state(x):stack, state, w], insns)
        | ST (x) -> case stack of 
                      n:stack -> eval ([stack, state <- [x, n], w], insns)
                    esac
        | CONST (n) -> eval ([n:stack, state, w], insns)
      esac
    | _ -> [stack, state, w]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> {LD (x)}
    | Const (n) -> {CONST (n)}
    | Binop (op, e1, e2) -> flatten({compileExpr(e1), compileExpr(e2), {BINOP (op)}})
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
   Assn (x, e) -> flatten({compileExpr(e), {ST (x)}})
   | Seq (s1, s2) -> flatten({compileSM(s1), compileSM(s2)})
   | Skip -> {}
   | Read (x) -> {READ, ST (x)} 
   | Write (e) -> flatten({compileExpr(e), {WRITE}})
  esac
}
