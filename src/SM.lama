-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign (state@[args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)

  fun evalInstruction(c@[st, cst, s, w], i, next) {

    fun applyOperator(op, lhs, rhs) {
      -- printf("Opearator `%s` called on operands %d, %d\n", op, lhs, rhs);
      case op of 
          "+"  -> lhs + rhs
        | "-"  -> lhs - rhs
        | "*"  -> lhs * rhs
        | "/"  -> lhs / rhs
        | "%"  -> lhs % rhs
        | "==" -> lhs == rhs
        | "!=" -> lhs != rhs
        | "<"  -> lhs < rhs
        | "<=" -> lhs <= rhs
        | ">"  -> lhs > rhs
        | ">=" -> lhs >= rhs
        | "&&" -> lhs && rhs
        | "!!" -> lhs !! rhs
      esac    
    }

    fun read([stack, callStack, state, world]) {
      case readWorld(world) of 
        [value, newWorld] ->  [[value : stack, callStack, state, newWorld], Stay]
      esac 
    }

    fun write([value:tail, callStack, state, world]) {
      [[tail, callStack, state, writeWorld(value, world)], Stay]
    }

    fun drop([value:tail, callStack, state, world]) {
      [[tail, callStack, state, world], Stay]
    }

    fun dup([value:tail, callStack, state, world]) {
      [[value:value:tail, callStack, state, world], Stay]
    }

    fun binop([rhs:lhs:tail, callStack, state, world], op) {
      [[applyOperator(op, lhs, rhs):tail, callStack, state, world], Stay]
    } 

    fun push([stack, callStack, state, world], value) {
      [[value : stack, callStack, state, world], Stay]
    }

    fun store([value:stack, callStack, state, world], loc) {
      -- printf("assign %s to %s on state %s\n", value.string, loc.string, state.string);
      assign(state, loc, value);
      -- printf("now state is %s\n", state.string);
      [[value:stack, callStack, state, world], Stay]
    }

    fun storeIndirect([value:Ref(loc):stack, callStack, state, world]) {
      assign(state, loc, value);
      [[value:stack, callStack, state, world], Stay]
    }

    fun load([stack, callStack, state, world], loc) {
      --printf("state = %s", state.string);
      [[lookup(state, loc):stack, callStack, state, world], Stay]
    } 

    fun loadAddress([stack, callStack, state, world], loc) {
      [[Ref(loc):stack, callStack, state, world], Stay]
    } 

    fun label(c) {
      [c, Stay]
    }

    fun jmp(c, label) {
      case env.fromLabel(label) of 
          cmds -> [c, Goto(cmds)] 
      esac
    }

    fun cjmp([value:tail, callStack, state, world], mode, label) {
      var nextC = [tail, callStack, state, world];
      case mode of 
          "z"  -> case value of 
                      0 -> jmp(nextC, label)
                    | _ -> [nextC, Stay]
                  esac  
        | "nz" -> case value of 
                      0 -> [nextC, Stay]
                    | _ -> jmp(nextC, label)
                  esac  
      esac
    }

    fun end(c@[stack, callStack, state, world]) {
      case callStack of 
          {} -> [c, Finish]
        | [localState, programTail]:rest -> [[stack, rest, localState, world], Goto(programTail)]
      esac
    }

    fun begin(c@[stack, callStack, state, world], name, nArgs, nLocals) {

      fun addArgs(state, args, nArgs) {

        fun enumerate(lst, start) {
          case lst of 
              {}        -> {}
            | head:tail -> [start, head]:enumerate(tail, start + 1)
          esac
        }

        foldr(fun(st, arg@[i, value]) {
            assign(st, Arg(i), value); st
          }, state, enumerate(args.reverse, 0))
      }


      case take(stack, nArgs) of
          [stack, args] -> [[stack, callStack, makeState(nArgs, nLocals).addArgs(args, nArgs), world], Stay]
      esac
    }

    fun call(c@[stack, callStack, state, world], f, next) {
      [[stack, [state, next]:callStack, state, world], Goto(fromLabel(env, f))]
    }

    fun initGlobal(c@[stack, callStack, state, world], name) {
      -- assign(state, Glb(name), 0);
      [[stack, callStack, state, world], Stay]
    }

    case i of
      READ             -> read(c)
    | WRITE            -> write(c)
    | BINOP (op)       -> binop(c, op)
    | LD     (x)       -> load(c, x)
    | LDA    (x)       -> loadAddress(c, x)
    | ST     (x)       -> store(c, x)
    | STI              -> storeIndirect(c)
    | CONST  (n)       -> push(c, n)
    | LABEL  (s)       -> label(c)
    | JMP   (l)        -> jmp(c, l)
    | CJMP  (m, l)     -> cjmp(c, m, l)
    | CALL   (f, n)    -> call(c, f, next)
    | BEGIN  (f, a, l) -> begin(c, f, a, l)
    | GLOBAL (x)       -> initGlobal(c, x)
    | END              -> end(c)
    | DUP              -> dup(c)
    | DROP             -> drop(c)
    esac
  }

  fun evalProgram (c@[st, cst, s, w], insns) {
    case insns of 
        {}        ->  c
      | insn:rest ->  ( --printf("insn is %s, state=%s, stack=%s\n", insn.string, s.string, st.string);
                        case evalInstruction(c, insn, rest) of 
                          [c, Goto(cmds)] -> evalProgram(c, cmds)
                        | [c, Stay]       -> evalProgram(c, rest)
                        | [c, Finish]     -> c
                      esac)
    esac
  }
  
  --printf("program:\n%s\n", insns.showSM);

  evalProgram ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    --printf("lookup var %s\n", name);
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun processFun(env, f@Fun(name, args, body)) {
    --printf("processing function %s\n", name);
    case env.genFunLabel(name) of
      [fLabel, env] -> env.addFun(name, fLabel, size(args))
    esac
  } 

  fun processGlobals(env, names) {
    --printf("processing globals\n");
    if env.isGlobal then
      foldl (fun(code, name) { code <+ GLOBAL(name)}, emptyBuffer(), names)
    else 
      emptyBuffer()
    fi
  }

  fun registerDefs(env, defs) {
    foldl(fun (env, def) {
      case def of
          Var(_) -> env
        | Fun(name, args, body) -> 
          case lookupFun(env, name) of
            Fun(fLabel, nArgs) -> env.rememberFun(fLabel, args, body)
          esac
      esac
    }, env, defs)
  }

  fun processDefs(env, defs) {
    
    case foldl (fun([env, code], def) {
      case def of 
          Var(names)                     -> [addVars(env, names), code <+> processGlobals(env, names)]
        | function@Fun(name, args, body) -> [processFun(env,function), code]
      esac
    } , [env, emptyBuffer()], defs) of 
        [env, code] -> [env.registerDefs(defs), code]      
    esac
  }

  fun compileArgs(lab, env, args) {

    fun compileArgsImpl(lab, env, args) {
      case args of 
          {}       -> [false, env, emptyBuffer()]
        | arg:rest -> 
          case env.genLabel of 
            [nextLab, env] -> 
              case compileArgsImpl(nextLab, env, rest) of
                [usedNext, env, restCode] -> 
                  case compile(lab, env, arg) of 
                    [used, env, code] -> [used, env, restCode <+> label(nextLab, usedNext) <+> code]
                  esac
              esac
          esac   
      esac
    }
    compileArgsImpl(lab, env, args)
  }

  fun compile (lab, env, stmt) {
    --printf("stmt is `%s`\n", stmt.string);

    case stmt of
      Skip                  -> [false, env, emptyBuffer ()]
    | Var    (x)            -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)            -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)            -> [false, env, singletonBuffer (CONST (n))]
    | Const  (n)            -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)             -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
    | Write (expr)          -> 
        case env.genLabel of 
          [exprLab, env] -> 
            case compile(exprLab, env, expr) of 
              [usedExprLab, env, code] -> [false, env, 
                  code 
                  <+> label(exprLab, usedExprLab)
                  <+  WRITE]
            esac
        esac
    | Binop  (op, lhs, rhs) -> 
        case env.genLabels(2) of 
          [lhsLab, rhsLab, env] ->
            case compile(lhsLab, env, lhs) of 
              [usedLhsLab, env, lhsCode] -> 
                case compile(rhsLab, env, rhs) of 
                  [usedRhsLab, env, rhsCode] -> [false, env,
                      lhsCode
                      <+> label(lhsLab, usedLhsLab)
                      <+> rhsCode
                      <+> label(rhsLab, usedRhsLab)
                      <+  BINOP(op)]
                esac
            esac
        esac
    | Assn(Ref(name), rvalue) -> 
        case env.genLabel of 
          [rvalueLab, env] -> 
            case compile(rvalueLab, env, rvalue) of 
              [usedRvalueLab, env, code] -> ( 
                  --printf("name is %s\n", lookupVar(env, name).string); 
                  [false, env, 
                  code 
                  <+> label(rvalueLab, usedRvalueLab)
                  <+  ST(lookupVar(env, name))]
              )   
            esac
        esac
    | Assn(lvalue, rvalue) -> 
        case env.genLabels(2) of 
          [lvalueLab, rvalueLab, env] -> 
            case compile(lvalueLab, env, lvalue) of 
              [usedLvalueLab, env, lvalueCode] -> 
                case compile(rvalueLab, env, rvalue) of 
                  [usedRvalueLab, env, rvalueCode] -> [false, env,
                      lvalueCode
                      <+> label(lvalueLab, usedLvalueLab)
                      <+> rvalueCode
                      <+> label(rvalueLab, usedRvalueLab)
                      <+  STI]
                esac
            esac            
        esac
    | Seq(s1, s2)       ->
        case env.genLabel of
          [s1Lab, env] ->
             case compile (s1Lab, env, s1) of
               [s1LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, 
                        s1Code
                        <+> label (s1Lab, s1LabUsed) 
                        <+> s2Code]
                  esac
             esac
        esac
    | If (c, te, ee)     ->   
        case env.genLabels(2) of 
          [elseLabel, condLab, env] -> 
            case compile(condLab, env, c) of
              [condLabUsed, env, condition] ->
                case compile(lab, env, te) of 
                  [labUsedT, env, thenCode] -> 
                    case compile(lab, env, ee) of 
                      [labUsedE, env, elseCode] -> [true, env, 
                        condition 
                        <+> label(condLab, condLabUsed)
                        <+ CJMP("z", elseLabel)
                        <+> thenCode 
                        <+ JMP(lab)
                        <+ LABEL(elseLabel)
                        <+> elseCode] 
                    esac
                esac 
            esac
        esac    
    | While (c, b)       ->
        case env.genLabels(3) of 
          [conditionLabel, bodyLabel, afterConditionLab, env] ->
            case compile(afterConditionLab, env, c) of 
              [usedAfterLab, env, condition] -> 
                case compile(conditionLabel, env, b) of 
                  [_, env, body] -> [false, env, 
                    singletonBuffer(JMP(conditionLabel)) 
                    <+  LABEL(bodyLabel)
                    <+> body
                    <+  LABEL(conditionLabel)
                    <+> condition
                    <+> label(afterConditionLab, usedAfterLab)
                    <+  CJMP("nz", bodyLabel)]
                esac
            esac
        esac    
    | DoWhile (b, c)       ->
        case env.genLabels(3) of 
          [conditionLabel, bodyLabel, afterConditionLab, env] ->
            case compile(afterConditionLab, env, c) of 
              [usedAfterLab, env, condition] -> 
                case compile(conditionLabel, env, b) of 
                  [_, env, body] -> [false, env, 
                    singletonBuffer(LABEL(bodyLabel))
                    <+> body
                    <+  LABEL(conditionLabel)
                    <+> condition
                    <+> label(afterConditionLab, usedAfterLab)
                    <+  CJMP("nz", bodyLabel)]
                esac
            esac
        esac  
    | Ignore (expr)      -> 
        case env.genLabel of 
          [exprLab, env] -> 
            case compile(exprLab, env, expr) of 
              [usedExprLab, env, code] -> [false, env, 
                  code 
                  <+> label(exprLab, usedExprLab)
                  <+  DROP]
            esac
        esac
    | Scope (defs, expr) -> 
        case processDefs(beginScope(env), defs) of 
          [env, decls] -> 
            case compile(lab, env, expr) of 
              [used, env, code] -> [used, endScope(env), decls <+> code]                   
            esac
        esac
    | Call (name, exprs) ->
        case env.genLabels(2) of 
          [lastArgLab, returnLab, env] -> 
            case lookupFun(env, name) of 
              Fun(beginLab, nArgs) -> (
                --printf("call to function %s\n", beginLab.string);

                case compileArgs(lastArgLab, env, exprs) of 
                  [lastArgUsed, env, argsCode] -> [false, env, 
                    argsCode 
                    <+> label(lastArgLab, lastArgUsed)
                    <+  CALL(beginLab, nArgs)]
                esac
              )
            esac
        esac
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  --printf("wide statement is `%s`\n", stmt.string);

  fun compileFunctions(env) {

    fun compileFunction (env, name, args, body, state) {
      --printf("compiling function `%s`\nbody = \n%s\n", name, body.string);
      case env.genLabel of
        [endLab, env] -> 
          case compile(endLab, addArgs(beginFun(env, state), args), body) of
            [endLabUsed, env, code] -> [env,
              singletonBuffer(LABEL(name)) 
              <+ BEGIN(name, size(args), getLocals(env))
              <+> code
              <+> label(endLab, endLabUsed)
              <+ END]
          esac
      esac
    }

    fun compileFunctionsList(env, functions) {
      case functions of 
          {}                                -> 
            case getFuns(env) of 
                [{}, env]  -> emptyBuffer()
              | [fns, env] -> compileFunctionsList(env, fns) 
            esac
        | Fun(name, args, body, state):rest -> 
          case compileFunction(env, name, args, body, state) of
            [env, code] -> code <+> compileFunctionsList(env, rest)
          esac
        esac
    }

    compileFunctionsList(env, {})
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> getBuffer $ (
              var mainCode = singletonBuffer(LABEL("main")) 
              <+ BEGIN ("main", 0, getLocals(env))
              <+> code 
              <+> label (endLab, endLabUsed)
              <+ END;

              --printf("main code is %s\n", mainCode.getBuffer.showSM);
              mainCode <+> compileFunctions(env)
            )
       esac
  esac
}

