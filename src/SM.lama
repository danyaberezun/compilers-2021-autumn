-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c@[st, s, w], insns) {
  case insns of
      { }       -> c
    | i : insns ->
      case i of
          READ        -> case readWorld(w) of [n, w] -> eval(env, [n:st, s, w], insns) esac
        | WRITE       -> case st of n : st -> eval(env, [st, s, writeWorld(n, w)], insns) esac
        | BINOP (op)  -> case st of y : x : st -> eval(env, [evalOp(op, x, y):st, s, w], insns) esac
        | CONST (n)   -> eval(env, [n:st, s, w], insns)
        | LD (x)      -> eval(env, [s(x):st, s, w], insns)
        | ST (x)      -> case st of n : st -> eval(env, [st, s <- [x, n], w], insns) esac
        | JMP (l)     -> eval(env, c, fromLabel(env, l))
        | CJMP (cond, l) ->
          case st of n : st ->
            if case cond of
                "ne"  -> n
              | "e" -> n == false
            esac then eval(env, [st, s, w], fromLabel(env, l)) else eval(env, c, insns) fi
          esac
        | LABEL (l) -> eval(env, c, insns)
        | DROP -> case st of _ : st -> eval(env, [st, s, w], insns) esac
        | LDA (x) -> eval(env, [Ref(x):st, s, w], insns)
        | STI -> case st of v:Ref(x):st -> eval(env, [v:st, s <- [x, v], w], insns) esac
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

var sb = singletonBuffer;

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip               -> [false, env, emptyBuffer ()]
    | Var    (x)         -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)         -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)         -> [false, env, singletonBuffer (CONST (n))]
    | Binop (op, s1, s2) ->
      case env.genLabel of
        [opLab, env] ->
          case compile(opLab, env, Seq(s1, s2)) of
            [opLabUsed, env, opsCode] -> [false, env, opsCode <+> label(opLab, opLabUsed) <+ BINOP(op)]
          esac
      esac
    | Skip              -> [false, env, emptyBuffer()]
    | Read  (x)      -> [false, env, singletonBuffer(READ) <+ ST(x)]
    | Write (e)      ->
      case env.genLabel of
        [writeLab, env] ->
          case compile(writeLab, env, e) of
            [writeLabUsed, env, eCode] -> [false, env, eCode <+> label(writeLab, writeLabUsed) <+ WRITE]
          esac
      esac
    | Assn  (x, v)   ->
      case env.genLabel of
        [stiLab, env] ->
          case compile(stiLab, env, Seq(x, v)) of
            [stiLabUsed, env, assnCode] -> [false, env, assnCode <+> label(stiLab, stiLabUsed) <+ STI]
          esac
      esac
    | Seq   (s1, s2)                 ->
      case env.genLabel of
        [s2Lab, env] ->
          case compile(s2Lab, env, s1) of
            [s2LabUsed, env, s1Code] ->
              case compile(lab, env, s2) of
                [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
              esac
          esac
      esac
    | If (e, s1, s2) ->
      case env.genLabels(2) of
        [cjmpLabel, s1Lab, env] ->
          case compile(cjmpLabel, env, e) of
            [cjmpLabelUsed, env, eCode] ->
              case compile(lab, env, s1) of
                [_, env, s1Code] ->
                  case compile(lab, env, s2) of
                    [_, env, s2Code] ->
                      [true, env, eCode <+> label(cjmpLabel, cjmpLabelUsed) <+> CJMP("ne", s1Lab).sb <+> s2Code <+> JMP(lab).sb <+> label(s1Lab, true) <+> s1Code]
                  esac
              esac
          esac
      esac
    | While (e, s)   ->
      case env.genLabels(3) of
        [cjmpLabel, eLab, sLab, env] ->
          case compile(cjmpLabel, env, e) of
            [cjmpLabelUsed, env, eCode] ->
              case compile(eLab, env, s) of
                [_, env, sCode] ->
                  [false, env, JMP(eLab).sb <+> label(sLab, true) <+> sCode <+> label(eLab, true) <+> eCode <+> label(cjmpLabel, cjmpLabelUsed) <+> CJMP("ne", sLab).sb]
              esac
          esac
      esac
    | DoWhile (s, e) ->
      case env.genLabels(3) of
        [cjmpLabel, eLab, sLab, env] ->
          case compile(cjmpLabel, env, e) of
            [cjmpLabelUsed, env, eCode] ->
              case compile(eLab, env, s) of
                [eLabUsed, env, sCode] ->
                  [false, env, label(sLab, true) <+> sCode <+> label(eLab, eLabUsed) <+> eCode <+> label(cjmpLabel, cjmpLabelUsed) <+> CJMP("ne", sLab).sb]
              esac
          esac
      esac
    | Ignore(e) ->
      case compile(lab, env, e) of
        [labUsed, env, eCode] -> [labUsed, env, eCode <+ DROP]
      esac
    | _                 ->  failure ("compileSM not implemented for %s\n", stmt.string)
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
