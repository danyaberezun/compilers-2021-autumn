-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, st, w], insns) {
  case insns of
      {} -> c
    | ins:restInsns -> 
      case ins of 
          READ ->
            var valueWorld = readWorld(w);
            eval(env, [valueWorld.fst:stack, st, valueWorld.snd], restInsns)
        | WRITE -> 
            eval(env, [stack.tl, st, writeWorld(stack.hd, w)], restInsns)
        | BINOP (op) -> 
          case stack of
              x:y:tail -> 
                eval(env, [calculateBinaryOperation(op)(x, y):tail, st, w], restInsns)
            | _ -> failure("Too few values on stack\n")
          esac
        | LD (varname) -> eval(env, [st(varname):stack, st, w], restInsns)
        | ST (varname) -> 
          case stack of 
              x:tail -> eval(env, [tail, st <- [varname, x], w], restInsns)
            | _ -> failure("Too few values on stack\n")
          esac
        | CONST (n) -> eval(env, [n:stack, st, w], restInsns)
        | LABEL (l) -> eval(env, c, restInsns)
        | JMP (l) -> eval(env, c, env.fromLabel(l))
        | CJMP (c, l) -> 
          case stack of
              v:tail -> eval(env, [tail, st, w], if ((v == 0) && (compare(c, "z") == 0)) !! ((v != 0) && (compare(c, "nz") == 0)) then env.fromLabel(l) else restInsns fi)
          esac
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (varname) -> singletonBuffer(LD(varname))
  | Const (i) -> singletonBuffer(CONST(i))
  | Binop(op, expr1, expr2) ->
      compileExpr(expr2)
      <+> compileExpr(expr1)
      <+> singletonBuffer(BINOP(op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, thenStmt, elseStmt) -> 
        case env.genLabel of 
          [elseLabel, env] -> 
            case compile(lab, env, thenStmt) of 
              [_, env, thenCode] -> 
                case compile(lab, env, elseStmt) of 
                  [_, env, elseCode] -> 
                    [true, env, compileExpr(cond)
                                <+ CJMP("z", elseLabel)
                                <+> thenCode
                                <+ JMP(lab)
                                <+ LABEL(elseLabel)
                                <+> elseCode           
                  ]
                esac
            esac
        esac
    | While (cond, stmt) -> 
        case env.genLabels(2) of 
          [condLabel, bodyLabel, env] -> 
            case compile(condLabel, env, stmt) of  
              [_, env, bodyCode] -> 
                [false, env, singletonBuffer(JMP(condLabel))
                             <+ LABEL(bodyLabel)
                             <+> bodyCode
                             <+ LABEL(condLabel)
                             <+> compileExpr(cond)
                             <+ CJMP("nz", bodyLabel) 
                ]
            esac
        esac
    | DoWhile (stmt, cond) -> 
        case env.genLabels(2) of 
          [condLabel, bodyLabel, env] -> 
            case compile(condLabel, env, stmt) of  
              [condLabelUsed, env, bodyCode] -> 
                [false, env, singletonBuffer(LABEL(bodyLabel))
                             <+> bodyCode
                             <+> label(condLabel, condLabelUsed)
                             <+> compileExpr(cond)
                             <+ CJMP("nz", bodyLabel) 
                ]
            esac
        esac
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
