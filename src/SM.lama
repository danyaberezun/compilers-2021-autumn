-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

public fun evalBinop (op, l, r) {
   case op of
     "&&" -> l && r
   | "!!" -> l !! r
   | "==" -> l == r
   | "!=" -> l != r
   | ">"  -> l > r
   | "<"  -> l < r
   | ">=" -> l >= r
   | "<=" -> l <= r
   | "+"  -> l + r
   | "-"  -> l - r
   | "*"  -> l * r
   | "/"  -> l / r
   | "%"  -> l % r
   | op   -> failure("undefined binary operation ""%s""\n", op)
   esac
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun stepInsns (env, [stack, state, w], insn) {
  case insn of
    READ       -> case readWorld(w) of
                    [v, new_w] -> [v : stack, state, new_w]
                  esac
  | WRITE      -> case stack of
                    v:tail -> [tail, state, writeWorld(v, w)]
                  esac
  | BINOP(op)  -> case stack of
                    rhs: lhs: tail -> [evalBinop(op, lhs, rhs) : tail, state, w]
                  esac
  | LD(x)      -> [state(x) : stack, state, w]
  | LDA(x) -> [x:stack, state, w]
  | ST(x)      -> case stack of
                    v: tail -> [tail, state <- [x, v], w]
                  esac
  | STI -> case stack of 
          v:x:xs -> [v:xs, state <- [x, v], w]
          esac
  | DROP -> [tl(stack), state, w]
  | CONST(n)   -> [n : stack, state, w]
  | LABEL(s)   -> [stack, state, w]
  | JMP(l)     -> [[stack, state, w], fromLabel(env, l)]
  | CJMP(c, l) -> case stack of
                    x:xs -> case c of
                      "z" -> if (x == 0) then
                                [[xs, state, w], fromLabel(env, l)]
                            else 
                              [xs, state, w]       
                            fi
                      |"nz" -> if (x != 0) then
                                [[xs, state, w], fromLabel(env, l)]
                            else 
                              [xs, state, w]      
                            fi  
                            esac
                  esac                            
  esac
}
fun eval (env, c, insns) {
  case insns of
    {}     -> c
  | x : xs ->   case stepInsns (env, c, x) of
       c@[_, _, _] -> eval (env, c, xs)
    | [c@[_, _, _], insns] -> eval (env, c, insns)
                esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e) -> case env.genLabel of
                    [lab, env] -> case compile (lab, env, e) of
                                        [labUsed, env, eCode] -> [false, env, eCode <+> label (lab, labUsed) <+ WRITE]
                                       esac
                    esac
    | Assn  (x, e) -> case env.genLabel of
                        [exprLab, env] -> case env.genLabel of
                                            [assnLab, env] -> case compile (exprLab, env, x) of
                                              [exprLabUsed, env, code] -> case compile (assnLab, env, e) of
                                                [assnLabUsed, env, exprCode] -> [false, env, code <+> label (exprLab, exprLabUsed) <+> exprCode <+> label (assnLab, assnLabUsed) <+ STI]
                                                                                esac
                                                              esac
                                          esac
                      esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If(e, stmt1, stmt2) -> case env.genLabels(2) of
                          [condLab, elseLab, env] -> case compile(condLab, env, e) of
                            [condUsed, env, condCode] -> case compile(lab, env, stmt1) of
                              [_, env, codeTrue] -> case compile(lab, env, stmt2) of
                                [_, env, codeElse] -> [true, env, condCode <+> label(condLab, condUsed) <+ CJMP("z", elseLab)
                                                      <+> codeTrue <+ JMP(lab) <+ LABEL(elseLab) <+> codeElse]
                                                    esac
                                                esac
                                            esac
                      esac
    | While (expr, stmt) -> case env.genLabels(3) of
        [entryLab, exprLab, breakLab, env] -> 
          case compile(exprLab, env, stmt) of
            [exprLabUsed, env, stmtCode] -> 
              case compile(breakLab, env, expr) of
                [breakLabUsed, env, exprCode] -> 
                  [false, env, 
                   singletonBuffer(JMP(exprLab)) 
                   <+ LABEL(entryLab) 
                   <+> stmtCode 
                   <+ LABEL(exprLab) 
                   <+> exprCode 
                   <+> label(breakLab, breakLabUsed) 
                   <+ CJMP("nz", entryLab)]
              esac
            esac
        esac
    | DoWhile (stmt, expr) -> case env.genLabels(3) of
        [entryLab, exprLab, breakLab, env] -> 
          case compile(exprLab, env, stmt) of
            [exprLabUsed, env, stmtCode] -> 
              case compile(breakLab, env, expr) of
                [breakLabUsed, env, exprCode] -> 
                  [false, env, 
                   singletonBuffer(LABEL(entryLab)) 
                   <+> stmtCode 
                   <+> label(exprLab, exprLabUsed) 
                   <+> exprCode 
                   <+> label(breakLab, breakLabUsed) 
                   <+ CJMP("nz", entryLab)]
              esac
            esac
        esac
    | Binop (op, lhs, rhs) -> case env.genLabels(2) of
        [rhsLab, opLab, env] -> 
          case compile(rhsLab, env, lhs) of
            [rhsLabUsed, env, lhsCode] -> 
              case compile(opLab, env, rhs) of
                [opLabUsed, env, rhsCode] -> 
                  [false, env, 
                   lhsCode 
                   <+> label(rhsLab, rhsLabUsed) 
                   <+> rhsCode 
                   <+> label(opLab, opLabUsed) 
                   <+ BINOP(op)]
              esac
            esac
        esac
    | Ignore(e) ->
        case env.genLabel of
          [l, env] ->
            case compile(l, env, e) of
              [used, env, code] -> [false, env, code <+> label(l, used) <+ DROP]
            esac
        esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
