-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Jump if False
fun jmpF (label) {
  CJMP ("z", label)
}

-- Jump if True
fun jmpT (label) {
  CJMP ("nz", label)
}

fun jmpCond (c) {
  if compare (c, "z") == 0
  then fun (v) {v == 0}
  elif compare (c, "nz") == 0
  then fun (v) {v != 0}
  else failure ("Unknown jump condition")
  fi
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, [vstack, state, world], insns) {
  fun ev (vstack, state, world, insns) {
    case insns of
      ins:insns ->
        case ins of
          READ         -> case readWorld (world) of [value, newWorld] -> ev (value : vstack, state, newWorld, insns) esac
        | WRITE        -> case vstack of head:tail -> ev (tail, state, writeWorld (head, world), insns) esac
        | BINOP (s)    -> case vstack of r:l:tail -> ev (opValue (s) (l, r) : tail, state, world, insns) esac
        | LD    (x)    -> ev (state (x) : vstack, state, world, insns)
        | LDA   (x)    -> ev (x : vstack, state, world, insns)
        | ST    (x)    -> case vstack of v:_ -> ev (vstack, state <- [x, v], world, insns) esac
        | STI          -> case vstack of v:x:tail -> ev (v:tail, state <- [x, v], world, insns) esac
        | CONST (n)    -> ev (n : vstack, state, world, insns)
        | LABEL (s)    -> ev (vstack, state, world, insns)
        | JMP   (l)    -> ev (vstack, state, world, env.fromLabel (l))
        | CJMP  (c, l) ->
          case vstack of head:tail ->
            if jmpCond (c) (head)
            then ev (tail, state, world, env.fromLabel (l))
            else ev (tail, state, world, insns)
            fi
          esac
        | DUP          -> case vstack of head:_ -> ev (head:vstack, state, world, insns) esac
        | DROP         -> case vstack of _:tail -> ev (tail, state, world, insns) esac
        esac
    | {} -> [vstack, state, world]
    esac
  }

  ev (vstack, state, world, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
      case stmt of
        Skip -> [false, env, emptyBuffer ()]
      | Read (Ref (x)) -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
      | Read (e) ->
        case env.genLabel of [lab, env] ->
          case compile (lab, env, e) of [labUsed, env, eCode] ->
            [false, env, eCode <+> label (lab, labUsed) <+ READ <+ STI <+ DROP]
          esac
        esac
      | Write (e) -> 
        case env.genLabel of [lab, env] ->
          case compile (lab, env, e) of [labUsed, env, eCode] ->
            [false, env, eCode <+> label (lab, labUsed) <+ WRITE]
          esac
        esac
      | Assn (Ref (x), e) ->
        case env.genLabel of [lab, env] ->
          case compile (lab, env, e) of [labUsed, env, eCode] ->
            [false, env, eCode <+> label (lab, labUsed) <+ ST (x)]
          esac
        esac
      | Assn (x, e) ->
        case env.genLabels (2) of [lab1, lab2, env] ->
          case compile (lab1, env, x) of [lab1Used, env, xCode] ->
            case compile (lab2, env, e) of [lab2Used, env, eCode] ->
              [false, env, xCode <+> label (lab1, lab1Used) <+> eCode <+> label (lab2, lab2Used) <+ STI]
            esac
          esac
        esac
      | Seq (s1, s2) ->
        case env.genLabel of [s2Lab, env] ->
          case compile (s2Lab, env, s1) of [s2LabUsed, env, s1Code] ->
            case compile (lab, env, s2) of [labUsed, env, s2Code] -> 
              [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
            esac
          esac
        esac
      | If (expr, sThen, sElse) ->
        case env.genLabels (2) of [labCond, labMid, env] ->
          case compile (labCond, env, expr) of [labCondUsed, env, cExpr] ->
            case compile (lab, env, sThen) of [_, env, cThen] ->
              case compile (lab, env, sElse) of [_, env, cElse] ->
                [true, env, cExpr <+> label (labCond, labCondUsed) <+ jmpF (labMid) <+> cThen <+ JMP (lab) <+ LABEL (labMid) <+> cElse]
              esac
            esac
          esac
        esac
      | While (expr, stmt) ->
        case env.genLabels (3) of [labCond, lab1, lab2, env] ->
          case compile (labCond, env, expr) of [labCondUsed, env, cExpr] ->
            case compile (lab2, env, stmt) of [_, env, cStmt] ->
              [false, env, singletonBuffer (JMP (lab2)) <+ LABEL (lab1) <+> cStmt <+ LABEL (lab2) <+> cExpr <+> label (labCond, labCondUsed) <+ jmpT (lab1)]
            esac
          esac
        esac
      | DoWhile (stmt, expr) ->
        case env.genLabels (3) of [labCond, lab1, lab2, env] ->
          case compile (labCond, env, expr) of [labCondUsed, env, cExpr] ->
            case compile (lab2, env, stmt) of [used, env, cStmt] ->
              [false, env, singletonBuffer (LABEL (lab1)) <+> cStmt <+> label (lab2, used) <+> cExpr <+> label (labCond, labCondUsed) <+ jmpT (lab1)]
            esac
          esac
        esac
      | Var (name) -> [false, env, singletonBuffer (LD (name))]
      | Const (value) -> [false, env, singletonBuffer (CONST (value))]
      | Binop (op, l, r) ->
        case env.genLabels (2) of [lab1, lab2, env] ->
          case compile (lab1, env, l) of [lab1Used, env, lCode] ->
            case compile (lab2, env, r) of [lab2Used, env, rCode] ->
              [false, env, lCode <+> label (lab1, lab1Used) <+> rCode <+> label (lab2, lab2Used) <+ BINOP (op)]
            esac
          esac
        esac
      | Ignore (e) -> 
        case env.genLabel of [lab, env] ->
          case compile (lab, env, e) of [labUsed, env, eCode] ->
            [false, env, eCode <+> label (lab, labUsed) <+ DROP]
          esac
        esac
      | Ref (x) -> [false, env, singletonBuffer (LDA (x))]
      esac
    }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
       esac
  esac
}
