-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) { showSMInsn (i) ++ "\n" }, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {}    -> c
  | h : t -> eval (evalSMInsn (c, h), t)
  esac
}

fun evalSMInsn (c@[s, st, w], insn) {
  case insn of
    READ       ->
      case readWorld (w) of [x, nw] -> [x : s, st, nw] esac
  | WRITE      ->
      case s of h : t -> [t, st, writeWorld (h, w)] esac
  | BINOP (op) ->
      case s of r : l : t -> [evalBinop (op, l, r) : t, st, w] esac
  | LD    (v)  -> [st (v) : s, st, w]
  | ST    (v)  ->
      case s of h : t -> [t, st <- [v, h], w] esac
  | CONST (x)  -> [x : s, st, w]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (v)          -> { LD (v) }
  | Const (n)        -> { CONST (n) }
  | Binop (op, x, y) ->
      compileExpr (x) +++ compileExpr (y) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Skip        -> {}
  | Assn (v, e) -> compileExpr (e) +++ { ST (v) }
  | Read (v)    -> { READ, ST (v) }
  | Write (e)   -> compileExpr (e) +++ { WRITE }
  | Seq (f, s)  -> compileSM (f) +++ compileSM (s)
  esac
}
