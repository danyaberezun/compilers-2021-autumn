-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of 
    i : nsns ->
      eval(
        case i of
          READ      -> 
            case c of
              [stk, st, [fst : in, out]] -> [fst : stk, st, [in, out]]
            esac
        | WRITE     ->
            case c of
              [fst : stk, st, [in, out]] -> [stk, st, [in, fst : out]]
            esac
        | BINOP (s) -> 
            case c of
              [fst : (snd : stk), st, w] -> [
                case s of
                  "+" -> fst + snd 
                | "-" -> fst - snd 
                | "*" -> fst * snd 
                | "/" -> fst / snd 
                | "%" -> fst % snd 
                | "<" -> fst < snd 
                | "<=" -> fst <= snd 
                | ">" -> fst > snd 
                | ">=" -> fst >= snd 
                | "==" -> fst == snd 
                | "!=" -> fst != snd 
                | "!!" -> fst !! snd 
                | "&&" -> fst && snd 
                esac
              , st, w]
            esac
        | LD    (x) -> 
            case c of
              [stk, st, w] -> [st(x) : stk, st, w]
            esac
        | ST    (x) ->
            case c of
              [fst : stk, st, w] -> [stk, st <- [x, fst], w]
            esac
        | CONST (n) -> 
            case c of
              [stk, st, w] -> [n : stk, st, w]
            esac
        esac,
        nsns
      )
    | _ -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (ex) {
  case ex of 
    Var   (name) -> ST (name)
  | Const (value) -> CONST (value)
  | Binop (op, ex1, ex2) -> compileExpr(ex1) + compileExpr(ex2) + BINOP (op) 
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (val_name, ex) -> LD (val_name)
  | Seq (stmt1, stmt2)  -> compileSM(stmt1) + compileSM(stmt2)
  | Skip                -> {}
  | Read (name)         -> [READ, ST (name)]
  | Write (ex)          -> [CONST (1000), WRITE]
  esac
}
