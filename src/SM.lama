-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, st, w], insns) {
  fun jmpCompare (c, v) {
    case c of
      "z"  -> v == 0
    | "nz" -> v != 0
    esac
  }

  fun emptyStackError (op) {
    failure ("Not enough values on the stack for %s\n", op)
  }

  -- printf (">>>>\n%s", showSM(insns));
  -- printf ("---\n  stack: %s\n", stack.string);

  case insns of
    {}         -> c
  | ins : tail -> 
    case ins of
      READ  -> case readWorld (w) of [n, newW] -> eval (env, [n : stack, st, newW], tail) esac
    | WRITE ->
      case stack of
        v : stack -> eval (env, [stack, st, writeWorld (v, w)], tail)
      | _           -> emptyStackError ("WRITE")
      esac
    | BINOP (op) ->
      case stack of
        r : l : stack -> eval (env, [evalOp (op, l, r) : stack, st, w], tail)
      | _             -> emptyStackError ("BINOP")
      esac
    | LD    (x)    -> eval (env, [st (x) : stack, st, w], tail)
    | LDA   (x)    -> eval (env, [x : stack, st, w], tail)
    | ST    (x)    ->
      case stack of
        stack@(v : _) -> eval (env, [stack, st <- [x, v], w], tail)
      | _           -> emptyStackError ("ST")
      esac
    | STI          ->
      case stack of
        v : x : stack -> eval (env, [v : stack, st <- [x, v], w], tail)
      | _           -> emptyStackError ("DROP")
      esac
    | CONST (x)    -> eval (env, [x : stack, st, w], tail)
    | LABEL (_)    -> eval (env, [stack, st, w], tail)
    | JMP   (l)    -> eval (env, [stack, st, w],  env.fromLabel (l))
    | CJMP  (c, l) ->
      case stack of
        v : stack -> eval (env, [stack, st, w], if jmpCompare (c, v) then env.fromLabel (l) else tail fi)
      | _           -> emptyStackError ("CJMP")
      esac
    | DUP          ->
      case stack of
        v : stack -> eval (env, [v : v : stack, st, w], tail)
      | _           -> emptyStackError ("DUP")
      esac
    | DROP         ->
      case stack of
        _ : stack -> eval (env, [stack, st, w], tail)
      | _           -> emptyStackError ("DROP")
      esac
    | _            -> failure ("Unknown SM instruction: %s\n", ins.string)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (prog) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, expr) {
    case expr of
      Skip                         -> [false, env, emptyBuffer ()]
    | Var     (x)                  -> [false, env, singletonBuffer (LD (x))]
    | Ref     (x)                  -> [false, env, singletonBuffer (LDA (x))]
    | Const   (n)                  -> [false, env, singletonBuffer (CONST (n))]
    | Assn    (x, e)               -> -- TODO: optimize for Ref
        case x of
          Ref (x) -> case env.genLabel of
            [eLab, env] -> case compile (eLab, env, e) of
              [eLabUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eLabUsed) <+ ST (x)]
            esac
          esac
        | _       -> case env.genLabel of
            [xLab, env] -> case env.genLabel of
              [eLab, env] -> case compile (xLab, env, x) of
                [xLabUsed, env, xCode] -> case compile (eLab, env, e) of
                  [eLabUsed, env, eCode] -> [false, env, xCode <+> label (xLab, xLabUsed)
                                                    <+> eCode <+> label (eLab, eLabUsed) <+ STI]
                esac
              esac
            esac
          esac
        esac
    | Seq     (s1, s2)             ->
        case env.genLabel of
          [s2Lab, env] -> case compile (s2Lab, env, s1) of
            [s2LabUsed, env, s1Code] -> case compile (lab, env, s2) of
                [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
              esac
            esac
        esac
    | Read    (x)                  -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write   (e)                  ->
        case env.genLabel of
          [lab, env] -> case compile (lab, env, e) of
            [labUsed, env, exprCode] -> [false, env, exprCode <+> label (lab, labUsed) <+ WRITE]
          esac
        esac
    | If      (cond, tBody, eBody) ->
        case env.genLabel of
          [jmpLab, env] -> case env.genLabel of
            [elseLab, env] -> case compile (jmpLab, env, cond) of
              [jmpLabUsed, env, condCode] -> case compile (lab, env, tBody) of
                [_, env, thenCode] ->  case compile (lab, env, eBody) of
                  [_, env, elseCode] ->
                      [true, env, condCode <+> label (jmpLab, jmpLabUsed) <+ CJMP ("z", elseLab) <+> thenCode <+ JMP (lab)
                                                                              <+ LABEL (elseLab) <+> elseCode <+ JMP (lab)]
                esac
              esac
            esac
          esac
        esac
    | While (cond, body)         ->
        case env.genLabel of
          [startLab, env] -> case env.genLabel of
            [condLab, env] -> case env.genLabel of
              [jmpLab, env] -> case compile (condLab, env, body) of
                [condLabUsed, env, bodyCode] -> case compile (jmpLab, env, cond) of
                  [jmpLabUsed, env, condCode] ->
                      [false, env, singletonBuffer (JMP (condLab)) <+ LABEL (startLab) <+> bodyCode
                               <+ LABEL (condLab) <+> condCode <+> label (jmpLab, jmpLabUsed) <+ CJMP ("nz", startLab)]
                esac
              esac
            esac
          esac
        esac
    | DoWhile (body, cond)         ->
        case env.genLabel of
          [startLab, env] -> case env.genLabel of
            [condLab, env] -> case env.genLabel of
              [jmpLab, env] -> case compile (condLab, env, body) of
                [condLabUsed, env, bodyCode] -> case compile (jmpLab, env, cond) of
                  [jmpLabUsed, env, condCode] ->
                      [false, env, singletonBuffer (LABEL (startLab)) <+> bodyCode
                               <+> label (condLab, condLabUsed) <+> condCode <+> label (jmpLab, jmpLabUsed) <+ CJMP ("nz", startLab)]
                esac
              esac
            esac
          esac
        esac
    | Binop   (op, left, right)    ->
        case env.genLabel of
          [leftLab, env] -> case env.genLabel of
            [rightLab, env] ->  case compile (leftLab, env, left) of
              [leftLabUsed, env, leftCode] -> case compile (rightLab, env, right) of
                [rightLabUsed, env, rightCode] ->
                    [false, env, leftCode <+> label (leftLab, leftLabUsed) <+> rightCode <+> label (rightLab, rightLabUsed) <+ BINOP (op)]
              esac
            esac
          esac
        esac
    | Ignore  (e)                  ->
        case env.genLabel of
          [dropLab, env] -> case compile (dropLab, env, e) of
            [dropLabUsed, env, exprCode] -> [false, env, exprCode <+> label (dropLab, dropLabUsed) <+ DROP]
          esac
        esac
    | _  -> failure ("Unknown expression: %s\n", expr.string)
    esac
  }
  -- printf ("> %s\n", prog.string);

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, prog) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
