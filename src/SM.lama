-- -- Stack machine.
-- -- стековая машина - просто список инструкций , который интепретирует все комманды в x86
-- -- вообще мы делаем такую цепочку: lama -> sm -> x86

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}


public fun do_atomic_operation(c,insn) {
  var stack = c[0];
  var state = c[1];
  var world = c[2];
  case insn of
    CONST (n) -> ( var new_stack = n : stack; [new_stack, state, world]) -- просто положить значение на стек 
  | BINOP (op) -> case stack of
                  b : a : new_stack -> ( var res = calcBinop (op) (a, b);
                    [res : new_stack, state, world] )
                esac
  | READ -> ( -- прочитать значение и положить на стэк
      var read_result = readWorld (world);
      var value = read_result[0];
      var new_world = read_result[1];
      [value : stack, state, new_world])
  | WRITE -> case stack of 
              top : new_stack -> ( var new_world = writeWorld (top, world);
                [new_stack, state, new_world])
            esac
  | LD (x) -> ( -- загрузить переменную из памяти и положить на стэк
      var temp = state (x);
      var new_stack = temp : stack;
      [new_stack, state, world] )
  | ST (x) -> case stack of -- store value в стэк (взять со стека значение и положить в переменную окружения v)
                        top : new_stack -> ( -- из стека перетаскивает с state значение переменной
                        var new_state = state <- [x, top];
                        [new_stack, new_state, world] )
                    esac
  esac
}


-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
  0 -> c
  | top_instruction : xs -> eval(do_atomic_operation(c,top_instruction),xs)
  esac
}

 -- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
 eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
 }

-- -- Compiles an expression into a stack machine code.
-- -- Takes an expression, returns a list (of, possibly, lists)
-- -- of stack machine instructions
 fun compileExpr (expr) {
    case expr of
    Var (v) -> { LD (v) }
    | Const (c) -> { CONST (c) }
    | Binop (op, a, b) -> compileExpr (a) +++ compileExpr(b) +++ { BINOP(op) }
     esac
 }

-- -- Compiles a statement into a stack machine code.
-- -- Takes a statement, returns a list of stack machine
-- -- instructions.
 public fun compileSM (stmt) {
    case stmt of
    Assn (name, expr) -> compileExpr (expr) +++ { ST (name) }
    | Seq  (a, b) -> compileSM (a) +++ compileSM (b)
    | Read (name) -> {READ, ST (name) }
    | Write (expr) -> compileExpr (expr) +++ { WRITE }
    | Skip -> {}
  esac
 }