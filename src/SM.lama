-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Returns either new configuration for program or new configuration and new program instructions that are left to execute
-- Returns: c | [c, insns]
fun evalSingleInsn (env, c@[stack, st, w], ins) {
  -- printf("evalSingleInsn(): ins=%s, stack=%s\n", ins.string, stack.string);

  case ins of
    READ ->
      case readWorld (w) of
        [v, wld] -> [v : stack, st, wld]
      esac
  | WRITE -> [tl (stack), st, writeWorld (hd (stack), w)]
  | BINOP (op) ->
    case stack of 
      y : x : rest -> [evalOp (op, x, y) : rest, st, w]
    | _ -> failure ("Stack does not have enough elements. Required >=2 for BINOP.")
    esac
  | LD  (x) -> [st (x) : stack, st, w]
  | LDA (x) -> [x : stack, st, w]
  | ST  (x) -> [stack, st <- [x, hd (stack)], w]
  | STI     ->
    case stack of
      v : x : rest -> [v : rest, st <- [x, v], w]
    | _ -> failure ("Stack does not have enough elements. Required >=2 for STI.")
    esac
  | DROP   -> [tl (stack), st, w]
  | CONST (n) -> [n : stack, st, w]
  | LABEL (s) -> c
  | JMP (l) -> [c, fromLabel (env, l)]
  | CJMP (cond, l) ->
    case [cond, hd (stack)] of 
      ["nz", 0] -> [tl (stack), st, w]
    | ["z",  0] -> [[tl (stack), st, w], fromLabel (env, l)]
    | ["nz", _] -> [[tl (stack), st, w], fromLabel (env, l)]
    | ["z",  _] -> [tl (stack), st, w]
    esac
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  -- printf("eval(): c=%s, insns=%s\n", c.string, insns.string);
  -- fun getLength (arr) {
  --   case arr of
  --     a : rest -> (1 + getLength (rest))
  --   | _ -> 0 
  --   esac
  -- }
  -- printf("eval(): insnsLen=%s\n", insns.string);

  case insns of 
    {} -> c
  | ins : rest ->
      case evalSingleInsn (env, c, ins) of
        [c, prog] -> eval (env, c, prog)
      | c         -> eval (env, c, rest)
      esac
  esac
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {  
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  -- Generates SM code for a given statement
  --    lab  --- a label to go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip                -> [false, env, emptyBuffer ()]
    | Var    (x)          -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)          -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)          -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)          ->
        case env.genLabel of 
          [lab1, env] ->
            case compile (lab1, env, e) of
              [used, env, code] -> [false, env, code <+> label (lab1, used) <+ DROP]
            esac
        esac
    | Binop  (op, e1, e2) ->
        case env.genLabels(2) of
          [lab1, lab2, env] ->
            case compile (lab1, env, e1) of
              [used1, env, code1] ->
                case compile (lab2, env, e2) of
                  [used2, env, code2] -> [false, env, code1 <+> label (lab1, used1) <+> code2 <+> label (lab2, used2) <+ (BINOP (op))]
                esac
            esac
        esac
    | Read   (x)          -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write  (e)          ->
        case env.genLabel of
          [lab1, env] -> 
            case compile (lab1, env, e) of
              [used1, env, code] -> [false, env, code <+> label (lab1, used1) <+ WRITE]
            esac
        esac
    | Assn   (x, e)       ->
        case env.genLabels(2) of 
          [labX, labE, env] ->
            case compile (labX, env, x) of
              [usedX, env, codeX] ->
                case compile (labE, env, e) of
                  [usedE, env, codeE] -> [false, env, codeX <+> label (labX, usedX) <+> codeE <+> label (labE, usedE) <+ STI]
                esac
            esac
        esac
    | Seq    (s1, s2)     ->
        case env.genLabel of
          [s2Lab, env] ->
              case compile (s2Lab, env, s1) of
                [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
              esac
        esac
    | If     (e, s1, s2)  -> 
        case env.genLabel of
          [conditionFalseLabel, env] ->
            case compile (lab, env, s1) of
              [_, env, trueBranchCode] ->
                case compile (lab, env, s2) of
                  [_, env, falseBranchCode] ->
                    case env.genLabel of 
                      [exprLabel, env] ->
                        case compile (exprLabel, env, e) of
                          [exprLabelUsed, env, exprCode] -> [true, env, exprCode <+> label (exprLabel, exprLabelUsed) <+ CJMP ("z", conditionFalseLabel) <+> trueBranchCode <+ JMP (lab) <+ LABEL (conditionFalseLabel) <+> falseBranchCode]
                        esac
                    esac
                esac
            esac
        esac
    | While  (e, s)       ->
        case env.genLabels(3) of
          [conditionLabel, bodyLabel, exprLabel, env] ->
            case compile (conditionLabel, env, s) of
              [_, env, bodyCode] ->
                case compile (exprLabel, env, e) of
                  [exprLabelUsed, env, exprCode] -> [false, env, singletonBuffer (JMP (conditionLabel)) <+ LABEL (bodyLabel) <+> bodyCode <+ LABEL (conditionLabel) <+> exprCode <+> label (exprLabel, exprLabelUsed) <+ CJMP ("nz", bodyLabel)]
                esac
            esac
        esac
    | DoWhile (s, e)      ->
        case env.genLabels(3) of
          [bodyLabel, conditionLabel, exprLabel, env] -> 
            case compile (conditionLabel, env, s) of
              [_, env, bodyCode] ->
                case compile (exprLabel, env, e) of
                  [exprLabelUsed, env, exprCode] -> [false, env, singletonBuffer (LABEL (bodyLabel)) <+> bodyCode <+ LABEL (conditionLabel) <+> exprCode <+> label (exprLabel, exprLabelUsed) <+ CJMP ("nz", bodyLabel)]
                esac
            esac
        esac
    | _                   ->  failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
