-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBA (x)       -> sprintf ("GLOBA %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  fun assignArgs(state@[args, locals], argVals) {
    fun foo(i, arg) {
      assign(state, Arg (i), arg);
      i + 1
    }
    foldl(foo, 0, argVals)
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun evalSingle(c@[stack, callStack, state, world], ins) {
    -- var tstt = printf("in eval single, ins: %s\n", ins.string);
    -- var tstsdfsfd = printf("in eval single, stack: %s\n", stack.string);
    case ins of
    BINOP (oper) -> (
      case stack of 
        r : l : tail -> (
          -- var sdfs = printf("r: %s, l: %s\n", r.string, l.string);
          [evalOp(oper, l, r) : tail, callStack, state, world]
        )
      esac
    )
    | LD (x) ->  [lookup(state, x) : stack, callStack, state, world]
    | ST (x) -> (
      case stack of 
        hd : tail -> (
          assign(state, x, hd);
          [stack, callStack, state, world]
        )
      esac
    )
    | CONST(n) -> [n : stack, callStack, state, world]
    | LABEL(s) -> (
      c
    )
    | LDA(x) -> 
      [ x : stack, callStack, state, world]
    | STI -> 
      case stack of 
        v : x : s -> 
        (
          assign(state, x, v);
          [v : s, callStack, state, world]
        )
      esac
    | DROP -> 
      case stack of
        {} -> [{}, callStack, state, world]
      | hd : tail -> [tail, callStack, state, world]
      esac 
    | GLOBA (x) -> (
      assign(state, Glb(x), 0);
      [stack, callStack, state, world]
    )
    | ARRAY (n) -> 
      case take(stack, n) of 
        [boxedSize : stackTail, elems] -> [listArray(elems) : stackTail, callStack, state, world]
      esac
    | STRING (s) -> [s : stack, callStack, state, world]
    | SEXP (_, n) ->
      case take(stack, n) of 
        [boxedSize : stackTail, elems] -> [listArray(elems) : stackTail, callStack, state, world]
      esac
    | STA -> 
      case stack of 
        elem : i : arr : stackTail -> (
          arr[i] := elem;
          [elem : stackTail, callStack, state, world]
        )
      esac
    | ELEM -> 
      case stack of 
        i : arr : stackTail -> [arr[i] : stackTail, callStack, state, world]
      esac
    | BUILTIN (funName, n) -> 
      case take(stack, n) of
        [stackTail, args] -> 
          case evalBuiltin(funName, args, world) of 
            [response, world] -> [response : stackTail, callStack, state, world]
          esac
      esac
    esac
  }

  fun eval2 (env, c@[stack, callStack, state, world], insns) {
    -- printf("insns: \n%s\n", showSM(insns));
    case insns of 
      hd : tail -> (
        -- var keks = printf("cur inst: %s\n", showSMInsn(hd));
        -- var www = printf("stack: %s\n", stack.string);
        case hd of 
          JMP(l) ->
            eval2 (env, c, fromLabel(env, l))
        | CJMP ("z", l) -> 
          case stack of value : stackTail ->
            eval2(env, [stackTail, callStack, state, world], if value == 0 then fromLabel(env, l) else tail fi)
          esac
        | CJMP ("nz", l) -> 
          case stack of value : stackTail -> 
            eval2(env, [stackTail, callStack, state, world], if value == 1 then fromLabel(env, l) else tail fi)
          esac
        | END -> 
          case callStack of 
            {} -> c
          | [topState, topRetPoint] : callStackTail -> (eval2(env, [stack, callStackTail, topState, world], topRetPoint))
          esac
        | CALL(funName, argCnt) -> eval2(env, [stack, [state, tail] : callStack, state, world], env.fromLabel(funName))
        | BEGIN(funName, argCnt, localCnt) ->
          case take(stack, argCnt) of 
            [stack, args] -> (
              var newState = makeState(argCnt, localCnt);
              assignArgs(newState, args);
              eval2(env, [stack, callStack, newState, world], tail)
            )
          esac 
        | oth -> eval2(env, evalSingle(c, hd), tail)
        esac
      )
    | {} -> c
    esac
  }
  -- var xxxx = printf("Insns to eval: %s\n", showSM(insns));
  eval2 (env,[{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBA instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile_single_label(env, expr) {
    case env.genLabel of
      [lab, env] ->
        case compile (lab, env, expr) of
          [labUsed, env, code] -> [env, code <+> label (lab, labUsed)]
        esac
    esac
  }

  fun compile_double_label(env, expr1, expr2) {
    case compile_single_label(env, expr1) of 
      [env, code] -> 
        case compile_single_label(env, expr2) of 
          [env, code2] -> [env, code <+> code2]
        esac
    esac
  }

  fun collectDefs([env, funcs, globalDefs], def) {
    case def of 
      Var (names) -> [addVars(env, names), funcs,  if env.isGlobal
                                                    then map (fun (name) { GLOBA (name) }, names)
                                                    else {}
                                                    fi
                                                    +++ globalDefs ]
    | Fun (name, args, body) -> 
      case genFunLabel(env, name) of 
        [funcLabel, env] -> [addFun(env, name, funcLabel, size(args)), [funcLabel, args, body] : funcs, globalDefs]
      esac
    esac
  }

  fun rememberFun2(env, [funcLabel, args, body]) {
    rememberFun(env, funcLabel, args, body)
  }
  
  fun compile (lab, env, stmt) {
    -- var ttt = printf("Cur compiling stmt: %s\n", stmt.string);
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (env.lookupVal(x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (env.lookupVar(x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Binop  (op, l, r) -> 
      case compile_double_label(env, l, r) of
        [env, code]     -> [false, env, code <+ BINOP(op)] 
      esac
    | Set(x, e)         -> compile(lab, env, Assn(Ref(x), e))
    | Assn  (x, e)      -> (
      case compile_double_label(env, x, e) of 
        [env, code]     -> 
          case x of 
            ElemRef(_, _) -> [false, env, code <+ STA]
          | _ -> [false, env, code <+ STI]
          esac
      esac
    )
    | Seq   (s1, s2) -> (
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of 
                    [labUsed, env, s2Code] -> ([labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code])
                  esac
             esac
        esac
    )
    | If(e, s1, s2) ->
      case env.genLabels(2) of 
        [s1_end_label, s2_begin_label, env] ->
          case compile(s1_end_label, env, s1) of 
            [s1_end_used, env, s1_code] -> 
              case compile(lab, env, s2) of
                [lab_used, env, s2_code] -> (
                  case compile_single_label(env, e) of 
                    [env, code_e] -> [true, env, 
                      code_e <+
                      CJMP("z", s2_begin_label) <+>
                      s1_code <+> 
                      label (s1_end_label, s1_end_used) <+
                      JMP(lab) <+>
                      label(s2_begin_label, true) <+>
                      s2_code <+
                      JMP(lab)
                    ]
                  esac
                )
              esac
          esac
      esac
    | While(e, s) ->
      case env.genLabels(2) of 
        [l_e, l_s, env] -> 
        case compile(l_e, env, s) of
          [l_e_used, env, s_code] ->
          case compile_single_label(env, e) of 
            [env, code_e] -> [true, env,
              singletonBuffer(JMP(l_e)) <+>
              label (l_s, true) <+>
              s_code <+>
              label(l_e, true) <+>
              code_e <+
              CJMP("nz", l_s) <+
              JMP(lab)
            ]
          esac    
        esac
      esac
    | DoWhile(s, e) ->
      case env.genLabels(2) of 
        [s_begin, s_end, env] ->
        case compile(s_end, env, s) of 
          [s_end_used, env, s_code] ->
          case compile_single_label(env, e) of 
            [env, code_e] ->
              [true, env, 
              label(s_begin, true) <+>
              s_code <+>
              label(s_end, s_end_used) <+>
              code_e <+
              CJMP("nz", s_begin) <+
              JMP(lab)
            ]
          esac
        esac
      esac
    | Ignore(e) ->
      case compile_single_label(env, e) of 
        [env, code] -> [false, env, code <+ DROP]
      esac
    | Scope(defs, expr) -> 
      case foldl(collectDefs, [ beginScope(env), {}, {}], defs) of 
        [env, funcs, globalDefsCode] ->
        (
          case compile(lab, foldl(rememberFun2, env, funcs), expr) of
            [flag, env, code] -> [flag, endScope (env), listBuffer(globalDefsCode +++ getBuffer(code))]
          esac
        )
      esac
    | Call(func, args) ->
      case foldl(
                fun ([env, argsCode], arg) {
                  case compile_single_label(env, arg) of
                    [env, code] -> [env, argsCode <+> code]
                  esac
                },
                [env, emptyBuffer()],
                args
                ) of
        [env, argsCode] -> 
          case lookupFun(env, func) of 
            Fun (funcLabel, argCnt) -> [false, env, argsCode <+  if funcLabel[0] != '$' then  CALL(funcLabel, argCnt) else BUILTIN(func, argCnt) fi]
          esac      
      esac
    | String(s) -> [false, env, singletonBuffer(STRING(s))]
    | Array(args) -> 
      case foldl(
                fun ([env, argsCode], arg) {
                  case compile_single_label(env, arg) of
                    [env, code] -> [env, argsCode <+> code]
                  esac
                },
                [env, emptyBuffer()],
                args
                ) of
        [env, argsCode] -> [false, env, singletonBuffer(CONST (size(args))) <+> argsCode <+ ARRAY (size(args))]
      esac
    | Sexp(name, args) ->
      case foldl(
                fun ([env, argsCode], arg) {
                  case compile_single_label(env, arg) of
                    [env, code] -> [env, argsCode <+> code]
                  esac
                },
                [env, emptyBuffer()],
                args
                ) of
        [env, argsCode] -> [false, env, singletonBuffer(CONST (1 + size(args))) <+> argsCode <+ SEXP(name, size(args))]
      esac
    | Elem (arr, i) ->
      case foldl(
                fun ([env, argsCode], arg) {
                  case compile_single_label(env, arg) of
                    [env, code] -> [env, argsCode <+> code]
                  esac
                },
                [env, emptyBuffer()],
                {arr, i}
                ) of
        [env, argsCode] -> [false, env, argsCode <+ ELEM]
      esac
    | ElemRef (arr, i) ->
      case foldl(
                fun ([env, argsCode], arg) {
                  case compile_single_label(env, arg) of
                    [env, code] -> [env, argsCode <+> code]
                  esac
                },
                [env, emptyBuffer()],
                {arr, i}
                ) of
        [env, argsCode] -> [false, env, argsCode]
      esac
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

    fun compileFunction(env, f@Fun(funcLabel, args, body, state)) {
    case addArgs(beginFun(env, state), args) of 
      env -> 
        case compile_single_label(env, body) of
          [env, code] -> compileFunctions(env, 
            emptyBuffer() <+ 
            LABEL(funcLabel) <+ 
            BEGIN (funcLabel, size(args), getLocals(env)) <+>
            code <+
            END
          )
        esac
    esac
  }

  fun compileFunction2([env, prevCode], func) {
    case compileFunction(env, func) of 
      [env, funcCode] -> [env, prevCode <+> funcCode]
    esac
  }

  fun compileFunctions(env, code) {
    case getFuns(env) of 
      [funcs, env] ->  foldl(compileFunction2, [env, code], funcs)
    esac
  }

  case compile_single_label(initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1), stmt) of 
    [env, code] -> (
      var compiledF = compileFunctions(env, emptyBuffer())[1];
      var tt = getBuffer(
        singletonBuffer (LABEL("main")) <+
        BEGIN("main", 0, getLocals(env)) <+>
        code <+
        END <+>
        compiledF
      );
      tt
    )
  esac
}
