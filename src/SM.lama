-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}


fun resolveCJMPToInst(env, label, mode, h, tInst) {
    case mode of
     "nz" -> if h then env.fromLabel (label) else tInst fi
    | "z" -> if h then tInst else env.fromLabel (label) fi
    esac
}


-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun processArgsAssign(st, args) {
   foldl (fun (i, arg) {
     assign (st, Arg(i), arg);
     i + 1
    }
    , 0, args);
   st
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[top_s, cst, st, w], insns) {
--  printf("%s\n", insns.string);
  case insns of
    ins:t -> case ins of
      READ -> (
            var outR = readWorld(w);
            eval([outR.fst:top_s, cst, st, outR.snd], t)
      )
      | WRITE -> case top_s of
            h:tail -> (
                var outR = writeWorld(h, w);
                eval([tail, cst, st, outR], t)
        )
        esac
      | BINOP (op) -> case top_s of
        x:y:tail -> (
            var res = evalOp(op, y, x);
            eval([res:tail, cst, st, w], t)
        )
       esac
      | DROP -> case top_s of
            h:tail -> eval([tail, cst, st, w], t)
       esac
      | LD (x) -> case st.lookup(x) of
            loc -> eval ([loc:top_s, cst, st, w], t)
        esac
      | LDA(x) -> eval ([ Ref (x):top_s, cst, st, w], t)
      | ST (x) -> case top_s of
            h:tail -> (
                st.assign(x, h); -- !
                eval([top_s, cst, st, w], t)
            )
       esac
      | STI -> case top_s of
        x:Ref (y) : tail -> (
            st.assign(y, x);
--            var newConf = [x:tail, cst, st , w];
            eval ([x:tail, cst, st , w], t)
        )
       esac
      | CONST (x) -> eval([x:top_s, cst, st, w], t)
      | LABEL (l) -> eval(c, t)
      | JMP (l) -> (
         var resolved = fromLabel(env, l);
         eval(c, resolved)
      )
--      | CJMP (mode, l) -> case top_s of
--          h:tail ->
--             var inst = env.resolveCJMPToInst(l, mode, h, t);
----             printf("%s ", inst);
--             eval([tail, cst, st, w], inst)
--       esac
--     | GLOBAL (v) -> (
--        assign(st, Glb(v), 0);
--        eval(c, t)
--     )
--     | BEGIN (f, argN, lv) -> case take(top_s, argN) of
--            [s, args] -> ( var prepSt = makeState(argN, lv);
--                        eval([s, cst, prepSt.processArgsAssign(args), w], t)
--                        )
--        esac

     | _ -> failure("instruction %s is not implemented", ins.string)
     esac
   | {} -> c
   esac
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD ( env.lookupVar(x) ))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA ( env.lookupVar(x) ))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (env.lookupVar(x) )]
    | Write (e)      -> case genLabel(env) of
            [labSt, env] -> case compile(labSt, env, e) of
               [_, newEnv, expr] -> [false, newEnv, expr <+> singletonBuffer(WRITE)]
            esac
      esac
    | Assn  (x, e) -> case genLabels(env, 2) of
        [lF, lS, env] ->
            case compile(lF, env, x) of
                   [_, newEnv, lhs] ->  case compile(lS, newEnv, e) of
                            [_, newEnv, expr] -> [false, newEnv, lhs <+> expr <+> singletonBuffer(STI)]
                esac
            esac
        esac
    | Binop (s, lhs, rhs) -> case genLabels(env, 2) of
            [lF, lS, env] -> case compile(lF, env, lhs) of
                      [_, newEnv, lhsR] -> case compile(lS, newEnv, rhs) of
                          [_, newEnv, rhsR] -> [false, newEnv, lhsR <+> rhsR <+ BINOP(s) ]
                          esac
            esac
        esac
    | Seq (s1, s2) ->
    -- perhaps i dont need this
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
-- syntax highlight bug with (**)
-- something like:
--        // cond
--        cjmp trueL
--        // code for else
--        jmp endIF
--      trueL:
--        //code
--      endIF:
    | If (cond, tb, fb) ->
        case env.genLabels(2) of
            [trueL, endL, newEnv] -> case compile(trueL, newEnv, tb) of
                    [trueLUsed, newEnv, trBlock] -> case compile(endL, newEnv, fb) of
                              [falseLUsed, newEnv, flsBlock] -> case compile(trueL, newEnv, cond) of
                                    [_, newEnv, condBlock] ->
                                                    [true, newEnv,
                                                    condBlock <+ CJMP ("nz", trueL) <+> flsBlock
                                                    <+ JMP (endL) <+ LABEL (trueL) <+> trBlock <+ LABEL (endL) ]
                            esac
                        esac
                esac
        esac
    (*
        jmp condL
    trueL: // code
    condL:
        cjmp trueL
    *)
    | While (cond, block) ->
        case env.genLabels(3) of
            [openCondL, condL, loopL, newEnv] -> case compile(condL, newEnv, cond) of
                    [openCondUsed, newEnv, blockSt] -> case compile(loopL, newEnv, block) of
                                [_, newEnv, condBlock]  ->    [true, newEnv, singletonBuffer(JMP (openCondL)) <+ LABEL (loopL) <+> blockSt
                                                              <+ LABEL (openCondL) <+> condBlock
                                                                                  -- cond.compileExpr() gives seg fault
                                                              <+ LABEL (condL)  <+ CJMP("nz", loopL) ]
                       esac
                esac
        esac
--    | DoWhile (block, cond) ->
--        case genLabel(env) of
--            [loopL, newEnv] -> case compile("", newEnv, block) of
--                    [loopLUsed, newEnv, blockSt] -> case compile("", newEnv, cond) of
--                               [_, newEnv, condBlock] -> [true, newEnv, singletonBuffer(LABEL (loopL)) <+> blockSt <+> condBlock <+ CJMP("nz", loopL) ]
--                     esac
--                esac
--        esac
    | Ignore (e) -> case genLabel(env) of
        [lSt, env] -> case compile (lSt, env, e) of
                [_, newEnv, exprC] -> [false, newEnv, exprC <+ LABEL (lSt) <+ DROP]
        esac
      esac
    | Scope (defs, ex) -> case beginScope(env) of env ->
            case traverseDefs(env, defs) of
                [env, fs, code] -> (
                    var updEnv = rememberFuncs(env, fs);
--                    printf("%s", ex);
                    case compile(lab, updEnv, ex) of
                        [labUsed, env, code] -> [labUsed, endScope(env), fs <+> code]
                    esac
                )
            esac
      esac

    | v                ->  failure ("%s compileSM not implemented\n", v)
    esac
  }

    fun traverseDefs(env, defs) {
        case defs of
          {} -> [env, {}, {}]
          | h: tail -> case h of
             Fun (name, args, body) -> case env.genFunLabel(name) of
                 [lab, env] -> (
                    var newEnv = env.addFun(name, lab, size(args));
                    case traverseDefs(newEnv, tail) of
                        [newEnv, name, d] -> [newEnv, [lab, args, body] :name, d]
                    esac
                 )
             esac
            | Var (names) -> (
                    var newEnv = env.addVars(names);
                    if isGlobal(env)
                    then case traverseDefs(newEnv, tail) of
                            [newEnv, f, d] -> [newEnv, f, foldl (fun (l, v) {GLOBAL (v): l }, d, names)]
                         esac
                    else traverseDefs(newEnv, tail)
                    fi
            )
            esac
        esac
    }

    fun rememberFuncs(env, funcs) {
        foldl(fun (env, [func, arg, body]) { env.rememberFun(func, arg, body) }, env, funcs)
    }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
--           singletonBuffer(LABEL ("main")) <+ BEGIN ("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed)
       esac
  esac
}

