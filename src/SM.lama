-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalInsn ([stack, state, world], i) {
  case i of
    READ ->
      (var rvl = readWorld(world);
       [rvl.fst:stack, state, rvl.snd])
  | WRITE -> [tl (stack), state, writeWorld (hd (stack), world)]
  | BINOP (s) ->
      (var value = evalBinop (s, hd (stack), hd (tl (stack)));
       [value : tl (tl (stack)), state, world])
  | LD (x) -> [state (x) : stack, state, world]
  | ST (x) ->
      (var newState = state <- [x, hd (stack)];
       [tl (stack), newState, world])
  | CONST (n) -> [n:stack, state, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (evalInsn, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x)              -> { LD (x) }
  | Const (x)            -> { CONST (x) }
  | Binop (op, lhs, rhs) ->
    (var lhsComp = compileExpr (lhs);
     var rhsComp = compileExpr (rhs);
     rhsComp +++ lhsComp +++ { BINOP (op) })
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, expr) -> compileExpr (expr) +++ { ST (x) }
  | Skip           -> {}
  | Read (x)       -> { READ, ST (x) }
  | Write (expr)   -> compileExpr (expr) +++ { WRITE }
  | Seq (lhs, rhs) -> compileSM (lhs) +++ compileSM (rhs)
  esac
}
