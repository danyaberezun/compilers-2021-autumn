-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (conf@[stack, cst, state, world], prog) {
  case prog of
    {} -> conf
  | ins : prog ->
      -- printf ("ins = %s, stack = %s, state = %s\n", ins.string, stack.string, state.string);
      case ins of
        READ -> case world.readWorld of [x, world] -> eval ([x : stack, cst, state, world], prog) esac
      | WRITE -> case stack of x : stack -> eval ([stack, cst, state, writeWorld (x, world)], prog) esac
      | CONST (x) -> eval ([x : stack, cst, state, world], prog)
      | LD (name) -> eval ([lookup (state, name) : stack, cst, state, world], prog)
      | ST (name) ->
          case stack of x : stack ->
            assign (state, name, x);
            eval ([x : stack, cst, state, world], prog)
          esac
      | LDA (name) -> eval ([name : stack, cst, state, world], prog)
      | STI ->
          case stack of name : x : stack ->
            assign (state, name, x);
            eval ([x : stack, cst, state, world], prog)
          esac
      | BINOP (op) ->
          case stack of y : x : stack ->
              var z = evalOp (op, x, y);
              eval ([z : stack, cst, state, world], prog)
          esac
      | LABEL (lab) -> eval (conf, prog)
      | JMP (lab) -> eval (conf, env.fromLabel (lab))
      | CJMP ("nz", lab) -> case stack of x : stack ->
          if x != 0
          then eval ([stack, cst, state, world], env.fromLabel (lab))
          else eval ([stack, cst, state, world], prog)
          fi esac
      | CJMP ("z", lab) -> case stack of x : stack ->
          if x == 0
          then eval ([stack, cst, state, world], env.fromLabel (lab))
          else eval ([stack, cst, state, world], prog)
          fi esac
      | CALL (fn, argCount) -> eval ([stack, [state, prog, stack.size] : cst, state, world], fromLabel (env, fn))
      | BEGIN (fn, argCount, localsCount) ->
          case take (stack, argCount) of [stack, args] ->
            eval(
                [ stack
                , cst
                , [args.listArray, initArray (localsCount, fun (_) { 0 })]
                , world
                ]
              , prog
            )
          esac
      | GLOBAL (name) -> eval (conf, prog)
      | END ->
          case cst of
            {} -> conf
          | [state, prog, stackSize] : cst ->
              if stackSize < stack.size
              then eval ([stack, cst, state, world], prog)
              else eval ([0 : stack, cst, state, world], prog)
              fi
          esac
      -- | DUP -> case stack of x : stack -> eval ([x : x : stack, cst, state, world], prog) esac
      | DROP -> case stack of x : stack -> eval ([stack, cst, state, world], prog) esac
      esac
  esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileInner (env, ex) {
    case env.genLabel of [lab, env] ->
      case compile (lab, env, ex) of [labUsed, env, exCode] ->
        [ env, exCode <+> label (lab, labUsed) ]
      esac
    esac
  }

  fun appendIns (env, expr, ins) {
    case compileInner (env, expr) of [env, code] ->
      [false, env, code <+ ins]
    esac
  }

  fun makeLoop (lab, env, cond, body, skipInit) {
    case env.genLabel of [bodyBegLab, env] ->
    case env.genLabel of [condLab, env] ->
    case compile (condLab, env, body) of [condLabUsed, env, bodyCode] ->
    case compile (lab, env, cond) of [labUsed, env, condCode] ->
      [ labUsed , env
      , if skipInit
        then singletonBuffer (JMP (condLab))
        else emptyBuffer()
        fi
        <+ LABEL (bodyBegLab)
        <+> bodyCode
        <+> label (condLab, skipInit !! condLabUsed)
        <+> condCode
        <+ CJMP ("nz", bodyBegLab)
      ]
    esac esac esac esac
  }

  fun compile (lab, env, stmt) {
    -- printf ("N locals = %d, compiling %s\n", env.getLocals, stmt.string);
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (ex) -> appendIns (env, ex, DROP)
    | Seq (lhs, rhs) ->
        case compileInner (env, lhs) of [env, lhsCode] ->
          case compile (lab, env, rhs) of [labUsed, env, rhsCode] ->
            [ labUsed, env, lhsCode <+> rhsCode ]
          esac
        esac
    | Assn (Ref (x), rhs) ->
        case compileInner (env, rhs) of [env, rhsCode] ->
          [ false, env, rhsCode <+ ST (lookupVar (env, x)) ]
        esac
    | Assn (lhs, rhs) ->
        case compileInner (env, rhs) of [env, rhsCode] ->
        case compileInner (env, lhs) of [env, lhsCode] ->
          [ false, env, rhsCode <+> lhsCode <+ STI ]
        esac esac
    | Binop (op, lhs, rhs) ->
        case compileInner (env, lhs) of [env, lhsCode] ->
        case compileInner (env, rhs) of [env, rhsCode] ->
          [ false, env, lhsCode <+> rhsCode <+ BINOP (op) ]
        esac esac
    | If (cond, bodyThen, bodyElse) ->
        case compileInner (env, cond) of [env, condCode] ->
        case env.genLabel of [elseBegLab, env] ->
        case compile (lab, env, bodyThen) of [_, env, bodyThenCode] ->
        case compile (lab, env, bodyElse) of [_, env, bodyElseCode] ->
          [ true , env
          , condCode
            <+ CJMP ("z", elseBegLab)
            <+> bodyThenCode
            <+ JMP (lab)
            <+ LABEL (elseBegLab)
            <+> bodyElseCode
          ]
        esac esac esac esac
    | While (cond, body) -> makeLoop (lab, env, cond, body, true)
    | DoWhile (cond, body) -> makeLoop (lab, env, cond, body, false)
    | Scope (defs, expr) ->
        fun genGlobals (vars) {
          foldl (fun (code, x) { code <+ GLOBAL (x) }, emptyBuffer (), vars)
        }

        var traversed1 = foldl (fun ([code, env, funcs], def) {
          case def of
            Var (vars) ->
              [ if env.isGlobal
                then code <+> vars.genGlobals
                else code
                fi
              , addVars (env, vars)
              , funcs
              ]
          | Fun (fn, args, body) ->
              case genFunLabel (env, fn) of [lab, env] ->
                [code, addFun (env, fn, lab, args.size), Fun (lab, args, body) : funcs]
              esac
          esac
        }, [emptyBuffer (), env.beginScope, {}], defs);

        case traversed1 of [defsCode, env, funcs] ->
        var traversed2 = foldl (fun (env, Fun (fn, args, body)) {
          rememberFun (env, fn, args, body)
        }, env, funcs);

        case compile (lab, traversed2, expr) of [flag, env, code] ->
          [flag, env.endScope, defsCode <+> code]
        esac esac
    | Call (fn, argExprs) ->
        var argCompiled = foldl(fun ([env, code], expr) {
          case env.genLabel of [lab, env] ->
            case compile (lab, env, expr) of [used, env, newCode] ->
              [env, code <+> newCode <+> label (lab, used)]
            esac
          esac
        }, [env, emptyBuffer ()], argExprs);

        case argCompiled of [env, code] ->
        case lookupFun (env, fn) of Fun (label, argCount) ->
          [false, env, code <+ CALL (label, argCount)]
        esac esac
    | Read (name) -> [ false, env, singletonBuffer (READ) <+ ST (lookupVar (env, name)) <+ DROP ]
    | Write (ex) -> appendIns (env, ex, WRITE)
    | _ -> failure ("Cannot compile %s\n", stmt.string)
    esac
  }

  fun compileFuncs (env, start) {
    fun traverse (env, funcs) {
      -- printf ("funcs = %s\n\n\n", funcs.string);
      case funcs of
        {} ->
          case env.getFuns of
            [{}, env] -> emptyBuffer ()
          | [funcs, env] -> traverse (env, funcs)
          esac
      | Fun (fn, args, expr, state) : funcs ->
          var tmp1 = beginFun (env, state);
          var tmp2 = addArgs (tmp1, args);
          var tmp3 = compileInner (tmp2, expr);
          case tmp3 of [env, code] ->
            singletonBuffer (LABEL (fn))
            <+ BEGIN (fn, args.size, env.getLocals)
            <+> code
            <+ END
            <+> traverse (env, funcs)
          esac
      esac
    }

    var newCode = traverse (env, {});
    start <+> newCode
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of [endLabUsed, env, code] ->
        var result = getBuffer $ compileFuncs (env
        , singletonBuffer (LABEL ("main"))
          <+ BEGIN ("main", 0, env.getLocals)
          <+> code <+> label (endLab, endLabUsed)
          <+ END
        );
        -- printf ("%s\n", result.showSM);
        result
      esac
  esac
}

