-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer.
-- Takes a list of SM instructions, return its string representation.
public fun showSMInsn(i) {
  case i of
    READ             -> sprintf("READ")
  | WRITE            -> sprintf("WRITE")
  | CONST(value)     -> sprintf("CONST %d", value)
  | BINOP(operation) -> sprintf("BINOP %s", operation)
  | LD(variableName) -> sprintf("LD %s", variableName)
  | ST(variableName) -> sprintf("ST %s", variableName)
  esac
}

public fun showSM(prg) {
  map(fun(i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval(c, insns) {
  failure("SM eval not implemented\n")
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expr) {
  failure("compileExpr not implemented\n")
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine instructions.
public fun compileSM(statement) {
  failure("compileSM not implemented\n")
}
