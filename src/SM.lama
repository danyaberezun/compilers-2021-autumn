-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

public fun evalCommand (c, command) {
  var stack = c[0];
  var state = c[1];
  var world = c[2];
  case command of 
    READ -> (
      var tmp = readWorld (world);
      var value = tmp.fst;
      var newWorld = tmp.snd;
      [value:stack, state, newWorld]
  )
  | WRITE -> (
      case stack of 
        value:newStack -> (
          var newWorld = writeWorld (value, world);
          [newStack, state, newWorld]
      )
      | _ -> failure ("Got empty stack to WRITE")
      esac
  )
  | BINOP (opStr) -> (
      case stack of
        snd:fst:rest -> (
          var value = calcBinop (opStr, fst, snd);
          [value:rest, state, world]
      )
      | _ -> failure ("Less than 2 elements on stack for BINOP")
      esac
  )
  | LD (varName) -> (
      var varValue = state (varName);
      [varValue:stack, state, world]
  )
  | ST (varName) -> (
    case stack of
      varValue:newStack -> (
        var newState = state <- [varName, varValue];
        [newStack, newState, world]
    )
    | _ -> failure ("Got empty stack for ST")
    esac
  )
  | CONST (value) -> [value:stack, state, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of 
    {} -> c
  | head:tail -> (
    var newC = evalCommand (c, head);
    eval (newC, tail)
  )
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a buffer of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (varName) -> singletonBuffer (LD (varName))
  | Const (c) -> singletonBuffer (CONST (c))
  | Binop (opStr, l, r) -> (
    var lBuff = compileExpr (l);
    var rBuff = compileExpr (r);
    (lBuff <+> rBuff) <+ (BINOP (opStr))
  )
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a buffer
-- of stack machine instructions
fun compileSMBuff (stmt) {
  case stmt of
    Assn (varName, expr) -> (
      var exprBuff = compileExpr (expr);
      exprBuff <+ (ST (varName))
  ) 
  | Read (varName) -> listBuffer ({READ, (ST (varName))})
  | Write (expr) -> (
    var exprBuff = compileExpr (expr);
    exprBuff <+ WRITE
  )
  | Skip -> emptyBuffer ()
  | Seq (x, y) -> (
    var xBuff = compileSMBuff (x);
    var yBuff = compileSMBuff (y);
    xBuff <+> yBuff
  )
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (compileSMBuff (stmt))
}
