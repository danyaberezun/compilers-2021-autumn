-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c.string, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (icfg@[st, cst, s, w], iinsns) {
      -- returns next cfg and insns
    fun next(cfg@[stack, ctrlStack, state@[args, locs], world], insns) {
      -- printf("stack: %s, world: %s, insns: %s\n", stack.string, world.string, insns.string);
      -- printf("Locals: %s\n", state.string);
      -- printf("env: %s\n", env.string);
      -- if (debug) then printf("stack: %s, world: %s, insns: %s\n", stack.string, world.string, insns.string) else {} fi;
      case insns of
        {} -> [cfg, insns]
      | instr:insns -> fun evalNext(cfg){[cfg, insns]}
            case instr of
              READ -> case readWorld(world) of [n, world] -> evalNext([n:stack, ctrlStack, state, world]) esac

            | WRITE -> case stack of n:stack -> evalNext([stack, ctrlStack, state, writeWorld(n, world)]) esac

            -- arguments in binop taken  VVVVV  in reverse order 
            | BINOP (s) -> case stack of 
                  b:a:stack -> evalNext([evalOp(s, a, b):stack, ctrlStack, state, world])
                | _ -> failure("No 2 vaues on stack for binop") esac

            | LD (x) -> evalNext([lookup(state, x):stack, ctrlStack, state, world])
            | LDA(x) -> evalNext([x:stack, ctrlStack, state, world])

            | ST (x) -> case stack of 
                a:stack -> assign(state, x, a); 
                           evalNext([stack, ctrlStack, state, world])
              | _ -> failure("Empty stack, but trying load") esac
            | STI -> case stack of 
                v:x:stack -> assign(state, x, v); 
                             evalNext([v:stack, ctrlStack, state, world]) 
              esac
            | DROP -> case stack of n:stack -> evalNext([stack, ctrlStack, state, world]) esac
            | DUP ->  case stack of n:stack -> evalNext([n:n:stack, ctrlStack, state, world]) esac

            | CONST (n) -> evalNext([n:stack, ctrlStack, state, world])

            | JMP (lable) -> [cfg, fromLabel(env, lable)] 

            | CJMP (NZ, lable) -> case stack of n:stack -> 
                    if n != 0 then [[stack, ctrlStack, state, world], fromLabel(env, lable)] 
                              else evalNext([stack, ctrlStack, state, world]) 
                    fi
                | _ -> failure("Empty stack, but trying to cjump")
              esac

            | LABEL (label) -> evalNext(cfg)

            | GLOBAL (x) -> assign(state, Glb(x), 0); evalNext(cfg)

            | BEGIN (name, argNum, localNum) -> 
                case take(stack, argNum) of [stack, args] ->
                  case makeState(argNum, localNum) of state ->
                    iter(fun([arg, num]){assign(state, Arg(num), arg)}, reverseIndexed(args, argNum - 1));
                    evalNext([stack, ctrlStack, state, world])
                  esac
                esac 

            | END -> 
                case ctrlStack of
                  {} -> [cfg, {}]
                | [state, nextInstrns] : ctrlStack -> [[stack, ctrlStack, state, world], nextInstrns]
                esac

            | CALL (fLab, numArgs) ->
                  [[stack, [state, insns]:ctrlStack, state, world], fromLabel(env, fLab)]

            | _ -> failure("Unexpected stack machine instruction: %s\n", instr.string)
          esac esac
    }

    var cfg = icfg;
    var insns = iinsns;
    while insns != {} do
      case next(cfg, insns) of [newCfg, newInsns] -> 
        cfg := newCfg; insns := newInsns esac
    od;
    cfg 
    }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- printf("%s\n", showSM(insns));
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    -- printf("In compileSM. stmt: %s\n", stmt.string);
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (s)        -> 
        case env.genLabel of [endLbl, env] ->
          case compile (endLbl, env, s) of [endUsed, env, sCode] -> 
            [false, env, sCode <+> label(endLbl, endUsed) <+ DROP]
          esac
        esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac

    | Read   (x)        -> 
          case env.genLabel of [readLbl, env] ->
            case compile(readLbl, env, x) of [readUsed, env, xCode] -> 
            [false, env, xCode <+> label(readLbl, readUsed) <+ READ <+ STI <+ DROP]
            esac
          esac

    | Write  (n)        -> 
          case env.genLabel of [writeLbl, env] ->
            case compile(writeLbl, env, n) of [writeUsed, env, nCode] -> 
              [false, env, nCode <+> label(writeLbl, writeUsed) <+ WRITE]
            esac
          esac


    | Assn   (x, e)     -> case env.genLabels(2) of [endLbl, eLbl, env] ->  
            case compile(eLbl, env, x) of [eUsed, env, xCode] -> 
              case compile(endLbl, env, e) of [endUsed, env, eCode] -> 
                [false, env, xCode <+> label(eLbl, eUsed) <+> eCode <+> label(endLbl, endUsed) <+ STI]
          esac
        esac
      esac

    | Binop  (op, l, r) -> 
        case env.genLabels(2) of [rLbl, endLbl, env] ->
          case compile(rLbl, env, l) of [rUsed, env, lCode] -> 
            case compile(endLbl, env, r) of [endUsed, env, rCode] -> 
              [false, env, lCode <+> label(rLbl, rUsed) <+> rCode <+> label(endLbl, endUsed) <+ BINOP (op)]
            esac
          esac
        esac

    | While (e, s)   -> 
        case env.genLabels(3) of [eLbl, sLbl, cjmpLbl, env] -> 
            case compile(eLbl, env, s) of [eUsed, env, sCode] -> 
              case compile(cjmpLbl, env, e) of [cjmpUsed, env, eCode] ->
                [false, env, singletonBuffer(JMP(eLbl)) <+ LABEL(sLbl) <+> sCode <+ LABEL(eLbl) <+> eCode <+> label(cjmpLbl, cjmpUsed) <+ CJMP(NZ, sLbl)]
        esac esac esac
    | DoWhile (e, s)   -> 
        case env.genLabels(3) of [eLbl, sLbl, cjmpLbl, env] -> 
            case compile(eLbl, env, s) of [eUsed, env, sCode] -> 
              case compile(cjmpLbl, env, e) of [cjmpUsed, env, eCode] ->
                [false, env, singletonBuffer(LABEL(sLbl)) <+> sCode <+> label(eLbl, eUsed) <+> eCode <+> label(cjmpLbl, cjmpUsed) <+ CJMP(NZ, sLbl)]
        esac esac esac

    | If (e, s1, s2) -> 
        case genLabels(env, 2) of [s1Lab, cjmpLab, env] -> 
          case compile(cjmpLab, env, e) of [cjmpUsed, env, eCode] ->
            case compile(lab, env, s1) of [_, env, s1Code] -> 
              case compile(lab, env, s2) of [_, env, s2Code] -> 
                [true, env, eCode <+> label(cjmpLab, cjmpUsed) <+ CJMP(NZ, s1Lab) <+> s2Code <+ JMP(lab) <+ LABEL(s1Lab) <+> s1Code]
    esac esac esac esac

    | Scope (defs, expr) -> 
        case foldr(fun([env, funs, globalDefs], def){
            case def of 
              Var (ds) -> [addVars(env, ds), funs, if isGlobal(env)
                then foldl(fun(globalDefs, name){ globalDefs <+ GLOBAL(name) }, globalDefs, ds)
                else globalDefs
                fi]
              
            | Fun (name, args, body) -> 
              case genFunLabel(env, name) of [fLab, env] ->
                [addFun(env, name, fLab, args.size), [fLab, args, body] : funs, globalDefs] 
              esac
            esac 
        }, [beginScope(env), {}, emptyBuffer()], defs) of [env, funs, globalDefs] ->
            case compile(lab, env, expr) of [labUsed, env, code] -> 
              case foldl(fun(env, [fLab, args, body]){rememberFun(env, fLab, args, body)}, env, funs) of env ->
                [labUsed, endScope(env), globalDefs <+> code]
              esac 
            esac
        esac

    | Call (name, args) -> 
          case lookupFun(env, name) of Fun (fLab, numArgs) ->
            case foldl(fun([env, code], arg){
              case genLabel(env) of [endLab, env] ->
                case compile(endLab, env, arg) of [endUsed, env, aCode] ->
                  [env, aCode <+> label(endLab, endUsed) <+> code]
                esac
              esac
            }, [env, emptyBuffer()], args) of [env, code] ->
              [false, env, code <+ CALL(fLab, numArgs)]
            esac
          esac

    | exp                 ->  failure ("compileSM not implemented for expr: %s\n", exp.string)
    esac
  }

  fun compileFuns(ienv, icode){
    fun iteration(env, funs){
      foldl(fun([env, code], f@Fun (fLab, args, body, state)){
        -- printf("compiling fun: %s\n", f.string);
        case genLabel(env) of [endLab, env] ->
          case compile(endLab, addArgs(beginFun(env, state), args), body) 
            of [endUsed, env, fCode] -> --printf("Compiled fun, env: %s\n", env.string);
              [env, 
                code <+>
                label(fLab, true) <+
                BEGIN(fLab, size(args), getLocals(env)) <+> 
                fCode <+>
                label(endLab, endUsed) <+
                END
              ]
          esac
        esac
      }, [env, emptyBuffer()], funs)
    }
    var env = ienv,
        code = icode,
        funs;
    
    case getFuns(env) of [newFuns, newEnv] ->
      env := newEnv; funs := newFuns
    esac;
    while(funs != {} && funs != 0) do {
      case iteration(env, funs) of [newEnv, newCode] ->
        case getFuns(newEnv) of [newFuns, newEnv] ->
          funs := newFuns; env := newEnv; code := code <+> newCode
        esac
      esac
    } od;
    [env, code]
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
          [endLabUsed, env, code] -> 
            case compileFuns(env, singletonBuffer(LABEL("main")) <+
                                  BEGIN("main", 0, getLocals(env)) <+> 
                                  code <+> 
                                  label (endLab, endLabUsed) <+ 
                                  END) 
              of [env, code] -> 
                getBuffer $ code 
            esac
       esac
  esac
}

fun range(n){
  fun helper(fromIncl, toExcl){
    if fromIncl >= toExcl 
      then {}
      else fromIncl : helper(fromIncl + 1, toExcl)
    fi
  }
  helper(0, n)
}


fun indexed(l){
  fun helper(l, n){
    case l of
      {} -> {}
    | x:l -> [x, n] : helper(l, n + 1)
    esac
  }
  helper(l, 0)
}

fun reverseIndexed(l, n){
  case l of 
      {} -> {}
    | x:l -> [x, n] : reverseIndexed(l, n -1)
  esac
}