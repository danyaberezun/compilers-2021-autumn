-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
    var istack = c[0], state = c[1], world = c[2];
    case insns of
      {}       -> c
    | inst : p ->
        case inst of
          READ       ->
            var cc = readWorld (world), z = cc.fst, ww = cc.snd;
            eval ([z : istack, state, ww], p)
        | WRITE      ->
            case istack of
              z : ss -> eval ([ss, state, writeWorld (z, world)], p)
            esac
        | BINOP (op) ->
            case istack of
              x : y : ss -> eval ([binop (op) (y, x) : ss, state, world], p)
            esac
        | LD (x)     -> eval ([state (x) : istack, state, world], p)
        | ST (x)     ->
            case istack of
              z : ss -> eval ([ss, state <- [x, z], world], p)
            esac
        | CONST (z)  -> eval ([z : istack, state, world], p)
        esac
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
    case expr of
        Var (x)          -> {LD (x)}
      | Const (n)        -> {CONST(n)}
      | Binop (op, l, r) -> compileExpr (l) +++ compileExpr (r) +++ {BINOP (op)}
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, e)  -> compileExpr (e) +++ {ST (x)}
  | Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
  | Skip         -> {} 
  | Read (x)     -> {READ, ST (x)}
  | Write (e)    -> compileExpr (e) +++ {WRITE}
  esac
}
