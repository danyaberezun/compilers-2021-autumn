-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun nonEmptyInstsEval(configuration@[stack, state, w@[in, out]], sm_instructions@fst_inst:tail_inst) {
  case fst_inst of
    READ      -> (
    	           var next_world = readWorld(w);
    	           eval([fst(next_world):stack, state, snd(next_world)], tail_inst)
                 )
  | WRITE     -> case stack of
                   stack_top:stack_tail -> (
                                             var next_world = writeWorld(stack_top, w);
                                             eval([stack_tail, state, next_world], tail_inst)
                                           )
                 | _                    -> failure("empty stack for WRITE instruction")
                 esac
  | BINOP (s) -> case stack of
                   x:y:stack_tail    -> eval([op(s, y, x):stack_tail, state, w], tail_inst)
                 | _                 -> failure("stack that doesn't have two operands for BINOP instruction")
                 esac
  | LD    (x) -> eval([state(x):stack, state, [in, out]], tail_inst)
  | ST    (x) -> case stack of
                   stack_top:stack_tail -> eval([stack_tail, state <- [x, stack_top], w], tail_inst)
                 | _                    -> failure("empty stack for WRITE instruction")
                 esac
  | CONST (n) -> eval([n:stack, state, [in, out]], tail_inst)
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (configuration, sm_instructions) {
  case sm_instructions of
    {}   -> configuration
  | _    -> nonEmptyInstsEval(configuration, sm_instructions)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (n)                  -> {CONST (n)}
  | Var (x)                    -> {LD (x)}
  | Binop (s_op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ {BINOP (s_op)} 
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, expr)     -> compileExpr(expr) +++ {ST (x)}
  | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2) 
  | Skip               -> {}
  | Read (x)           -> {READ, ST (x)}
  | Write (expr)       -> compileExpr(expr) +++ {WRITE}
  esac
}
