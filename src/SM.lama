-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of
	  {} -> c
	| (BINOP (op): p) -> case stack of 
	                       (y:x:s) -> eval(env, [(getOp(op) (x, y)) : s, state, world], p)
	                     esac
	| (CONST (z):p) -> eval (env, [z:stack, state, world], p)
	| (READ:p) -> case readWorld(world) of
	                [z, nw] -> eval(env, [z:stack, state, nw], p)
	              esac
	| (WRITE:p) -> case stack of
	                 (z:s) -> eval(env, [s, state, writeWorld(z, world)], p)
	               esac
	| (LD (x):p) -> eval(env, [state(x):stack, state, world], p)
	| (ST (x):p) -> case stack of 
	                  (z:s) -> eval(env, [s, state <- [x, z], world], p)
	                esac
	| (JMP (label):p) -> eval (env, c, fromLabel (env, label))
	| (CJMP (c, label):p) -> case stack of
								x : s -> eval (env, [s, state, world], if x == c then fromLabel(env, label) else p fi)
							 esac
	| (LABEL (label):p) -> eval(env, c, p)
	| _ -> failure("SM.lama:eval not implemented\n")
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (varName) -> singletonBuffer (LD (varName))
	| Const (x) -> singletonBuffer (CONST (x))
	| Binop (op, l, r) -> compileExpr(l) <+> compileExpr(r) <+> singletonBuffer (BINOP (op))
	| _ -> failure ("SM.lama: compileExpr unknown operand\n")
  esac
}


-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
			   case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
	| While (e, s) ->
		case env.genLabel of
			[le, env] -> case env.genLabel of [ls, env] ->
				case compile (le, env, s) of
					[leUsed, env, sCode] ->
						[true, env,
						label (ls, true) <+>
						compileExpr (e) <+
						CJMP (0, lab) <+>
						sCode <+>
						label (le, leUsed) <+
						JMP (ls)
						--singletonBuffer (JMP (le)) <+>
						--label (ls, true) <+>
						--sCode <+>
						--label (le, true) <+>
						--compileExpr (e) <+
						--CJMP (1, ls)
						]
				esac
			esac
		esac
    | DoWhile (s, e) ->
      case env.genLabel of
      	   [loopLab, env] -> case env.genLabel of [exitLab, env] ->
				case compile (exitLab, env, s) of
				[exitUsed, env, sCode] ->
					[true, env,
					label (loopLab, true) <+>
					sCode <+>
					label (exitLab, exitUsed) <+>
					compileExpr (e) <+
					CJMP (0, lab) <+
					JMP (loopLab)

					--label (loopLab, true) <+>
					--sCode <+>
					--label (exitLab, exitUsed) <+>
					--compileExpr (e) <+
					--CJMP (1, loopLab) <+
					--JMP (lab)
					]
				esac
			esac
	  esac
	| If (e, s1, s2) -> 
		case env.genLabel of
			[elseLab, env] -> case env.genLabel of [exit, env] ->
				case compile (exit, env, s1) of
				[exitUsed, env, s1Code] ->
					case compile (lab, env, s2) of
					[labUsed, env, s2Code] ->
						[true, env,
						compileExpr (e) <+
						CJMP (0, elseLab) <+>
						s1Code <+>
						label (exit, exitUsed) <+
						JMP (lab) <+>
						label (elseLab, true) <+>
						s2Code
						]
					esac
				esac
			esac
		esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
