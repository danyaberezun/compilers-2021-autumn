-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  case insns of
	  {} -> c
	| (BINOP (op): p) -> case stack of 
	                       (y:x:s) -> eval([(getOp(op) (x, y)) : s, state, world], p)
	                     esac
	| (CONST (z):p) -> eval ([z:stack, state, world], p)
	| (READ:p) -> case readWorld(world) of
	                [z, nw] -> eval([z:stack, state, nw], p)
	              esac
	| (WRITE:p) -> case stack of
	                 (z:s) -> eval([s, state, writeWorld(z, world)], p)
	               esac
	| (LD (x):p) -> eval([state(x):stack, state, world], p)
	| (ST (x):p) -> case stack of 
	                  (z:s) -> eval([s, state <- [x, z], world], p)
	                esac
	| _ -> failure("asdas")
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (varName) -> {LD (varName)}
	| Const (x) -> {CONST (x)}
	| Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
	case stmt of
	    Assn (varName, expr) -> compileExpr(expr) +++ {ST (varName)}
	  | Seq (l, r) -> compileSM(l) +++ compileSM(r)
	  | Skip -> {}
	  | Read (varName) -> {READ} +++ {ST (varName)}
	  | Write (expr) -> compileExpr(expr) +++ {WRITE}
	  | _ -> failure("sad")
	esac
}

