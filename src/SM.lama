-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case c of [stack, st, rw] ->
    case insns of 
        {} -> c
      | ins:inss -> case ins of 
            READ      -> case readWorld (rw) of 
              [res, rrw] -> eval (env, [res : stack, st, rrw], inss) 
            esac
          | WRITE     -> case stack of 
                {}   -> failure ("can't write from empty stack") 
              | x:xs -> eval (env, [xs, st, writeWorld(x, rw)], inss)
            esac
          | BINOP (s) -> case stack of 
              y:(x:xs) -> case s of 
                  "+"  -> eval (env, [(x + y)  : xs, st, rw], inss)
                | "-"  -> eval (env, [(x - y)  : xs, st, rw], inss)
                | "/"  -> eval (env, [(x / y)  : xs, st, rw], inss)
                | "%"  -> eval (env, [(x % y)  : xs, st, rw], inss)
                | "<"  -> eval (env, [(x < y)  : xs, st, rw], inss)
                | "<=" -> eval (env, [(x <= y) : xs, st, rw], inss)
                | ">"  -> eval (env, [(x > y)  : xs, st, rw], inss)
                | ">=" -> eval (env, [(x >= y) : xs, st, rw], inss)
                | "*"  -> eval (env, [(x * y)  : xs, st, rw], inss)
                | "==" -> eval (env, [(x == y) : xs, st, rw], inss)
                | "!=" -> eval (env, [(x != y) : xs, st, rw], inss)
                | "&&" -> eval (env, [(x && y) : xs, st, rw], inss)
                | "!!" -> eval (env, [(x !! y) : xs, st, rw], inss)
              esac
            | _        -> failure ("can't take enough arguments from stack") 
            esac
          | LD    (x) -> eval (env, [(st (x)) : stack, st,rw], inss)
          | ST    (x) -> 
            case stack of
                {}   -> failure ("can't read from empty stack")
              | y:xs -> eval (env, [xs, st <- [x, y], rw], inss)
            esac
          | CONST (n) -> eval (env, [n:stack, st, rw], inss)
          | LABEL (l) -> eval (env, c, inss)
          | JMP   (l) -> eval (env, c, fromLabel (env, l))
          | CJMP (type, l) -> case type of
                  "e"  -> case stack of
                        {}   -> failure ("can't read from empty stack")
                      | y:xs -> case y of
                          0 -> eval (env, c, fromLabel (env, l))
                        | _ -> eval (env, c, inss)
                        esac
                    esac --failure ("CJUMPz not implemented")
                | "ne" -> case stack of
                      {}   -> failure ("can't read from empty stack")
                    | y:xs -> case y of
                        1 -> eval (env, c, fromLabel (env, l))
                      | _ -> eval (env, c, inss)
                      esac
                  esac
              esac
          | _ -> failure ("some instructions not implemented\n")
      esac
    esac
  esac
  --failure ("SM eval not implemented\n")
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
      Var (v)            -> singletonBuffer (LD (v))
    | Const (v)          -> singletonBuffer (CONST (v))
    | Binop (op, lhs, rhs) -> compileExpr (lhs) <+> compileExpr (rhs) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, th, els) -> 
        case env.genLabel of
          [elsLab, env] ->
            case env.genLabel of
              [afterLab, env] ->
                case compile(elsLab, env, th) of
                  [elsLabUsed, env, thCode] ->
                    case compile (afterLab, env, els) of
                      [afterLabUsed, env, elsCode] -> 
                        [afterLabUsed, env, compileExpr(cond) <+ CJMP ("e", elsLab) <+> thCode <+ JMP(afterLab) <+ LABEL(elsLab) <+> elsCode <+ LABEL(afterLab) ]
                    esac
                esac
            esac
        esac
    | While (cond, body) -> --failure ("compile while not implmnted")
        case env.genLabel of
          [bodyLab, env] ->
            case env.genLabel of
              [condLab, env] ->
                case compile (condLab, env, body) of
                  [condLabUsed, env, bodyCode] -> 
                    [false, env, singletonBuffer (JMP (condLab)) <+ LABEL (bodyLab) <+> bodyCode <+ LABEL (condLab) <+> compileExpr(cond) <+ CJMP ("ne", bodyLab)]
                esac
            esac
        esac
    | DoWhile (body, cond) -> --failure ("compile do while not implemented")
        case env.genLabel of
          [bodyLab, env] -> 
            case compile (bodyLab, env, body) of
              [bodyLabUsed, env, bodyCode] -> [bodyLabUsed, env, singletonBuffer (LABEL (bodyLab)) <+> bodyCode <+> compileExpr (cond) <+ CJMP ("ne", bodyLab)]
            esac
        esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
