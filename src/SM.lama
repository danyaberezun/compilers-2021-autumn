-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration

fun evalSMCode([stack, s, w], code) {
  case code of
    READ -> 
      var valueWorld = readWorld(w);
      [valueWorld.fst:stack, s, valueWorld.snd]
  | WRITE -> 
      [stack.tl, s, writeWorld(stack.hd, w)]
  | BINOP (op) -> 
    case stack of
        x:y:tail -> 
          [calculateBinaryOperation(op)(x, y):tail, s, w]
        | _ -> failure("Too few values on stack\n")
    esac
  | LD (varname) -> [s(varname):stack, s, w]
  | ST (varname) -> 
    case stack of 
        x:tail -> [tail, s <- [varname, x], w]
      | _ -> failure("Too few values on stack\n")
    esac
  | CONST (n) -> [n:stack, s, w]
  esac
}

fun eval ([stack, s, w], insns) {
  foldl(evalSMCode, [stack, s, w], insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], getBuffer(insns))[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (varname) -> singletonBuffer(LD(varname))
    | Const (i) -> singletonBuffer(CONST(i))
    | Binop(op, expr1, expr2) -> compileExpr(expr2) <+> compileExpr(expr1) <+> singletonBuffer(BINOP(op))
    | _ -> failure("Not implemented\n")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
 fun compileInner(stmt_){
    case stmt_ of
      Assn(varname, expr) -> 
        compileExpr(expr) <+> singletonBuffer(ST(varname))
    | Seq (stmt1, stmt2) -> compileInner(stmt1) <+> compileInner(stmt2)
    | Skip -> emptyBuffer()
    | Read(varname) -> 
        singletonBuffer(READ) <+> singletonBuffer(ST(varname))
    | Write(expr) -> 
        compileExpr(expr) <+> singletonBuffer(WRITE)
    esac
  }
  getBuffer(compileInner(stmt))
}
