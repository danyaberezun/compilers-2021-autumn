-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine's single instruction interpreter. Takes an SM-configuration and a instruction,
-- returns a processed configuration
fun evalInsn(c@[istack, state, world], insn) {
  case insn of
    READ      -> var readed = readWorld (world);
                 [readed.fst : istack, state, readed.snd]

  | WRITE     -> case istack of
                   x:stackTail -> [stackTail, state, writeWorld (x, world)]
                 esac

  | BINOP (s) -> case istack of
                   y:x:stackTail -> [binop (s) (x, y) : stackTail, state, world]
                 esac

  | LD    (x) -> [state (x) : istack, state, world]

  | ST    (x) -> case istack of
                   v:stackTail -> [stackTail, state <- [x, v] , world]
                 esac

  | CONST (n) -> [n : istack, state, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl(evalInsn, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (n)        -> {CONST (n)}
  | Var   (x)        -> {LD (x)}
  | Binop (op, l, r) -> compileExpr (l) +++ compileExpr (r) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (x, e)         -> compileExpr (e) +++ {ST (x)}
  | Read  (x)            -> {READ, ST (x)}
  | Write (e)            -> compileExpr (e) +++ {WRITE}
  | Seq   (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  | Skip                 -> {}
  esac
}
