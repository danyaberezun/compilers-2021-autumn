-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (conf@[stack, state, world], allin) {
  var head, insns;
  case allin of
    {} -> conf
  | head : insns -> (
  
  -- printf ("%s : %s\n", head.string, insns.string);
  case head of
    {} -> conf
  | READ -> (
    var readValue, newWorld;
    case readWorld (world) of [readValue, newWorld] -> eval ([{ readValue } +++ stack, state, newWorld], insns) esac
  )
  | WRITE -> (
    var sHead, sTail;
    case stack of sHead : sTail -> eval ([sTail, state, writeWorld (sHead, world)], insns) esac
  )
  | BINOP (op) -> (
    var x, y, sTail;
    case stack of y : x : sTail -> eval ([{ evalExpr ( state, Binop (op, Const (x), Const (y)) ) } +++ sTail, state, world], insns) esac
  )
  | LD (s) -> eval ([{ state (s) } +++ stack, state, world], insns)
  | ST (s) -> (
    var sHead, sTail;
    case stack of sHead : sTail -> eval ([sTail, state <- [s, sHead], world], insns) esac
  )
  | CONST (n) -> eval ([{ n } +++ stack, state, world], insns)
  esac

  )
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a buffer of stack machine instructions.
fun compileExpr (expr) {
  case expr of 
    Var (s) -> singletonBuffer (LD (s))
  | Const (n) -> singletonBuffer (CONST (n))
  | Binop (op, e1, e2) -> compileExpr (e1) <+> compileExpr (e2) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a buffer of stack machine instructions.
public fun compileSMToBuffer (stmt) {
  case stmt of 
    Assn (s, e) -> compileExpr (e) <+ ST (s)
  | Seq (s1, s2) -> compileSMToBuffer (s1) <+> compileSMToBuffer (s2)
  | Skip -> emptyBuffer ()
  | Read (s) -> singletonBuffer (READ) <+ ST (s)
  | Write (e) -> compileExpr (e) <+ WRITE
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer $ compileSMToBuffer (stmt)
}