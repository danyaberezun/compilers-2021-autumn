-- Stack machine.

import Data;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
      READ         -> "READ"
    | WRITE        -> "WRITE"
    | BINOP (s)    -> sprintf ("BINOP %s", s)
    | LD    (x)    -> sprintf ("LD %s", x)
    | LDA   (x)    -> sprintf ("LDA %s", x)
    | ST    (x)    -> sprintf ("ST %s", x)
    | STI          -> "STI"
    | CONST (n)    -> sprintf ("CONST %d", n)
    | LABEL (s)    -> sprintf ("LABEL %s", s)
    | JMP   (l)    -> sprintf ("JMP %s", l)
    | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
    | DUP          -> "DUP"
    | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) { showSMInsn (i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
      fun ([m, insns]) {
        case insns of
            {}               -> m
          | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
          | _ : tl           -> rec ([m, tl])
        esac
      }
    }) $ [emptyMap (compare), insns];

  [fun (l) {
    case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env[0](lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  fun isNotEmpty (l) {
    case l of
      {}  -> false
      | _ -> true
    esac
  }

  var currInsns = insns;
  var currC = c;
  while currInsns.isNotEmpty do
    case currInsns of
      insn : tail ->
        case evalIns (currC, insn) of
          Next(c) ->
            currC := c;
            currInsns := tail
          | FromLabel (c, label) ->
            currC := c;
            currInsns := env.fromLabel (label)
        esac
    esac
  od;
  currC
}

fun evalIns (c@[stack, st, world], insn) {
  case insn of
      READ          -> evalStraightforward (c, insn)
    | WRITE         -> evalStraightforward (c, insn)
    | BINOP (op)    -> evalStraightforward (c, insn)
    | LD    (name)  -> evalStraightforward (c, insn)
    | LDA   (name)  -> evalStraightforward (c, insn)
    | ST    (name)  -> evalStraightforward (c, insn)
    | STI           -> evalStraightforward (c, insn)
    | CONST (int)   -> evalStraightforward (c, insn)
    | DUP           -> evalStraightforward (c, insn)
    | DROP          -> evalStraightforward (c, insn)
    | LABEL (_)     -> Next(c)
    | JMP   (label) -> FromLabel (c, label)
    | CJMP  (key, label) ->
      case stack of
        v : tail ->
          var newC = [tail, st, world];
          if key === "z" && v == 0 !! key === "nz" && v != 0
            then FromLabel (newC, label)
            else Next (newC)
          fi
      esac
  esac
}

fun evalStraightforward (c@[stack, st, world], insn) {
  Next(
    case insn of
      READ -> case readWorld (world) of
        [v, newWorld] -> [v : stack, st, newWorld]
      esac
      | WRITE -> case stack of
        v : tail -> [tail, st, writeWorld (v, world)]
      esac
      | BINOP (op) -> case stack of
        v1 : v2 : tail -> [evalOp (op, v2, v1) : tail, st, world]
      esac
      | LD    (name) -> [st (name) : stack, st, world]
      | LDA   (name) -> [Address (name) : stack, st, world]
      | ST    (name) -> case stack of
        v : tail -> [tail, st <- [name, v], world]
      esac
      | STI -> case stack of
        value : Address (name) : tail -> [value : tail, st <- [name, value], world]
      esac
      | CONST (int) -> [int : stack, st, world]
      | DUP -> case stack of
        v : tail -> [v : v : tail, st, world]
      esac
      | DROP -> case stack of
        v : tail -> [tail, st, world]
      esac
    esac
  )
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), [{}, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
    [sprintf ("L%d", n), makeCompEnv (n + 1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env[0]()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
      then { env }
      else case env.genLabel of
        [lab, env] -> lab : inner (env, n - 1)
      esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
      then singletonBuffer (LABEL (lab))
      else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
        Read  (x) -> [false, env, singletonBuffer (READ) <+ ST (x)]
      | Write (e) ->
        case compile (lab, env, e) of
          [labUsed, env, code] ->
            [
              false,
              env,
              code
              <+> label (lab, labUsed)
              <+ WRITE
            ]
        esac
      | Assn  (ref, expr)   ->
        case env.genLabel of
          [refLab, env] ->
            case compile (refLab, env, ref) of
              [refLabUsed, env, codeRef] ->
                case compile (lab, env, expr) of
                  [labUsed, env, codeExpr] -> 
                    [
                      false,
                      env,
                      codeRef
                      <+> label (refLab, refLabUsed)
                      <+> codeExpr
                      <+> label (lab, labUsed)
                      <+ STI
                    ]
                esac
            esac
        esac
      | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile (s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile (lab, env, s2) of
                  [labUsed, env, s2Code] -> 
                    [
                      labUsed,
                      env,
                      s1Code
                      <+> label (s2Lab, s2LabUsed)
                      <+> s2Code
                    ]
                esac
            esac
        esac
      | Skip       -> [false, env, emptyBuffer ()]
      | Var    (x) -> [false, env, singletonBuffer (LD (x))]
      | Ref    (x) -> [false, env, singletonBuffer (LDA (x))]
      | Const  (n) -> [false, env, singletonBuffer (CONST (n))]
      | Binop  (opName, l, r) ->
        case compile (lab, env, l) of
          [labUsed, env, codeL] ->
            case env.genLabel of
              [rLab, env] ->
                case compile (rLab, env, r) of
                  [rLabUsed, env, codeR] ->
                    [
                      false,
                      env,
                      codeL
                      <+> label (lab, labUsed)
                      <+> codeR
                      <+> label (rLab, rLabUsed)
                      <+ BINOP (opName)
                    ]
                esac
            esac
        esac
      | Ignor  (e) ->
        case compile (lab, env, e) of
          [labUsed, env, code] -> [false, env, code <+> label (lab, labUsed) <+ DROP]
        esac
      | If (condition, thenBody, elseBody) ->
        case env.genLabels (2) of
          [conditionLabel, elseLabel, env] ->
            case compile (conditionLabel, env, condition) of
              [conditionLabUsed, env, conditionCode] ->
                case compile (lab, env, thenBody) of
                  [_, env, ifCode] ->
                    case compile (lab, env, elseBody) of
                      [_, env, elseCode] ->
                        [
                          true,
                          env,
                          conditionCode
                          <+> label (conditionLabel, conditionLabUsed)
                          <+ CJMP ("z", elseLabel)
                          <+> ifCode
                          <+ JMP (lab)
                          <+ LABEL (elseLabel) <+> elseCode
                        ]
                    esac
                esac
            esac
        esac
      | While (condition, body) ->
        case env.genLabels (2) of
          [conditionLabSt, conditionLabEnd, env] ->
            case compile (conditionLabSt, env, body) of
              [_, env, bodyCode] ->
                case compile (conditionLabEnd, env, condition) of
                  [conditionLabEndUsed, env, conditionCode] ->
                    [
                      true,
                      env,
                      label (conditionLabSt, true)
                      <+> conditionCode
                      <+> label (conditionLabEnd, conditionLabEndUsed)
                      <+ CJMP ("z", lab)
                      <+> bodyCode
                      <+ JMP (conditionLabSt)
                    ]
                esac
            esac
        esac
      | DoWhile (body, condition) ->
        case env.genLabels (3) of
          [conditionLab, bodyStLabel, bodyEndLabel, env] ->
            case compile (bodyEndLabel, env, body) of
              [bodyEndLabelUsed, env, bodyCode] ->
                case compile (conditionLab, env, condition) of
                  [conditionLabUsed, env, conditionCode] ->
                    [
                      false,
                      env,
                      label (bodyStLabel, true)
                      <+> bodyCode
                      <+> label (bodyEndLabel, bodyEndLabelUsed)
                      <+> conditionCode
                      <+> label (conditionLab, conditionLabUsed)
                      <+ CJMP ("nz", bodyStLabel)
                    ]
                esac
            esac
        esac
    esac
  }

  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
      esac
  esac
}
