-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  -- printf("%s\n", showSM(insns));
  case insns of
    head:tailInsns -> 
      case c of 
        [valueStack, state, world] ->
          -- printf("%s\n",showSMInsn(head));
          var evalResult = evalInsn(head, tailInsns, env, valueStack, state, world);
          var newEnv = evalResult[0];
          var newC = evalResult[1];
          var nextInsns = evalResult[2];
          eval(newEnv, newC, nextInsns)
      esac
    | _ -> c
  esac
}

public fun evalBinop (name, res1, res2) {
    case name of
      "+" -> res1 + res2 
    | "-" -> res1 - res2 
    | "*" -> res1 * res2 
    | "&&" -> res1 && res2 
    | "!!" -> res1 !! res2 
    | "/" -> res1 / res2 
    | "%" -> res1 % res2 
    | "==" -> res1 == res2 
    | "!=" -> res1 != res2 
    | "<" -> res1 < res2 
    | ">" -> res1 > res2 
    | "<=" -> res1 <= res2 
    | ">=" -> res1 >= res2 
    esac
}


-- returns [new_env, [newValueStack, newState, newWorld], nextInsns]
fun evalInsn(insn, tailInsns, env, valueStack, state, world) {
  -- var t = printf("%s\n", showSMInsn(insn));
  var c = [valueStack, state, world];
  case insn of
    ST (varName) -> 
      case valueStack of
        x:tail -> [env, [valueStack, state <- [varName, x], world], tailInsns]
      esac
    | CONST(n) -> [env, [n : valueStack, state, world], tailInsns]
    | LD (varName) -> [env, [state(varName) : valueStack, state, world], tailInsns]
    | BINOP (binopName) -> 
      case valueStack of
        y:x:tail -> [env, [evalBinop(binopName, x, y):tail, state, world], tailInsns]
      esac
    | READ -> 
      var sAndnewWorld = readWorld(world);
      case sAndnewWorld of
        [readSymbol, newWorld] -> [env, [readSymbol: valueStack, state, newWorld], tailInsns]
      esac
    | WRITE -> 
      -- printf("Executing write!");
      case valueStack of
        x:tailStack -> [env, [tailStack, state, writeWorld(x, world)], tailInsns]
      esac
    | LABEL(l) -> [env, c, tailInsns]
    | JMP(l) -> [env, c, fromLabel(env, l)]
    | CJMP(cond, l) -> 
      case valueStack of
        x:tailStack -> case x of
          0 -> case cond of 
            "z" -> [env, [tailStack, state, world], fromLabel(env, l)] |
            "nz" -> [env, [tailStack, state, world], tailInsns]
          esac
          | _ -> case cond of 
            "nz" -> [env, [tailStack, state, world], fromLabel(env, l)] |
            "z" -> [env, [tailStack, state, world], tailInsns]
          esac
        esac
      esac
    | LDA(x) -> [env, [x:valueStack, state, world], tailInsns]
    | DROP -> case valueStack of
        x:tailStack -> [env, [tailStack, state, world], tailInsns]
      esac
    | STI -> 
      case valueStack of
        v:refX:tailStack -> [env, [v:tailStack, state <- [refX, v], world], tailInsns]
      esac
    | _ -> 
      printf("%s\n", showSMInsn(insn));
      printf("Match failed!\n")
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- printf("Called evalSm!\n");
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, expr) {
    case expr of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> 
        -- printf("coompile read\n");
      [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e)      -> 
      case env.genLabel of
        [writeLabel, env] -> 
          case compile(writeLabel, env, e) of
            [labelUsed, env, eCode] -> [false, env, eCode <+> label(writeLabel, labelUsed) <+ WRITE] 
          esac
      esac
      -- [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> 
        -- printf("coompile assn\n");
      case genLabels(env, 2) of
        [refLabel, assnLabel, env] -> 
          case compile(refLabel, env, x) of
            [refLabelUsed, env, xCode] ->  
              case compile(assnLabel, env, e) of
                [assnLabelUsed, env, eCode] -> [false, env, xCode <+> 
                    label(refLabel, refLabelUsed) <+>
                    eCode <+>
                    label(assnLabel, assnLabelUsed) <+
                    STI]
              esac
          esac
      esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, 
                        s1Code <+> 
                        label (s2Lab, s2LabUsed) <+> 
                        s2Code]
                  esac
             esac
        esac
    | If (cond, body, elseBody) -> case genLabels(env, 3) of 
        [l1, l2, lInterm, env] -> 
          case env.genLabel of
            [condExprLabel, env] ->
            case compile(condExprLabel, env, cond) of
              [condLabelUsed, env, exprBody] ->
              case compile (l1, env, body) of
                [l1Used, env, bodyCode] -> case compile (l2, env, elseBody) of
                  [l2Used, env, elseBodyCode] -> [true, env, 
                    exprBody <+>
                    label(condExprLabel, condLabelUsed) <+
                    CJMP("z", lInterm) <+>
                    bodyCode <+>
                    label(l1, l1Used) <+
                    JMP(lab) <+
                    LABEL(lInterm) <+>
                    elseBodyCode <+>
                    label(l2, l2Used)
                    ]
                esac
              esac
            esac
          esac
      esac
    | While(cond, body) -> case genLabels (env, 2) of
        [label_c, label_b, env] ->
          -- var condBody = compileExpr(cond);
          case env.genLabel of
            [condExprLabel, env] ->
            case compile(condExprLabel, env, cond) of
              [condLabelUsed, env, condBody] ->
              case compile(label_b, env, body) of
                [label_b_used, env, bodyCode] -> [true, env,
                  singletonBuffer(LABEL(label_c)) <+>
                  condBody <+>
                  label(condExprLabel, condLabelUsed) <+
                  CJMP("z", lab) <+>
                  bodyCode <+>
                  label(label_b, label_b_used) <+
                  JMP(label_c)
                ]
              esac
            esac
          esac
      esac
    | DoWhile(cond, body) -> case genLabels(env, 2) of
        [label_begin, label_b, env] ->
          -- var condBody = compileExpr(cond);
          case env.genLabel of
            [condExprLabel, env] ->
            case compile(condExprLabel, env, cond) of
              [condLabelUsed, env, condBody] ->
              case compile(label_b, env, body) of
                [label_b_used, env, bodyCode] -> [false, env,
                  singletonBuffer(LABEL(label_begin)) <+>
                  bodyCode <+>
                  label(label_b, label_b_used) <+>
                  condBody <+>
                  label(condExprLabel, condLabelUsed) <+
                  CJMP("nz", label_begin)
                ]
              esac
            esac
          esac
      esac
    | Ignore (x) ->
        case compile (lab, env, x) of
          [labUsed, env, xCode] -> [false, env, xCode <+> label (lab, labUsed) <+ DROP]
        esac
    | Var (v) -> [false, env, singletonBuffer (LD (v))]
    | Const (c) -> [false, env, singletonBuffer (CONST (c))]
    | Binop (op, e1, e2) -> case genLabels(env, 2) of
        [labelE1, labelE2, env] ->
          case compile(labelE1, env, e1) of
            [labelE1Used, env, e1Body] ->
              case compile(labelE2, env, e2) of
                [labelE2Used, env, e2Body] ->
                  [false, env, e1Body <+> 
                               label(labelE1, labelE1Used) <+>
                               e2Body <+>
                               label(labelE2, labelE2Used) <+
                               BINOP(op)
                               ]
              esac
          esac
      esac
    | _              -> failure ("compileSM not implemented\n")

    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
