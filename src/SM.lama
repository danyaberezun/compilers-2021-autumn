-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}




-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, w], insns) {
  case insns of
    head:tail ->
      case head of 
          READ -> (
            var new_world = readWorld(w);
            eval([new_world.fst:stack, st, new_world.snd], tail)
          )
        | WRITE -> 
            case stack of
              h:t ->  eval([t, st, writeWorld(h, w)], tail)
            esac
        | LD (x) -> eval([st(x) : stack, st, w], tail)
        | ST (x) -> 
            case stack of
            h:t -> eval([t, st <- [x, h], w], tail)
            esac 
        | CONST (n) -> eval([n:stack, st, w], tail)
        | BINOP (s) -> (
            var expr1 = stack.hd;
            var expr2 = stack.tl.hd;
            eval([helper(s, expr2, expr1):stack.tl.tl, st, w], tail)
        )
      esac  
  | {} -> c
  esac   
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (n) -> {CONST (n)}
  | Var (x) -> {LD(x)}
  | Binop (s, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP(s)}
  esac 
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn(x, e) -> compileExpr(e) +++ {ST (x)}
  | Seq (st1, st2) -> compileSM(st1) +++ compileSM(st2)
  | Skip -> {}
  | Read (x) -> {READ} +++ {ST (x)}
  | Write (e) -> compileExpr(e) +++ {WRITE} 
  esac
}