-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalIns(c, ins) {
  case ins of
    READ -> 
    var read = readWorld (c[2]);
    [{read.fst} +++ c[0], c[1], read.snd]
  | WRITE ->
    case c[0] of
      z:st -> [st, c[1], writeWorld (z, c[2])]
    esac
  | BINOP (op) ->
    case c[0] of
      y:x:st -> [{evalBinop(op, x, y)} +++ st, c[1], c[2]]
    esac
  | LD (x) -> [{c[1] (x)} +++ c[0], c[1], c[2]]
  | ST (x) ->
    case c[0] of
      z:st -> [st, c[1] <- [x, z], c[2]]
    esac
  | CONST (n) -> [{n} +++ c[0], c[1], c[2]]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | ins:prog -> 
    eval (evalIns (c, ins), prog)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> {LD (x)}
  | Const (n) -> {CONST (n)}
  | Binop (op, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, expr) -> compileExpr(expr) +++ {ST (x)}
  | Read (x) -> {READ, ST (x)}
  | Write (expr) -> compileExpr(expr) +++ {WRITE}
  | Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
  esac
}