-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  var x = case prg of 3 -> 3 esac;
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  case insns of ins:tail -> 
    case ins of
      READ -> case readWorld (world) of [n, newWorld] -> eval([n:stack, state, newWorld], tail) esac
      | WRITE -> case stack of top:bottom -> eval([bottom, state, writeWorld(top, world)], tail) esac
      | BINOP (binop) -> case stack of top1:top0:bottom -> 
        var top = evalExpr(state, Binop (binop, Const(top0), Const(top1)));
        eval([top:bottom, state, world], tail)
      esac
      | LD (x) -> eval([state(x) : stack, state, world], tail)
      | ST (x) -> case stack of top:bottom -> eval([bottom, state <- [x, top], world], tail) esac
      | CONST (n) -> eval([n : stack, state, world], tail)
    esac
  | {} -> c 
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- TODO it may work slow because of concut!

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
  Var (x) -> LD (x) : {}
  | Const (x) -> CONST (x) : {}
  | Binop (binop, x1, x2) ->  compileExpr(x1) +++ (compileExpr(x2) +++ (BINOP (binop) : {}))
  esac
}


-- TODO it may work slow because of concut!

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (name, expr) ->  compileExpr(expr) +++ (ST(name) : {})
  | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Skip -> []
  | Read (name) -> READ : ST(name) : {}
  | Write (expr) -> compileExpr(expr) +++ (WRITE : {})
  esac
}
