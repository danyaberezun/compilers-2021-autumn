-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

public fun showSMInsn(i) {
  case i of
    READ -> sprintf("READ")
    | WRITE -> sprintf("WRITE")
    | BINOP (s) -> sprintf("BINOP %s", s)
    | LD    (x) -> sprintf("LD %s", x)
    | ST    (x) -> sprintf("ST %s", x)
    | CONST (n) -> sprintf("CONST %d", n)
  esac
}

public fun showSM(prg) {
  map(fun(i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

fun eval([stack, state, world], insns) {
  case insns of
    ins : rest_insns ->
      case ins of
        READ -> case readWorld(world) of
          [value, new_world] -> eval([value:stack, state, new_world], rest_insns)
        esac
        | WRITE -> case stack of
          cur : rest -> eval([rest, state, writeWorld(cur, world)], rest_insns)
        esac
        | BINOP(op) -> case stack of
          a : b : rest -> eval([evalBinOp(op, b, a):rest, state, world], rest_insns)
        esac
        | LD (name) -> eval([state(name):stack, state, world], rest_insns)
        | ST (name) -> case stack of
          value : rest -> eval([rest, state <- [name, value], world], rest_insns)
        esac
        | CONST (value) -> eval([value:stack, state, world], rest_insns)
      esac
    | { } -> [stack, state, world]
  esac
}


public fun evalSM(input, insns) {
  eval([{ }, emptyState, createWorld(input)], insns)[2].getOutput
}

fun compileExpr(expr) {
  case expr of
    Var (name) -> { LD(name) }
    | Const (value) -> { CONST(value) }
    | Binop (op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ { BINOP(op) }
  esac
}

public fun compileSM(stmt) {
  case stmt of
    Assn (name, expr) -> compileExpr(expr) +++ { ST(name) }
    | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Skip -> []
    | Read (name) -> { READ, ST(name) }
    | Write (expr) -> compileExpr(expr) +++ { WRITE }
  esac
}
