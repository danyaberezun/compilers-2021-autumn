-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of 
    {}                       -> c
  | head: tail -> eval(evalInstruction(c, head), tail)
  esac
}

fun evalInstruction(c@[s, st, w], insns) {
  (* printf ("s: %s\n", s.string);
  printf ("st: %s\n", st.string);
  printf ("w: %s\n", w.string);
  printf ("insns: %s\n**************\n", insns.string); *)

  case insns of 
    READ       -> (
      var newWorld = readWorld(w);
      [newWorld.fst : s, st, newWorld.snd]
    )
  | WRITE      -> (
      case s of
        head: tail -> [tail, st, writeWorld(head, w)]
      esac
    )
  | BINOP (op) -> (
      case s of
        rhs: lhs: tail -> (
          (* printf("rhs: %s\n", rhs.string);
          printf("lhs: %s\n", lhs.string);
          printf("binop: %s\n", Binop(op, lhs, rhs).string);
          printf("tail: %s\n**************\n", tail.string); *)
          [evalExpr({}, Binop(op, Const (lhs), Const (rhs))): tail, st, w]
        )
      esac
    )
  | LD (x)     -> (
      [st(x): s, st, w]
    )
  | ST (x)     -> (
      case s of
        head: tail -> [tail, st <- [x, head], w]
      esac
    ) 
  | CONST (n)  -> (
      [n: s, st, w]
    )
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  (* printf ("input: %s\n", input.string);
  printf ("insns: %s\n", insns.string); *)
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (x)              -> { LD (x) }
  | Const (n)            -> { CONST (n) }
  | Binop (op, lhs, rhs) -> compileExpr (lhs) +++ compileExpr (rhs) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn (x, e)    -> compileExpr(e) +++ { ST (x) }
  | Seq (lhs, rhs) -> compileSM(lhs) +++ compileSM(rhs)
  | Skip           -> {}
  | Read (x)       -> { READ, ST (x) }
  | Write (e)      -> compileExpr(e) +++ { WRITE }
  esac
}
