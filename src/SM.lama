-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case c of 
    [valueStack, state, world] ->
      case insns of
        head:tailInsns -> 
          -- printf("%s\n",showSMInsn(head));
          case head of
            ST (varName) -> 
              case valueStack of
                x:tail -> eval(env, [tail, state <- [varName, x], world], tailInsns)
              esac
            | CONST(n) -> eval(env, [n : valueStack, state, world], tailInsns)
            | LD (varName) -> eval(env, [state(varName) : valueStack, state, world], tailInsns)
            | BINOP (binopName) -> 
              case valueStack of
                x:y:tail -> eval(env, [evalExpr(state, Binop(binopName, Const(y), Const(x))):tail, state, world], tailInsns)
              esac
            | READ -> 
              var sAndnewWorld = readWorld(world);
              case sAndnewWorld of
                [readSymbol, newWorld] -> eval(env, [readSymbol: valueStack, state, newWorld], tailInsns)
              esac
            | WRITE -> 
              -- printf("Executing write!");
              case valueStack of
                x:tailStack -> eval(env, [tailStack, state, writeWorld(x, world)], tailInsns)
              esac
            | LABEL(l) -> eval(env, c, tailInsns)
            | JMP(l) -> eval(env, c, fromLabel(env, l))
            | CJMP(cond, l) -> 
              case valueStack of
                x:tailStack -> case x of
                  0 -> case cond of 
                    "z" -> eval(env, [tailStack, state, world], fromLabel(env, l)) |
                    "nz" -> eval(env, [tailStack, state, world], tailInsns)
                  esac
                  | _ -> case cond of 
                    "nz" -> eval(env, [tailStack, state, world], fromLabel(env, l)) |
                    "z" -> eval(env, [tailStack, state, world], tailInsns)
                  esac
                esac
              esac
            | _ -> 
              printf("%s\n", showSMInsn(head));
              printf("Match failed!\n")
          esac
        | _ -> c
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- printf("Called evalSm!\n");
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  -- printf("compileExpr\n");
  case expr of
      Var (v) -> singletonBuffer (LD (v))
    | Const (c) -> singletonBuffer (CONST (c))
    | Binop (op, e1, e2) -> compileExpr (e1) <+> compileExpr (e2) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  

  fun printStmtKind(stmt) {
    case stmt of
        Skip -> "Skip"
      | Read(_) -> "Read"
      | Write(_) -> "Write"
      | Assn(_, _) -> "Assn"
      | Seq(x, e) -> "Seq"
      | If (cond, body, elseBody) -> "If"
      | While(cond, body) -> "While"
      | DoWhile(cond, body) -> "DoWhile"
      | For(a, b, c) -> "For" 
    esac
  }

  fun compile (lab, env, stmt) {
    -- printf("Called compile %s\n", printStmtKind(stmt));
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> 
        -- printf("coompile read\n");
      [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> 
        -- printf("coompile write\n");
      [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> 
        -- printf("coompile assn\n");
      [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, 
                        s1Code <+> 
                        label (s2Lab, s2LabUsed) <+> 
                        s2Code]
                  esac
             esac
        esac
    | If (cond, body, elseBody) -> case genLabels(env, 3) of 
        [l1, l2, lInterm, env] -> 
          var exprBody = compileExpr(cond);
          case compile (l1, env, body) of
            [l1Used, env, bodyCode] -> case compile (l2, env, elseBody) of
              [l2Used, env, elseBodyCode] -> [true, env, 
                exprBody <+
                CJMP("z", lInterm) <+>
                bodyCode <+>
                label(l1, l1Used) <+
                JMP(lab) <+
                LABEL(lInterm) <+>
                elseBodyCode <+>
                label(l2, l2Used)
                ]
            esac
          esac
      esac
    | While(cond, body) -> case genLabels (env, 2) of
        [label_c, label_b, env] ->
          var condBody = compileExpr(cond);
          case compile(label_b, env, body) of
            [label_b_used, env, bodyCode] -> [true, env,
              singletonBuffer(LABEL(label_c)) <+>
              condBody <+
              CJMP("z", lab) <+>
              bodyCode <+>
              label(label_b, label_b_used) <+
              JMP(label_c)
            ]
          esac
      esac
    | DoWhile(cond, body) -> case genLabels(env, 2) of
        [label_begin, label_b, env] ->
          var condBody = compileExpr(cond);
          case compile(label_b, env, body) of
            [label_b_used, env, bodyCode] -> [false, env,
              singletonBuffer(LABEL(label_begin)) <+>
              bodyCode <+>
              label(label_b, label_b_used) <+>
              condBody <+
              CJMP("nz", label_begin)
            ]
          esac
      esac
    | _              -> failure ("compileSM not implemented\n")

    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
