-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun evalRead ([stack, state, world], READ) {
  var readRes = readWorld (world);
  [[readRes[0]:stack, state, readRes[1]], Next]
}

fun evalWrite ([value:stack, state, world], WRITE) {
  [[stack, state, writeWorld (value, world)], Next]
}

fun evalBinop ([r:l:stack, state, world], BINOP (op)) {
  [[(evalOp (op, l, r)):stack, state, world], Next]
}

fun evalLD ([stack, state, world], LD (x)) {
  [[state (x):stack, state, world], Next]
}

fun evalST ([value:stack, st, w], ST (variable)) {
  [[value:stack, st <- [variable, value], w], Next]
}

fun evalConst ([stack, state, world], CONST (value)) {
  [[value:stack, state, world], Next]
}

fun evalJump (conf, JMP (l))
{
    [conf, Next(l)]
}

fun evalCJump ([value:stack, state, world], CJMP (c, l))
{
    case c of
        "z"  -> if value == 0 then [[stack, state, world], Next(l)] else [[stack, state, world], Next] fi 
      | "nz" -> if value != 0 then [[stack, state, world], Next(l)] else [[stack, state, world], Next] fi
    esac
}

fun evalLDA ([stack, st, w], LDA (x)) 
{
  [[x:stack, st, w], Next]
}

fun evalSTI ([v:x:stack, st, w], STI)
{
  [[v:stack, st <- [x, v], w], Next]
}

fun evalDUP ([v:stack, st, w], DUP)
{
  [[v:v:stack, st, w], Next]
}

fun evalDrop ([v:stack, st, w], DROP)
{
  [[stack, st, w], Next]
}

fun evalSingleIns(conf, i) {
    case i of
      READ         -> evalRead     (conf, i)
    | WRITE        -> evalWrite    (conf, i)
    | BINOP (s)    -> evalBinop    (conf, i)
    | LD    (x)    -> evalLD       (conf, i)
    | ST    (x)    -> evalST       (conf, i)
    | CONST (n)    -> evalConst    (conf, i)
    | LABEL (s)    -> [conf, Next]
    | JMP   (l)    -> evalJump     (conf, i)
    | CJMP  (c, l) -> evalCJump    (conf, i)
    | LDA   (x)    -> evalLDA      (conf, i)
    | STI          -> evalSTI      (conf, i)
    | DUP          -> evalDUP      (conf, i)
    | DROP         -> evalDrop     (conf, i)
    | _            -> failure      ("Invalid instruction!")
    esac
}
-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      {}       -> c
    | i:tail -> (
        var result = evalSingleIns (c, i);
        case result.snd of
            Next         -> eval (env, result.fst, tail)
          | Next (label) -> eval (env, result.fst, fromLabel (env, label))
        esac
      )
    esac
  }
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

fun compileVar (Var (variable), lbState) {
  [singletonBuffer (LD (variable)), lbState]
}

fun compileConst (Const (n), lbState) {
  [singletonBuffer (CONST (n)), lbState]
}

fun compileBinop(Binop (op, expr1, expr2), lbState) {
  var leftCompiled = compileSMBuffer(expr1, lbState);
  var rightCompiled = compileSMBuffer(expr2, leftCompiled.snd);
  [leftCompiled.fst <+> rightCompiled.fst <+ BINOP (op), rightCompiled.snd]
}


fun compileAssn (Assn (ref, expr), lbState) {
  var refCompiled = compileSMBuffer (ref, lbState);
  var expCompiled = compileSMBuffer (expr, refCompiled.snd);
  [refCompiled.fst <+> expCompiled.fst <+ STI, expCompiled.snd]
}

fun compileSeq (Seq (stmt1, stmt2), lbState) {
  var leftCompiled = compileSMBuffer(stmt1, lbState);
  var rightCompiled = compileSMBuffer(stmt2, leftCompiled.snd);
  [leftCompiled.fst <+> rightCompiled.fst, rightCompiled.snd]
}

fun compileRead (Read (Ref (variable)), lbState) {
  [listBuffer({READ, ST (variable), DROP}), lbState]
}

fun compileWrite (Write (expr), lbState) {
  case compileSMBuffer (expr, lbState) of
    [cmds, st] -> [cmds <+ WRITE, st]
  esac
}

fun compileIf (If (cond, thenExpr, elseExpr), lbState) {
  var elseLab = genLabel (lbState);
  var endLab = genLabel (elseLab.snd);
  var condCompiled = compileSMBuffer (cond, endLab.snd);
  var thenCompiled = compileSMBuffer (thenExpr, condCompiled.snd);
  var elseCompiled = compileSMBuffer (elseExpr, thenCompiled.snd);
  [condCompiled.fst <+ CJMP ("z", elseLab.fst) <+> thenCompiled.fst <+ JMP(endLab.fst) <+ LABEL (elseLab.fst) <+> elseCompiled.fst <+ LABEL (endLab.fst), elseCompiled.snd] 
}

fun compileWhile (While (cond, expr), lbState) {
  var beginLab = genLabel (lbState);
  var endLab = genLabel (beginLab.snd);
  var condCompiled = compileSMBuffer (cond, endLab.snd);
  var bodyCompiled = compileSMBuffer (expr, condCompiled.snd);
  [singletonBuffer (LABEL (beginLab.fst)) <+> condCompiled.fst <+ CJMP ("z", endLab.fst) <+> bodyCompiled.fst <+ JMP (beginLab.fst) <+ LABEL (endLab.fst), bodyCompiled.snd]
}

fun compileDoWhile (DoWhile (expr, cond), lbState) {
  var beginLab = genLabel (lbState);
  var condCompiled = compileSMBuffer (cond, beginLab.snd);
  var bodyCompiled = compileSMBuffer (expr, condCompiled.snd);
  [singletonBuffer (LABEL (beginLab.fst)) <+> bodyCompiled.fst <+> condCompiled.fst <+ CJMP ("nz", beginLab.fst), bodyCompiled.snd]
}

fun compileRef (Ref (ref), lbState) {
  [singletonBuffer (LDA (ref)), lbState]
}

fun compileIgnore (Ignore (exp), lbState) {
  var compiledExpr = compileSMBuffer (exp, lbState);
  [compiledExpr.fst <+ DROP, compiledExpr.snd]
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (expr) {
  getBuffer (compileSMBuffer (expr, initCompEnv ()).fst)
}

public fun compileSMBuffer (expr, lbState) {
  case expr of
    Skip              -> [emptyBuffer (), lbState]
  | Assn    (_, _)    -> compileAssn      (expr, lbState)
  | Seq     (_, _)    -> compileSeq       (expr, lbState)
  | Read    (_)       -> compileRead      (expr, lbState)
  | Write   (_)       -> compileWrite     (expr, lbState)
  | If      (_, _, _) -> compileIf        (expr, lbState)
  | While   (_, _)    -> compileWhile     (expr, lbState)
  | DoWhile (_, _)    -> compileDoWhile   (expr, lbState)
  | Var     (_)       -> compileVar       (expr, lbState)
  | Const   (_)       -> compileConst     (expr, lbState)
  | Binop   (_, _, _) -> compileBinop     (expr, lbState)
  | Ref     (_)       -> compileRef       (expr, lbState)
  | Ignore  (_)       -> compileIgnore    (expr, lbState)
  | _                 -> failure          ("Invalid compiling statement!")
  esac
}
(* End *)
