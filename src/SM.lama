-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;
import Expr;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun jmpCond (c) {
  if compare (c, "z") == 0
  then fun (v) {v == 0}
  elif compare (c, "nz") == 0
  then fun (v) {v != 0}
  fi
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    var res = case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac;
    res
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun assignArgs (st, args) {
    foldl (
      fun ([state, i], arg) {
        [assign (state, Arg (i), arg);
        state, i + 1]
      },
      [st, 0],
      args
    )
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cst, state, world], insns) {
    fun eval (stack, cst, state, world, insns) {
      case insns of 
        ins : insns ->
          case ins of
            READ ->
              case readWorld (world) of
                [value, newWorld] -> eval (value : stack, cst, state, newWorld, insns)
              esac
            | WRITE ->
                case stack of
                  head : tail -> eval (tail, cst, state, writeWorld (head, world), insns)
                esac
            | BINOP (s) ->
                case stack of
                  a : b : tail -> eval (evalOp (s, b, a) : tail, cst, state, world, insns)
                esac
            | LD (value) -> eval (lookup (state, value) : stack, cst, state, world, insns)
            | LDA (x) -> eval (Ref (x) : stack, cst, state, world, insns)
            | ST (value) ->
                case stack of
                  head : tail ->
                    assign (state, value, head);
                    eval (stack, cst, state, world, insns)
                esac
            | STA ->
                case stack of
                  x : Ref (name) : tail ->
                    state.assign (name, x);
                    eval (x : tail, cst, state, world, insns)
                  | x : idx : arr : tail ->
                      case arr of
                        Sexp (_, arr) -> arr[idx] := x
                        | _ -> arr[idx] := x
                      esac;
                    eval (x : tail, cst, state, world, insns)
                esac
            | CONST (n) -> eval (n : stack, cst, state, world, insns)
            | LABEL (s) -> eval (stack, cst, state, world, insns)
            | JMP (l) -> eval (stack, cst, state, world, fromLabel (env, l))
            | CJMP (c, l) ->
                case stack of head : tail -> 
                  if jmpCond (c) (head) 
                    then eval (tail, cst, state, world, fromLabel (env, l))
                    else eval (tail, cst, state, world, insns)
                  fi
                esac
            | DUP ->
                case stack of
                  head : tail -> eval (head : head : tail, cst, state, world, insns)
                esac
            | DROP ->
                case stack of
                  _ : tail -> eval (tail, cst, state, world, insns)
                esac
            | CALL (f, n) -> eval (stack, [state, insns] : cst, state, world, fromLabel (env, f))
            | END ->
              case cst of
                {} -> [stack, {}, state, world]
                | [st, qs] : cs -> eval (stack, cs, st, world, qs)
              esac
            | GLOBAL (name) ->
                assign (state, Glb (name), 0);
                eval (stack, cst, state, world, insns)
            | BEGIN (name, nargs, nvars) ->
                case stack.take (nargs) of
                  [stack, args] -> 
                    case foldl (
                      fun ([state, narg], arg) {
                        state.assign (Arg (narg), arg);
                        [state, narg + 1]
                      },
                      [makeState (nargs, nvars), 0],
                      args
                    ) of
                      [state, _] -> eval (stack, cst, state, world, insns)
                    esac
                esac
            | SEXP (name, n) ->
                case take (stack, n) of [stack, elems] ->
                  eval ((Sexp (name, listArray (elems))) : stack, cst, state, world, insns)
                esac
            | STRING (s) -> eval (s : stack, cst, state, world, insns)
            | ARRAY (n) ->
                case take (stack, n) of [stack, items] ->
                  eval ((listArray (items)) : stack, cst, state, world, insns)
                esac
            | ELEM ->
                case take (stack, 2) of [stack, { arr, idx }] ->
                  eval (case arr of
                      Sexp (_, arr) -> arr[idx]
                      | _ -> arr[idx]
                    esac : stack,
                    cst, state, world, insns
                  )
                esac
            | BUILTIN (fname, nargs) ->
                case take (stack, nargs) of [stack, args] ->
                  case evalBuiltin (fname, args, world) of [value, world] ->
                    eval (value : stack, cst, state, world, insns)
                  esac
                esac
            esac
      | {} -> [stack, cst, state, world]
      esac
    }
    eval (stack, cst, state, world, insns)
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | Arg (i) -> Arg (i)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip       -> [false, env, emptyBuffer ()]
    | Var    (x) -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref    (x) -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n) -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e) ->
        case genLabel (env) of
          [lab, env] ->
            case compile (lab, env, e) of
              [labUsed, env, code] ->
                [
                  false,
                  env,
                  code
                  <+> label (lab, labUsed)
                  <+ DROP
                ]
            esac
        esac
    | Binop (o, a, b) ->
        case genLabels (env, 2) of
          [endLab1, endLab2, env] ->
            case compile (endLab1, env, a) of
              [endUsed1, env, code1] ->
                case compile (endLab2, env, b) of
                  [endUsed2, env, code2] -> 
                    [
                      false,
                      env, 
                      code1
                      <+> label (endLab1, endUsed1)
                      <+> code2
                      <+> label (endLab2, endUsed2)
                      <+ BINOP (o)
                    ]
                esac
            esac
        esac
    | Set (x, e) -> compile (lab, env, Assn (Ref (x), e))
    | Assn (x, e) ->
        case genLabels (env, 2) of [endLabX, endLabE, env] ->
          case compile (endLabX, env, x) of [endUsedX, env, codeX] ->
            case compile (endLabE, env, e) of [endUsedE, env, codeE] -> 
              [
                false,
                env,
                codeX
                <+> label (endLabX, endUsedX)
                <+> codeE
                <+> label (endLabE, endUsedE)
                <+ STA
              ]
            esac
          esac
        esac
    | Seq (s1, s2) ->
        case genLabel (env) of
          [labS2, env] ->
              case compile (labS2, env, s1) of
                [labS2Used, env, codeS1] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, codeS2] ->
                      [
                        labUsed,
                        env,
                        codeS1
                        <+> label (labS2, labS2Used)
                        <+> codeS2
                      ]
                  esac
              esac
        esac
    | If (cond, bt, bf) ->
        case genLabels (env, 2) of
          [condLab, l, env] -> 
            case compile (condLab, env, cond) of
              [condUsed, env, condCode] ->
                case compile (lab, env, bt) of
                  [_, env, trueCode] ->
                    case compile (lab, env, bf) of
                      [_, env, falseCode] ->
                        [
                          true,
                          env, 
                          emptyBuffer () 
                          <+> condCode
                          <+> label (condLab, condUsed)
                          <+ CJMP ("z", l)
                          <+> trueCode
                          <+ JMP (lab)
                          <+> label (l, true)
                          <+> falseCode
                        ]
                    esac
                esac
            esac
        esac
    | While (cond, b) ->
        case genLabels (env, 3) of
          [lc, lb, condEnd, env] ->
            case compile (lc, env, b) of
              [_, env, bCode] ->
                case compile (condEnd, env, cond) of
                  [endUsed, env, condCode] ->
                    [
                      false,
                      env,
                      emptyBuffer ()
                      <+ JMP (lc)
                      <+> label (lb, true)
                      <+> bCode
                      <+> label (lc, true)
                      <+> condCode
                      <+> label (condEnd, endUsed)
                      <+ CJMP ("nz", lb)
                    ]
                esac
            esac
        esac
    | DoWhile (b, cond) ->
        case genLabels (env, 3) of
          [beg, le, condEnd, env] ->
              case compile (le, env, b) of
                [leUsed, env, bCode] ->
                  case compile (condEnd, env, cond) of
                    [endUsed, env, condCode] ->
                      [
                        false,
                        env,
                        emptyBuffer ()
                        <+> label (beg, true)
                        <+> bCode
                        <+> label (le, leUsed)
                        <+> condCode
                        <+> label (condEnd, endUsed)
                        <+ CJMP ("nz", beg)
                      ]
                    esac
              esac
        esac
    | Scope (defs, expr) ->
        case compileDefs (beginScope (env), defs) of [env, globals, funs] ->
          case map (fun (g) {GLOBAL (g)}, globals) of codeGlobals ->
            case foldl (fun (env, Fun (l, a, b)) {rememberFun (env, l, a, b)}, env, funs) of env ->
              case compile (lab, env, expr) of [labUsed, env, eCode] ->
                [
                  labUsed,
                  endScope (env),
                  listBuffer (codeGlobals)
                  <+> eCode
                ]
              esac
            esac
          esac
        esac
    | Call (fname, args) ->
        case compileListExprs (env, args) of [env, code] ->
          case fname of
            "read"   -> [false, env, code <+ BUILTIN (fname, 0)]
            | "write"  -> [false, env, code <+ BUILTIN (fname, 1)]
            | "length" -> [false, env, code <+ BUILTIN (fname, 1)]
            | _ ->
                case lookupFun (env, fname) of Fun (lab, nargs) ->
                  [
                    false,
                    env,
                    code
                    <+ CALL (lab, nargs)
                  ]
                esac
          esac
        esac
    | Array (elemExprs) ->
        case compileListExprs (env, elemExprs) of [env, code] ->
          [
            false,
            env,
            code
            <+ ARRAY (elemExprs.size)
          ]
        esac
    | String (s) -> [false, env, singletonBuffer (STRING (s))]
    | Elem (arrExpr, idxExpr) ->
        case compileListExprs (env, { arrExpr, idxExpr }) of [env, code] ->
          [
            false,
            env,
            code
            <+ ELEM
          ]
        esac
    | ElemRef (arrExpr, idxExpr) ->
        case compileListExprs (env, { arrExpr, idxExpr }) of [env, code] ->
          [false, env, code]
        esac
    | Sexp (name, argExprs)  ->
        case compileListExprs (env, argExprs) of [env, code] ->
          [
            false,
            env,
            code
            <+ SEXP (name, argExprs.size)
          ]
        esac 
    esac
  }

  fun compileDefs (env, defs) {
    foldl (
      fun ([env, globals, funs], def) {
        case def of
          Var (names) ->
            case addVars (env, names) of env ->
              if isGlobal (env)
                then [env, names +++ globals, funs]
                else [env, globals, funs]
              fi
            esac
        | Fun (name, args, body) ->
            case genFunLabel (env, name) of [lab, env] ->
              case env.addFun (name, lab, size (args)) of env ->
                [env, globals, Fun (lab, args, body) : funs]
              esac
            esac
        esac
      },
      [env, {}, {}], defs
    )
  }

  fun compileListExprs (env, args) {
    foldl (
      fun ([env, code], arg) {
        case env.genLabel of [lab, env] ->
          case compile (lab, env, arg) of [labUsed, env, acode] ->
            [
              env,
              code
              <+> acode
              <+> label (lab, labUsed)
            ]
          esac
        esac
      },
      [env, emptyBuffer ()], args
    )
  }

  fun compileFuns (env, funs) {
    case foldl (
      fun ([env, code], Fun (flab, args, body, state)) {
        case env.beginFun (state).addArgs (args).genLabel of [lab, env] ->
          case compile (lab, env, body) of [labUsed, env, bcode] ->
            [
              env,
              code
              <+ LABEL (flab)
              <+ BEGIN (flab, args.size, getLocals (env))
              <+> bcode
              <+> label (lab, labUsed)
              <+ END
            ]
          esac
        esac
      },
      [env, emptyBuffer ()],
      funs
    ) of [env, code] ->
      case env.getFuns of
        [{}, _] -> [env, code]
        | [funs, env] ->
            case compileFuns (env, funs) of [env, newcode] ->
              [env, code <+> newcode]
            esac
      esac
    esac
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> getBuffer $
              singletonBuffer (LABEL ("main")) <+ BEGIN ("main", 0, getLocals (env)) 
                <+> code <+> label (endLab, endLabUsed) <+ END 
                <+> (case env.getFuns of [funs, env] -> compileFuns (env, funs) [1] esac) 
       esac
  esac
}
