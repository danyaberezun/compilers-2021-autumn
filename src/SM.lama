-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

public smLogger = fopen ("SM.log", "w");

fun log (msg) {
  -- fprintf (smLogger, msg)
  -- printf (msg)
  42
}

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
    case findMap (map, l) of
      Some (insns) -> insns
    | None -> failure ("Not found in evalEnv: %s\n", l.string)
    esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), "kek")}); -- getLoc (x)

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  (* Assignment *)
  -- Evaluates single stack machine instruction
  fun evalInsn (c@[s, cs, st, w], insn, insns) {
    case insn of
      JMP (l) -> [Some (env.fromLabel (l)), c]
    | CJMP (cond, l) ->
        case s of x:s ->
          var z = case cond of "z" -> 1 | "nz" -> 0 esac;
          if x == z
          then [None, [s, cs, st, w]]
          else [Some (env.fromLabel (l)), [s, cs, st, w]]
          fi
        esac
    | END ->
        case cs of
          {}           -> [Stop, c]
        | [st, p] : cs -> [Some (p), [s, cs, st, w]]
        esac
    | CALL (fLabel, nArgs) ->
        [Some (fromLabel (env, fLabel)), [s, [st, insns] : cs, st, w]]
    | insn -> [None, case insn of
        BINOP  (op) -> case s of y:x:s -> [evalOp (op, x, y) : s, cs, st, w] esac
      | CONST  (n)  -> [n:s, cs, st, w]
      | READ        -> case readWorld (w) of [n, w] -> [n:s, cs, st, w] esac
      | WRITE       -> case s of z:s -> [s, cs, st, writeWorld (z, w)] esac
      | LD     (x)  -> [st.lookup (x) : s, cs, st, w]
      | LDA    (x)  -> [Ref (x) : s, cs, st, w]
      | ST     (x)  -> case s of z:s -> [s, cs, assign (st, x, z); st, w] esac
      | STI         -> case s of v:Ref (x):s -> [v:s, cs, assign (st, x, v); st, w] esac
      | LABEL  (l)  -> c
      | DROP        -> case s of {} -> c | _:s -> [s, cs, st, w] esac
      | GLOBAL (x)  -> assign(st, Glb (x), 0); c
      | BEGIN  (funName, nArgs, nLocals) ->
          st := makeState (nArgs, nLocals);
          case take (s, nArgs) of [s, args] ->
            foldl (fun (i, arg) {assign (st, Arg (i), arg); i + 1}, 0, args);
            [s, cs, st, w]
          esac
      esac]
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (env, c@[s, ct, st, w], insns) {
    case insns of
      {} -> c
    | insn : insns ->
        case evalInsn (c, insn, insns) of
          [None, c]         -> eval (env, c, insns)
        | [Some (insns), c] -> eval (env, c, insns)
        | [Stop, c]         -> c
        esac
    esac
  }
  (* End *)

  eval (env, [{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
    if scopeDepth == 1
    then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
    else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
    fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  Env ([genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ])
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  case env of Env (fs) -> fs esac [0] ()
}

fun rememberFun (env, name, args, body) {
  case env of Env (fs) -> fs esac [1] (name, args, body)
}

fun beginScope (env) {
  case env of Env (fs) -> fs esac [2] ()
}

fun endScope (env) {
  case env of Env (fs) -> fs esac [3] ()
}

fun addArg (env, name) {
  case env of Env (fs) -> fs esac [4] (name)
}

fun addVar (env, name) {
  case env of Env (fs) -> fs esac [5] (name)
}

fun beginFun (env, state) {
  case env of Env (fs) -> fs esac [6] (state)
}

fun getFuns (env) {
  case env of Env (fs) -> fs esac [7] ()
}

fun lookupVar (env, name) {
  case env of Env (fs) -> fs esac [8] (name)
}

fun lookupFun (env, name) {
  case env of Env (fs) -> fs esac [9] (name)
}

fun getLocals (env) {
  case env of Env (fs) -> fs esac [10] ()
}

fun genFunLabel (env, name) {
  case env of Env (fs) -> fs esac [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  case env of Env (fs) -> fs esac [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  case env of Env (fs) -> fs esac [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Compile expression with its own label after.
  fun compileL (env, expr) {
    case env.genLabel of [lab, env] ->
      case compile (lab, env, expr) of [labUsed, env, code] ->
        [env, code <+> label (lab, labUsed)]
      esac
    esac
  }

  fun compileL2 (env, e1, e2) {
    case compileL (env, e1) of [env, code1] ->
      case compileL (env, e2) of [env, code2] ->
        [env, code1 <+> code2]
      esac
    esac
  }

  fun compileMany (env, stmts) {
    foldl (fun ([env, code], stmt) {
      case compileL (env, stmt) of [env, newCode] ->
        [env, code <+> newCode]
      esac
    }, [env, emptyBuffer ()], stmts)
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (env.lookupVar (x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (env.lookupVar (x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)        ->
        case compileL (env, e) of
          [env, code] -> [false, env, code <+ DROP]
        esac
    | Read   (x)        ->
        case compileL (env, x) of
          [env, code] -> [false, env, code <+ READ <+ STI <+ DROP]
        esac
    | Write  (e)        ->
        case compileL (env, e) of
          [env, code] -> [false, env, code <+ WRITE]
        esac
    | Assn   (x, e)     ->
        case compileL2 (env, x, e) of
          [env, code] -> [false, env, code <+ STI]
        esac
    | Binop  (op, l, r) ->
        case compileL2 (env, l, r) of
          [env, code] -> [false, env, code <+ BINOP (op)]
        esac
    | Seq    (s1, s2)   ->
        case compileL (env, s1) of [env, code1] ->
          case compile (lab, env, s2) of [used, env, code2] ->
            [used, env, code1 <+> code2]
          esac
        esac
    | If     (c, t, e)  ->
        case env.genLabel of [elseLabel, env] ->
          case compileL (env, c) of [env, codeC] ->
            case compile (lab, env, t) of [_, env, codeT] ->
              case compile (lab, env, e) of [_, env, codeE] ->
                [true, env,
                  codeC
                    <+ CJMP ("z", elseLabel)
                    <+> codeT
                    <+ JMP (lab)
                    <+ LABEL (elseLabel)
                    <+> codeE]
              esac
            esac
          esac
        esac
    | While   (c, b)    ->
        case env.genLabels (2) of [condLabel, bodyLabel, env] ->
          case compileL (env, c) of [env, codeC] ->
            case compile (condLabel, env, b) of [_, env, codeB] ->
              [false, env,
                singletonBuffer (JMP (condLabel))
                  <+ LABEL (bodyLabel)
                  <+> codeB
                  <+ LABEL (condLabel)
                  <+> codeC
                  <+ CJMP ("nz", bodyLabel)]
            esac
          esac
        esac
    | DoWhile (s, c)     -> compile (lab, env, Seq (s, While (c, s)))
    | Scope (defs, expr) ->
        var globalsCode;
        env := env.beginScope;
        env := foldl (fun (env, def) {
          case def of
            Var (names) -> env.addVars (names)
          | Fun (name, argNames, body) ->
              case env.genFunLabel (name) of [label, env] ->
                env.addFun (name, label, argNames.size)
              esac
          esac
        }, env, defs);
        globalsCode := foldl (fun (code, def) {
          case def of
            Var (names) ->
              if env.isGlobal == 0 then code else
                foldl (fun (code, name) {code <+ GLOBAL (name)}, code, names)
              fi
          | _ -> code
          esac
        }, emptyBuffer (), defs);
        env := foldl(fun (env, def) {
          case def of
            Fun (name, argNames, body) ->
              case env.lookupFun (name) of Fun (label, _) ->
                env.rememberFun (label, argNames, body)
              esac
          | _ -> env
          esac
        }, env, defs);
        case compile (lab, env, expr) of [used, env, code] ->
          [used, env.endScope, globalsCode <+> code]
        esac
    | Call (name, args) ->
        case env.lookupFun (name) of Fun (label, nArgs) ->
          case compileMany (env, args) of [env, argsCode] ->
            if args.size != nArgs
            then failure ("Wrong number of arguments: %s expects %d but got %d\n", name, nArgs, args.size)
            else [false, env, argsCode <+ CALL (label, nArgs)]
            fi
          esac
        esac
    esac
  }

  fun compileFunction (env, Fun (fLabel, argNames, body, state)) {
    var res;
    log (sprintf ("compileFunction on %s\n", fLabel));
    env := beginFun (env, state);
    env := foldl (fun (env, name) {addArg (env, name)}, env, argNames);
    res := case compileL (env, body) of [env, code] ->
      [env, emptyBuffer ()
        <+  LABEL (fLabel)
        <+  BEGIN (fLabel, argNames.size, env.getLocals)
        <+> code
        <+  END]
    esac;
    log (sprintf ("end compileFunction on %s\n", fLabel));
    res
  }

  fun compileFunctions (env) {
    var code = emptyBuffer ();
    var funs;
    do
      var envCode;
      case env.getFuns of [newFuns, newEnv] ->
        funs := newFuns;
        env := newEnv
      esac;
      envCode := foldl (fun ([env, code], f) {
        case compileFunction (env, f) of [env, newCode] ->
          [env, code <+> newCode]
        esac
      }, [env, emptyBuffer ()], funs);
      case envCode of [newEnv, newCode] ->
        env := newEnv;
        code := code <+> newCode
      esac
    while funs.size od;
    code
  }

  log (sprintf ("compileSM\n"));
  case compileL (initCompEnv (), stmt) of [env, code] ->
    code := getBuffer $ emptyBuffer ()
      <+  LABEL ("main")
      <+  BEGIN ("main", 0, getLocals (env))
      <+> code
      <+  END
      <+> compileFunctions (env);
    log (sprintf ("\ncode:\n%s\n\n", showSM (code)));
    code
  esac
}
