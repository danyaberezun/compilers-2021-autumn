-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;
import Expr;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (evalOne, c, insns)
}

fun evalOne (c, ins) {
  case ins of
    READ      -> case readWorld (c[2]) of [value, world] -> [value : c[0], c[1], world] esac
  | WRITE     -> case c[0] of head:tail -> [tail, c[1], writeWorld (head, c[2])] esac
  | BINOP (s) -> case c[0] of r:l:tail -> [opValue (s) (l, r) : tail, c[1], c[2]] esac
  | LD    (x) -> [c[1] (x) : c[0], c[1], c[2]]
  | ST    (x) -> case c[0] of head:tail -> [tail, c[1] <- [x, head], c[2]] esac
  | CONST (n) -> [n : c[0], c[1], c[2]]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var   (name)      -> {LD (name)}
  | Const (value)     -> {CONST (value)}
  | Binop (op, l, r)  -> compileExpr (l) +++ compileExpr (r) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn  (name, expr)   -> compileExpr (expr) +++ {ST (name)}
  | Seq   (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  | Skip                 -> {}
  | Read  (name)         -> {READ, ST (name)}
  | Write (expr)         -> compileExpr (expr) +++ {WRITE}
  esac
}
