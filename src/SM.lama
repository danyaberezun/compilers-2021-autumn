-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalSingle(c@[s, state, w], inst) {
  case inst of 
    READ -> (
    var p = readWorld(w);
    [p.fst : s, state, p.snd]
    )
  | WRITE -> (
    case s of 
      hd : tail -> [tail, state, writeWorld(hd, w)]
    esac
  )
  | BINOP (oper) -> (
    case s of 
      r : l : tail -> [evalExpr(state, Binop(oper, Const(l), Const(r))) : tail, state, w]
    esac
  )
  | LD (x) -> [state(x) : s, state, w]
  | ST (x) -> (
    case s of 
      hd : tail -> [tail, state <- [x, hd], w]
    esac
  )
  | CONST(n) -> [n : s, state, w]
  esac

}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c 
  | hd : tail -> eval(evalSingle(c, hd), tail) 
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var(x) -> (
      {LD (x)}
    )
  | Const(n) -> (
      {CONST (n)}
    )
  | Binop(s, l, r) -> (
      compileExpr(l) +++ compileExpr(r) +++ {BINOP(s)}
    )

  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn(x, e) -> compileExpr(e) +++ {ST(x)}
  | Read(x) -> {READ, ST(x)}
  | Write(e) -> compileExpr(e) +++ {WRITE}
  | Seq(s1, s2) -> compileSM(s1) +++ compileSM(s2)
  | Skip -> {}
  esac
}