-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, w], insns) {
  -- failure(insns.string);
  case insns of 
    ins:insns -> 
      case ins of 
          READ -> case readWorld(w) of
                    [n, w] -> eval (env, [n:stack, state, w], insns) 
                  esac
        | WRITE -> eval (env, [tl(stack), state, writeWorld(hd(stack), w)], insns)
        | BINOP (op) -> case stack of 
                          r:l:stack -> eval (env, [evalOp(op, l, r):stack, state, w], insns)
                        esac 
        | LD (x) -> eval (env, [state(x):stack, state, w], insns)
        | ST (x) -> case stack of 
                      n:stack -> eval (env, [stack, state <- [x, n], w], insns)
                    esac
        | CONST (n) -> eval (env, [n:stack, state, w], insns)
        | LABEL (l) -> eval (env, c, insns)
        | JMP (l) -> eval (env, c, fromLabel(env, l))
        | CJMP ("z", l) -> eval(env, [tl(stack), state, w], if hd(stack) then insns else fromLabel(env, l) fi)
        | CJMP ("nz", l) -> eval(env, [tl(stack), state, w], if hd(stack) then fromLabel(env, l) else insns fi)
        | LDA (x) -> eval(env, [Ref(x):stack, state, w], insns)
        | STI -> case stack of 
                   Ref(x):v:stack -> eval(env, [stack, state <- [x, v], w], insns)
                 esac
        | DUP -> eval(env, [hd(stack):stack, state, w], insns)
        | DROP -> eval(env, [tl(stack), state, w], insns)
      esac
    | _ -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileNew (env, stmt) {
    case env.genLabel of
      [lab, env] -> 
        case compile(lab, env, stmt) of
          [labUsed, env, code] -> [env, code <+> label(lab, labUsed)]
        esac
    esac
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read   (x)        -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Ignore (e) -> 
        case compileNew(env, e) of
          [env, code] -> [false, env, code <+ DROP]
        esac
    | Write (e) ->
        case compileNew(env, e) of
          [env, eCode] -> [false, env, eCode <+ WRITE]
        esac 
    | Binop (op, l, r) -> 
        case compileNew(env, l) of
          [env, lCode] -> 
            case compileNew(env, r) of
              [env, rCode] -> [false, env, lCode <+> rCode <+ BINOP (op)]
            esac
        esac
    | Assn (x, e) ->
        case compileNew(env, e) of
          [env, eCode] -> 
            case compileNew(env, x) of
              [env, xCode] -> [false, env, eCode <+ DUP <+> xCode <+ STI]
            esac
        esac 
    | Seq   (s1, s2) ->
        case compileNew(env, s1) of
          [env, s1Code] ->
            case compile (lab, env, s2) of
              [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> s2Code]
            esac
        esac
    | If (e, s1, s2) -> 
        case env.genLabel of 
          [s2Lab, env] -> 
            case compile(lab, env, s1) of
              [_, env, s1Code] -> 
                case compile(lab, env, s2) of
                  [_, env, s2Code] -> 
                    case compileNew(env, e) of
                      [env, eCode] -> [true, env, eCode <+ CJMP("z", s2Lab) <+> s1Code <+ JMP(lab) <+ LABEL(s2Lab) <+> s2Code ]
                    esac
                esac
            esac
        esac
    | While (e, s1) -> 
        case env.genLabels(2) of
          [eLab, s1Lab, env] -> 
            case compile(eLab, env, s1) of
              [_, env, s1Code] -> 
                case compileNew(env, e) of
                  [env, eCode] ->  [false, env, singletonBuffer(JMP(eLab)) <+ LABEL(s1Lab) <+> s1Code <+ LABEL(eLab) <+> eCode <+ CJMP("nz", s1Lab)]
                esac
            esac
        esac
    | DoWhile (s1, e) -> 
        case env.genLabel of
          [s1Lab, env] -> 
            case compileNew(env, s1) of
              [env, s1Code] -> 
                case compileNew(env, e) of
                  [env, eCode] -> [false, env, label(s1Lab, true) <+> s1Code <+> eCode <+ CJMP("nz", s1Lab)]
                esac
            esac
        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
