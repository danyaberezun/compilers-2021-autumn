-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }


  fun shoundJump (flg, vl) {
    vl != 0
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    -- if 
    --   case s of
    --     [_, _] -> 0
    --   | _ -> 1
    --   esac
    -- then
    --   failure ("%s %s", s[1].string, insns.string)
    -- fi;
    -- failure ("%s\n", insns.string);
    -- printf (s.string);
    case insns of 
      {}         -> c
    | (i : nsns) ->
        case i of
          READ      -> 
            case readWorld(w) of 
              [fst, w] -> eval([fst : st, cst, s, w], nsns)
            esac
        | WRITE     ->
            case st of
              (fst : st) -> eval([st, cst, s, writeWorld(fst, w)], nsns)
            | _ -> failure ("%s error\n", i.string)
            esac
        | BINOP (op) -> 
            case st of
              (snd : (fst : st)) -> eval([evalOp(op, fst, snd) : st, cst, s, w], nsns)
            | _ -> failure ("%s error\n", i.string)
            esac
        | LD    (x) -> 
           case lookup(s, x) of --  case x of Loc(_) -> failure(s.string) | _ -> 0 esac; 
              v -> eval([v : st, cst, s, w], nsns)
            esac
        | LDA   (x) -> eval([RefVal(x) : st, cst, s, w], nsns)
        | ST    (x) ->
            case st of
              (fst : st) -> assign(s, x, fst); eval([st, cst, s, w], nsns)
            | _ -> failure ("%s error\n", i.string)
            esac
        | STI       ->
            case st of
              (vl : RefVal(rf) : st) -> assign(s, rf, vl); eval([vl : st, cst, s, w], nsns)
            | _ -> failure ("%s error\n", i.string)
            esac
        | CONST (n) ->  eval([n : st, cst, s, w], nsns)
        | JMP (lab) ->  eval(c, env.fromLabel(lab))
        | LABEL (lab) -> eval(c, nsns)
        | CJMP (flg, lab) ->
            case st of
              (cond : st) -> 
                if shoundJump(flg, cond) then
                  eval([st, cst, s, w], env.fromLabel(lab))
                else
                  eval([st, cst, s, w], nsns)
                fi
            | _ -> failure ("%s error\n", i.string)
            esac
        | DUP     ->
            case st of
              (fst : st) -> eval([fst : (fst : st), cst, s, w], nsns)
            | _ -> failure ("%s error\n", i.string)
            esac
        | DROP     ->
            case st of
              (fst : st) -> eval([st, cst, s, w], nsns)
            | _ -> failure ("%s error\n", i.string)
            esac
        | GLOBAL (x) -> assign(s, Glb(x), 0); eval([st, cst, s, w], nsns)
        | CALL (fLab, n) -> eval([st, [s, nsns] : cst, s, w], env.fromLabel(fLab))
        | BEGIN (name, a, l) -> 
            case getArgsFromStack([st, cst, makeState(a, l), w], a) of
              c -> eval(c, nsns)
            esac
        | END -> 
            case cst of 
              {} -> c
            | ([s, nsns] : cst) -> eval([st, cst, s, w], nsns) 
            esac
        | _ -> c
        esac
      | _ -> c
    esac
  }
  (* End *)

  fun getArgsFromStack (c@[st, cst, s, w], n) {
    if n == 0 then
      c 
    else
      case st of
        v : st -> assign(s, Arg(n-1), v); getArgsFromStack([st, cst, s, w], n-1)
      esac
    fi
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
    case env [9] (name) of
    v ->  v
  esac
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileMany (lab, env, stmts) {
    case stmts of
      {} -> [false, env, emptyBuffer ()]
    | stmt : stmts -> 
        case genLabel(env) of
          [env, argLab] ->
            case compile(argLab, env, stmt) of
              [_, env, code] ->
                case compileMany (lab, env, stmts) of
                  [_, env, codes] -> [false, env, code <+> codes]
                esac
            esac
        esac
    esac
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Binop (op, s1, s2) ->
        case compile (lab, env, s1) of 
          [_, env, s1Code] -> 
            case compile (lab, env, s2) of 
              [_, env, s2Code] -> [false, env, s1Code <+> s2Code <+> singletonBuffer (BINOP (op))]
            esac
        esac
    | Read  (x)         -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x))]
    | Write (ex)         -> 
        case compile (lab, env, ex) of
          [_, env, code] -> [false, env, code <+ WRITE]
        esac
    | Assn  (rf, ex)      -> 
        case compile (lab, env, rf) of
          [_, env, rfCode] ->
            case compile (lab, env, ex) of
              [_, env, code] -> [false, env, rfCode <+> code <+ STI]
            esac
        esac
    | Seq   (s1, s2)    ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | Ignore (ex)       -> 
        case compile (lab, env, ex) of
          [_, env, code] -> [false, env, code <+ DROP]
        esac
    | While (expr, bodyExpr) ->
        case compile(lab, env, expr) of
          [_, env, bodyCode] -> 
            case env.genLabels(2) of
              [sLab, eLab, env] -> 
                case compile(sLab, env, bodyExpr) of
                  [sLabUsed, env, subCode]  ->
                    [false, env, 
                      singletonBuffer (JMP (eLab)) 
                      <+> 
                      label (sLab, true) 
                      <+> 
                      subCode <+> 
                      label (eLab, true) 
                      <+> 
                      bodyCode <+ 
                      CJMP("nz", sLab) ]
                esac
            esac
        esac
    | DoWhile (bodyExpr, expr) ->
        case compile(lab, env, expr) of
          [_, env, bodyCode] ->
            case compile(lab, env, bodyExpr) of
              [labUsed, env, subCode]  ->
                  [labUsed, env, label (lab, true) <+> subCode <+> bodyCode <+ CJMP("nz", lab) ]
            esac
        esac
    | If (expr, stmt1, stmt2) ->
        case compile(lab, env, expr) of
          [_, env, exprCode] ->
            case env.genLabels(3) of
              [s1Lab, s2Lab, fLab, env] ->
                case compile(s1Lab, env, stmt1) of
                  [s1LabUsed, env, s1Code] ->
                    case compile(s2Lab, env, stmt2) of
                      [s2LabUsed2, env, s2Code] ->
                          [false, env, 
                            exprCode <+ CJMP("nz", s1Lab) <+> s2Code <+ JMP(fLab) <+> label(s1Lab, true) <+> s1Code <+> label(fLab, true)]
                    esac
                esac
            esac
        esac
    | Call (call_name, expr_list) -> 
        case genLabel(env) of
          [callLab, env] ->
            case compile(callLab, env, foldr(fun (acc, e) {Seq(e, acc)}, Skip, expr_list)) of
              [usedCallLab, env, argsCode] ->
                case lookupFun(env, call_name) of
                  Fun (fLab, n) -> [false, env, argsCode <+> label(callLab, usedCallLab) <+ CALL (fLab, n)]
                esac
            esac
        esac
    | Scope (def_list, expr) -> 
        case genLabels(env, 2) of
          [defLab, scopeLab, env] ->
            case beginScope(env) of 
              env -> 
                case addDefs(defLab, env, def_list) of
                  [kLocals, _, env, defCode] -> 
                    case addFuns(env, def_list) of
                      env ->
                        case compile(scopeLab, env, expr) of 
                          [_, env, scopeCode] -> [false, endScope(env), defCode <+> scopeCode]
                        esac
                    esac
                esac
            esac
        esac
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  fun compileProgram (lab, env, stmt) {
    case compile(lab, env, stmt) of 
      [usedLab, env, code] -> [usedLab, env, singletonBuffer(BEGIN ("main", 0, env.getLocals)) <+> code <+ END <+> compileFunctions(env)]
    esac
  }

  fun compileFunctions(env) {
    fun iterate(env, fun_list) {
      case fun_list of
        {} -> emptyBuffer ()
      | Fun (fLab, args, body, state) : fun_list ->
        case genLabel(addArgs(beginFun(env, state), args)) of
          [endLab, env] ->
              case compile(endLab, env, body) of
                [endUsed, env, code] ->
                  singletonBuffer (LABEL(fLab)) <+
                  BEGIN (fLab, args.size, getLocals(env)) <+>
                  code <+>
                  label (endLab, endUsed) <+
                  END <+>
                  iterate (env, fun_list)
              esac
          esac
      esac
    }

    iterate(env, env.getFuns[0])
  }

  fun compileGlobalVars(env, names) {
    case names of
      {} -> emptyBuffer ()
    | name : names ->
        case lookupVar(env, name) of
          Glb (x) -> singletonBuffer (GLOBAL (x)) <+> compileGlobalVars(env, names)
        | _       -> compileGlobalVars(env, names)
        esac
    esac
  }

  fun addFuns (env, def_list) {
    case def_list of 
      {}    -> env
    | def : def_list  -> 
        case def of
          Var (names) -> addFuns(env, def_list)
        | Fun (name, args, body) -> 
            case genFunLabel(env, name) of 
              [fLab, env] -> addFuns(rememberFun(env, fLab, args, body), def_list)
            esac
        esac
    esac
  }

  fun addDefs (lab, env, def_list) {
    case def_list of 
      {}    -> [0, false, env, emptyBuffer ()]
    | def : def_list  -> 
        case def of
          Var (names) ->
            case addDefs(lab, addVars(env, names), def_list) of
              [k, false, env, code] -> [k + if isGlobal(env) then 0 else names.size fi, false, env, compileGlobalVars(env, names) <+> code]
            esac
        -- | _ -> addDefs(lab, env, def_list)
        | Fun (name, args, body) -> 
            case genFunLabel(env, name) of 
              [fLab, env] -> addDefs(lab, addFun(env, name, fLab, args.size), def_list)
            esac
        esac
    esac
  }

  -- fun compileFun (env, fn, fLab) {
  --   case fn of
  --     Fun (name, args, body, state) ->
  --       case compile(fLab, env, fLab)
  --         [_, env, bodyCode] -> singletonBuffer(LABEL (fLab)) <+> BEGIN(name, length(args), 0) <+> bodyCode <+ END
  --       esac
  --   esac 
  -- }

  -- fun compileFunList (env, fnlist) {

  -- }

  fun inScoped(stmt) {
    Scope({}, stmt)
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compileProgram (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
       esac
  esac
}

