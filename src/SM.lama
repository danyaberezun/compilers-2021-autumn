-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun emptyStackError () {
  failure ("Trying to get value from empty stack")
}

fun getValueFromStack (st) {
  case st of
    []     -> emptyStackError ()
  | x : xs -> [x, xs]
  esac
}

fun evalInsn (c, i) {
  var stack = c[0];
  var state = c[1];
  var world = c[2];
  case i of
    READ      -> 
      var value = readWorld (world);
      [value[0] : stack, state, value[1]]
  | WRITE     ->
      var value = getValueFromStack (stack);
      [value[1], state, writeWorld (value[0], world)]
  | BINOP (s) ->
      var st1 = getValueFromStack (stack);
      var st2 = getValueFromStack (st1[1]);
      var r = st1[0];
      var l = st2[0];
      var newStack = st2[1];
      [(evalBinop (s, l, r)) : newStack, state, world]
  | LD    (x) ->
      [(state (x)) : stack, state, world]
  | ST    (x) ->
      var value = getValueFromStack (stack);
      [value[1], state <- [x, value[0]], world]
  | CONST (n) ->
      [n : stack, state, world]
  | LABEL (l) -> c
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    {}     -> c
  | x : xs -> 
    case x of
      JMP  (l)    -> 
      eval (env, c, env.fromLabel (l))
    | CJMP (s, l) -> 
      var r = getValueFromStack (c[0]);
      case [s, r[0]] of
          ["z",  0] -> eval (env, [r[1], c[1], c[2]], env.fromLabel (l))
        | ["z",  _] -> eval (env, [r[1], c[1], c[2]], xs)
        | ["nz", 0] -> eval (env, [r[1], c[1], c[2]], xs)
        | ["nz", _] -> eval (env, [r[1], c[1], c[2]], env.fromLabel (l))
      esac
    | _           ->
      eval (env, evalInsn (c, x), xs)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  (eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns))[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x)        -> singletonBuffer (LD (x))
  | Const (n)        -> singletonBuffer (CONST (n))
  | Binop (op, l, r) -> ((compileExpr (l)) <+> (compileExpr (r))) <+ (BINOP (op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | While (e, s)   ->
      case genLabels (env, 2) of
        [labStart, labS, env] -> 
          case compile (labS, env, s) of
            [_, env, sCode] -> 
              [false, env, 
                singletonBuffer (JMP (labS)) <+> 
                label (labStart, true) <+> 
                sCode <+> 
                label (labS, true) <+> 
                compileExpr (e) <+ 
                CJMP ("nz", labStart)]
          esac
      esac
    | If (e, s1, s2) ->
      case env.genLabel of
        [labS1Start, env] ->
          case compile (lab, env, s1) of
            [_, env, codeS1] ->
              case compile (lab, env, s2) of
                [_, env, codeS2] ->
                  [true, env,
                    compileExpr (e) <+
                    CJMP ("nz", labS1Start) <+>
                    codeS2 <+
                    JMP (lab) <+>
                    label (labS1Start, true) <+>
                    codeS1]
              esac
          esac
      esac
    | DoWhile (s, e) ->
      case genLabels (env, 2) of
        [labStart, labS, env] -> 
          case compile (labS, env, s) of
            [labSUsed, env, sCode] -> 
              [false, env,
                label (labStart, true) <+> 
                sCode <+> 
                label (labS, labSUsed) <+> 
                compileExpr (e) <+ 
                CJMP ("nz", labStart)]
          esac
      esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}