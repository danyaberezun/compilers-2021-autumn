-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalHelp(c@[s, st, w@[i, o]], inst) {
  case inst of
    READ -> [hd(i):s, st, [tl(i), o]]
  | WRITE -> [tl(s), st, [i, hd(s):o]]
  | BINOP (op) -> case s of
      x:y:s -> [evalOp(op,y,x):s, st, w]
    esac
  | ST (x) -> [tl(s), st <- [x, hd(s)], w]
  | LD (x) -> [st(x):s, st, w]
  | CONST (n) -> [n:s, st, w]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | ins:t -> eval(evalHelp(c, ins), t)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (v) -> {LD(v)}
  | Const (n) -> {CONST(n)}
  | Binop (s, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP(s)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (v, e) -> compileExpr(e) +++ {ST(v)}
  | Seq (st1, st2) -> compileSM(st1) +++ compileSM(st2)
  | Skip -> {}
  | Read (v) -> {READ, ST(v)}
  | Write (expr) -> compileExpr(expr) +++ {WRITE}
  esac
}
