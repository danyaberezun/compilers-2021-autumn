-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  fun read ([stack, state, world]) {
    var res = readWorld (world);
    [res.fst : stack, state, res.snd]
  }

  fun write ([v : stack, state, world]) {
    [stack, state, writeWorld (v, world)]
  }

  fun binop ([s : f : stack, state, world], op) {
    [signToOp (op) (f, s) : stack, state, world]
  }

  fun ld ([stack, state, world], x) {
    [state (x) : stack, state, world]
  }

  fun st ([v : stack, state, world], x) {
    [stack, state <- [x, v], world]
  }

  fun const ([stack, state, world], n) {
    [n : stack, state, world]
  }
  
  case insns of 
    {} -> c
  | h : tail -> eval (case h of 
      READ -> read (c)
    | WRITE -> write (c)
    | BINOP (op) -> binop (c, op)
    | LD (x) -> ld (c, x)
    | ST (x) -> st (c, x)
    | CONST (n) -> const (c, n)
    esac, tail)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (s) -> {LD (s)}
  | Const (v) -> {CONST (v)}
  | Binop (sign, f, s) -> compileExpr (f) +++ compileExpr (s) +++ {BINOP (sign)} 
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Skip -> {}
  | Assn (v, e) -> compileExpr (e) +++ {ST (v)}
  | Seq (f, s) -> compileSM (f) +++ compileSM (s)
  | Read (v) -> {READ, ST (v)}
  | Write (e) -> compileExpr (e) +++ {WRITE}
  esac
}
