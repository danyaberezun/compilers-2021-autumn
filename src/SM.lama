-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  failure ("SM eval not implemented\n")
fun eval (c@[stack, state, world], insns) {
  case insns of
  {}               -> c
  | (READ:p)       -> case readWorld (world) of
                        [n, world_] -> eval ([n:stack, state, world_], p)
                      esac  
  | (WRITE:p)      -> case stack of
                        (n:stack_) -> eval ([stack_, state, writeWorld (n, world)], p)
                      esac
  | (BINOP (op):p) -> case stack of
                        (y:x:stack_) -> eval ([(evalOp (op) (x, y)):stack_, state, world], p)
                      esac
  | (LD (x):p)     -> eval ([state (x):stack, state, world], p)
  | (ST (x):p)     -> case stack of
                        (n:stack_) -> eval ([stack_, state <- [x, n], world], p)
                      esac
  | (CONST (n):p)  -> eval ([n:stack, state, world], p)
  esac
  } 
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  failure ("compileExpr not implemented\n")
  case expr of
    Var (x) -> {LD (x)}
  | Const (n) -> {CONST (n)}
  | Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP (op)}  
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  failure ("compileSM not implemented\n")case stmt of
    Assn   (x, expr) -> compileExpr (expr) +++ {ST (x)}
  | Seq    (s1, s2)  -> compileSM (s1) +++ compileSM (s2)
  | Skip             -> {}                 
  | Read   (x)       -> {READ} +++ {ST (x)}     
  | Write  (expr)    -> compileExpr (expr) +++ {WRITE}
  esac
}
