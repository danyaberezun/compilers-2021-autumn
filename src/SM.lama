-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl(fun (acc@[s, st, w], i) {
    case i of
      READ ->
        case readWorld(w) of
          [n, nw] -> [n:s, st, nw]
        esac
      | WRITE ->
        case s of
          x:xs -> [xs, st, writeWorld(x, w)]
        esac
      | BINOP (op) ->
        case s of
          y:x:zs -> [doBinop(op, x, y):zs, st, w]
        esac
      | LD (ident) -> [st(ident):s, st, w]
      | ST (ident) ->
        case s of
          x:xs -> [xs, st <- [ident, x], w]
        esac
      | CONST (n) -> [n:s, st, w]
    esac
  }, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (ident) -> {LD (ident)}
    | Const (i) -> {CONST (i)}
    | Binop (op, lexpr, rexpr) -> compileExpr(lexpr) +++ compileExpr(rexpr) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (ident, expr) -> compileExpr(expr) +++ {ST (ident)}
    | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Read (ident) -> {READ, ST (ident)}
    | Write (expr) -> compileExpr(expr) +++ {WRITE}
    | Skip -> {}
  esac
}
