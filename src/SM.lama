-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], insns) {
  case insns of 
    insn: insn_rest -> 
      case insn of 
        WRITE -> case stack of
          stack_cur : stack_rest -> eval([stack_rest, state, writeWorld(stack_cur, world)], insn_rest)
          esac
      | READ -> case readWorld(world) of 
          [value, new_world] -> eval([value : stack, state, new_world], insn_rest)
          esac
      | CONST(value) -> eval([value: stack, state, world], insn_rest)
      | BINOP(op) -> case stack of 
          value1 : value2 : stack_rest -> eval([evalBinop(op, value2, value1) : stack_rest, state, world], insn_rest)
          esac
      | LD(name) -> eval([state(name) : stack, state, world], insn_rest)
      | ST(name) -> case stack of 
          value : stack_rest -> eval([stack_rest, state <- [name, value], world], insn_rest)
          esac
      esac
  | {} -> [stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var(name) -> {LD(name)}
  | Const(value) -> {CONST(value)}
  | Binop(op, exp1, exp2) -> compileExpr(exp1) +++ compileExpr(exp2) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn(name, exp) -> compileExpr(exp) +++ {ST(name)}
  | Seq(stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Skip -> []
  | Write(exp) -> compileExpr(exp) +++ {WRITE}
  | Read(name) -> {READ, ST(name)}
  esac
}
