-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    case insns of 
      head:tail -> 
        case head of
          CONST (x) -> eval([x:st, cst, s, w], tail)
          | READ -> case readWorld(w) of [n, w] -> 
              eval([n:st, cst, s, w], tail) 
            esac
          | WRITE -> case st of value:restStack -> 
              eval([restStack, cst, s, writeWorld(value, w)], tail) 
            esac
          | LD (x) -> eval([lookup(s,x):st, cst, s, w], tail)
          | ST (name) -> case st of value:restStack -> 
              s.assign(name, value);
              eval (c, tail) 
            esac
          | BINOP (op) -> case st of second:first:restStack -> 
              eval([evalOp(op, first, second) : restStack, cst, s, w], tail)
            esac
          | LABEL (l) -> eval (c, tail) 
          | JMP (l) -> eval (c, env.fromLabel(l))
          | CJMP ("z", l) -> case st of first:restStack ->
              case first of
                0 -> eval ([restStack, cst, s, w], env.fromLabel(l))
                | _ -> eval ([restStack, cst, s, w], tail)
              esac
            esac
          | CJMP ("nz", l) -> case st of first:restStack -> 
              case first of
                0 -> eval ([restStack, cst, s, w], tail)
                | _ -> eval ([restStack, cst, s, w], env.fromLabel(l))
              esac
            esac
          | LDA (x) -> eval([x : st, cst, s, w], tail)
          | STI ->
            case st of y:x:restStack ->
              s.assign(x, y);
              eval([y:restStack, cst, s, w], tail)
            esac
          | DROP -> eval ([tl (st), cst, s, w], tail)
          | BEGIN (name, args, locs) -> 
            case take (st, args) of
              [st, values] -> 
                case foldl (
                  fun ([s, n], value) {
                    assign(s, Arg(n), value);
                    [s, n + 1]
                  }, [makeState(args, locs), 0], values
                ) of 
                  [s, _] -> eval([st, cst, s, w], tail)
                esac
            esac
          | GLOBAL (x) -> assign(s, Glb(x), 0); eval(c, tail)
          | CALL (name, _) -> eval([st, [s, tail]:cst, s, w], fromLabel (env, name))
          | DUP ->
            case st of value:restStack ->
              eval([value:value:restStack, cst, s, w], tail)
            esac
          | END -> 
            case cst of 
              {} -> c
              | [s, tail] : cst -> eval([st, cst, s, w], tail)
            esac
          | ARRAY (n) ->
            case take(st, n) of
              [_ : nst, elems] ->
                eval([listArray (elems) : nst, cst, s, w], tail)
            esac
          | SEXP (tag, n) ->
            case take(st, n) of
              [_ : nst, elems] ->
                eval ([Sexp(tag, listArray(elems)) : nst, cst, s, w], tail)
            esac
          | STRING (string) -> eval([string : st, cst, s, w], tail)
          | ELEM -> 
            case st of 
              i : arry : st ->
                case arry of 
                  Sexp(_, arry) -> eval ([arry[i] : st, cst, s, w], tail)
                  | _ -> eval ([arry[i] : st, cst, s, w], tail)
                esac
            esac
          | STA ->
            case st of 
              v : i : arry : st -> 
                case arry of 
                  Sexp(_, arry) -> eval ([(arry[i] := v) : st, cst, s, w], tail)
                  | _ -> eval ([(arry[i] := v) : st, cst, s, w], tail)
                esac
            esac
          | BUILTIN (tag, args) -> 
            case take(st, args) of 
              [st, args] -> 
                case evalBuiltin(tag, args, w) of 
                  [v, w] -> eval([v : st, cst, s, w], tail)
                esac
            esac
        esac
      | {} -> c 
    esac
  }
  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | Arg (i)       -> Arg (i)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip -> [false, env, emptyBuffer ()]
      | Var (x) -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
      | Ref (x) -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
      | Const (n) -> [false, env, singletonBuffer (CONST (n))]
      | String (string) -> [false, env, singletonBuffer (STRING (string))]
      | Ignore (e) ->
        case compile (lab, env, e) of
          [labUsed, env, eCode] ->
            [false, env, eCode <+> label (lab, labUsed) <+ DROP]
        esac
      | Read (x) -> 
        [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
      | Write (exp) ->
        case compile (lab, env, exp) of
          [labused, env, eCode] -> 
            [false, env, eCode <+> label (lab, labused) <+ WRITE]
        esac
      | Assn (x, exp) ->
        case env.genLabels (2) of
          [lab1, lab2, env] ->
            case compile (lab1, env, x) of
              [lab1used, env, xCode] ->
                case compile (lab2, env, exp) of
                  [lab2used, env, expCode] ->
                    [
                      false, env, xCode <+> label (lab1, lab1used) <+>
                      expCode <+> label (lab2, lab2used) <+
                      case x of
                        ElemRef(_, _) -> STA 
                        | _ -> STI 
                      esac
                    ]
                esac
            esac
        esac
      | Seq (exp1, exp2) ->
        case env.genLabel of
          [lab1, env] ->
            case compile (lab1, env, exp1) of
              [lab1used, env, exp1code] ->
                case compile (lab, env, exp2) of
                  [labused, env, exp2code] -> [labused, env, exp1code <+> label (lab1, lab1used) <+> exp2code]
                esac
            esac
        esac
      | Binop (binop, left, right) -> 
        case env.genLabels (2) of
          [lab1, lab2, env] ->
            case compile (lab1, env, left) of
              [lab1Used, env, leftCode] ->
                case compile (lab2, env, right) of
                  [lab2Used, env, rightCode] ->
                    [false, env, leftCode <+> label (lab1, lab1Used) <+> rightCode <+> label (lab2, lab2Used) <+ BINOP (binop)]
                esac          
            esac
        esac
      | If (cond, body1, body2) ->
        case env.genLabels (2) of
          [lab1, lab2, env] ->
            case compile (lab1, env, cond) of
              [lab1used, env, lab1Code] ->
                case compile (lab, env, body1) of
                  [_, env, lab2Code] ->
                    case compile (lab, env, body2) of
                      [_, env, expCode] ->
                        [
                          true, 
                          env, 
                          lab1Code <+> label (lab1, lab1used) <+ 
                            CJMP ("z", lab2) <+> lab2Code <+ JMP (lab) <+> 
                            label (lab2, true) <+> expCode
                        ]
                    esac
                esac
            esac
        esac
      | While (cond, body) ->
        case env.genLabels (2) of
          [lab1, lab2, env] ->
            case compile (lab2, env, cond) of
              [lab2used, env, code1] ->
                case compile (lab1, env, body) of
                  [_, env, code2] ->
                    [
                      true, 
                      env, 
                      label (lab1, true) <+> code1 <+ 
                        CJMP ("z", lab) <+> label (lab2, lab2used) <+> 
                        code2 <+ JMP (lab1)
                    ]
                esac
            esac
        esac
      | DoWhile (body, cond) ->
        case env.genLabels (2) of
          [lab1, lab2, env] ->
            case compile(lab1, env, cond) of
              [lab2Used, env, code2] ->
                case compile(lab2, env, body) of
                  [_, env, bCode] ->
                    [
                      false, 
                      env, 
                      label (lab1, true) <+> bCode <+> 
                        label (lab2, lab2Used) <+> code2 <+
                        CJMP ("nz", lab1)
                    ]
                esac
            esac
        esac
      | Scope (defs, expr) -> 
        case foldl (
          fun ([buf, scope], expr) {
            case expr of
              Var (name) -> [
                if scope.isGlobal
                then
                  foldl (
                    fun (buf, name1) {
                      buf <+ GLOBAL (name1)
                    }, 
                    buf,
                    name
                  )
                else
                  buf
                fi,
                addVars (scope, name)
              ]
              | _ -> [buf, scope]
            esac
          }, [
            emptyBuffer(),
            env.beginScope
          ], defs
        ) of [code1, env] ->
          case foldl (
            fun ([env, functions], expr) {
              case expr of
                Fun (funName, args, body) ->
                  case env.genFunLabel(funName) of
                    [lab, env] -> [
                      addFun (env, funName, lab, args.size),
                      [lab, args, body] : functions
                    ]
                  esac
                | _ -> [env, functions]
              esac
            }, [env, {}], defs
          ) of
            [env, functions] ->
              case foldl (
                fun (env, [l, a, bd]) {
                  rememberFun (env, l, a, bd)
                }, env, functions
              ) of env ->
                case compile (lab, env, expr) of 
                  [used, env, code2] ->
                    [
                      used,
                      env.endScope,
                      code1 <+> code2
                    ]
                esac
              esac
          esac
        esac
      | Call (name, exprs) -> 
          case foldl(
            fun ([env, buff], expr) {
              case compile (lab, env, expr) of
                [labUsed, env, code1] -> [
                  env,
                  buff <+> code1 <+> label (lab, labUsed)
                ]
              esac
            }, [
              env, 
              emptyBuffer ()
            ], exprs
          ) of
            [env, code] -> case lookupFun (env, name) of 
              Fun (name, expr) -> [
                false, 
                env, 
                code <+ case name of
                  Builtin (name) -> BUILTIN (name, expr)
                  | _ -> CALL (name, expr)
                esac
              ]
            esac 
          esac
      | Set (name, expr) -> compile(lab, env, Assn (Ref (name), expr))
      | Array (n) -> 
        case compile(lab, env, foldl(fun (head, tail) { Seq(head, tail) }, Skip, n)) of 
          [labUsed, env, code] ->
            [false, env, singletonBuffer (CONST (size(n))) <+> code <+> label (lab, labUsed) <+ ARRAY (size(n))]
        esac      
      | Sexp (tag, n) ->
        case compile(lab, env, foldl(fun (head, tail) { Seq(head, tail) }, Skip, n)) of 
          [labUsed, env, code] -> 
            [false, env, singletonBuffer (CONST (size(n) + 1)) <+> code <+> label (lab, labUsed) <+ SEXP (tag, size(n))]
        esac   
      | Elem (e, i) ->
        case compile(lab, env, foldl(fun (head, tail) { Seq(head, tail) }, Skip, {e, i})) of
          [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ ELEM]
        esac
      | ElemRef (e, i) -> 
        case compile(lab, env, foldl(fun (head, tail) { Seq(head, tail) }, Skip, {e, i})) of
          [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed)]
        esac
      esac
  }

  case genLabel(initCompEnv().beginScope.addFun ("read", Builtin ("read"), 0).addFun ("write" , Builtin ("write"), 1).addFun ("length", Builtin ("length"), 1)) of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> getBuffer $ singletonBuffer(LABEL("main"))
            <+ BEGIN("main", 0, getLocals(env)) <+> code
            <+> label(endLab, endLabUsed) <+ END 
            <+> case getFuns(env) of 
              [{}, env] -> emptyBuffer ()
              | [functions, env] ->
                foldl (
                  fun ([env, code], function) {
                    case function of 
                      Fun(funName, args, body, state) -> 
                        case genLabel(addArgs (beginFun (env, state), args)) of
                          [funLab, env] ->
                            case compile(funLab, env, body) of
                              [funLabUsed, env, bodyCode] -> 
                                [
                                  env,
                                  code <+ LABEL(funName)
                                    <+ BEGIN(funName, size(args), getLocals(env)) 
                                    <+> bodyCode <+> label(funLab, funLabUsed) <+ END
                                ]
                            esac
                        esac
                    esac
                  }, [env, emptyBuffer ()], functions 
                )[1]
            esac
       esac
  esac
}