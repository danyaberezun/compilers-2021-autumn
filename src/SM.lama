-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  fun applyOperator(op, lhs, rhs) {
    -- printf("Opearator `%s` called on operands %d, %d\n", op, lhs, rhs);
    case op of 
        "+"  -> lhs + rhs
      | "-"  -> lhs - rhs
      | "*"  -> lhs * rhs
      | "/"  -> lhs / rhs
      | "%"  -> lhs % rhs
      | "==" -> lhs == rhs
      | "!=" -> lhs != rhs
      | "<"  -> lhs < rhs
      | "<=" -> lhs <= rhs
      | ">"  -> lhs > rhs
      | ">=" -> lhs >= rhs
      | "&&" -> lhs && rhs
      | "!!" -> lhs !! rhs
    esac    
  }


  fun store([value:tail, state, world], name) {
    [tail, state <- [name, value], world]
  }

  fun load([stack, state, world], name) {
    [state(name):stack, state, world]
  }

  fun read([stack, state, world]) {
    case readWorld(world) of 
      [value, newWorld] ->  [value : stack, state, newWorld]
    esac 
  }

  fun write([value:tail, state, world]) {
    [tail, state, writeWorld(value, world)]
  }

  fun binop([rhs:lhs:tail, state, world], op) {
    [applyOperator(op, lhs, rhs):tail, state, world]
  } 

  fun push([stack, state, world], value) {
    [value : stack, state, world]
  }

  fun step(c@[stack, state, world], insn) {
    case insn of
        READ          -> read(c)
      | WRITE         -> write(c)
      | BINOP (op)    -> binop(c, op)
      | LD    (name)  -> load(c, name)
      | ST    (name)  -> store(c, name)
      | CONST (value) -> push(c, value)
    esac
  } 

  foldl (step, c, insns)

}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
      Var (name) -> {LD(name)}
    | Const (value) -> {CONST(value)} 
    | Binop (op, lhs, rhs) -> compileExpr(lhs) +++ compileExpr(rhs) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
      Assn (name, expr) -> compileExpr(expr) +++ {ST(name)}
    | Seq (first, second) -> compileSM(first) +++  compileSM(second)
    | Skip -> {}
    | Read (name) -> {READ, ST(name)} 
    | Write (expr) -> compileExpr(expr) +++ {WRITE}
  esac
}
