-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("global name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun setArgs ([args, _], values) {
    fun inner (n, vs) {
      case vs of
        v : vs -> args[n] := v; inner (n + 1, vs)
      | _      -> if n != length (args) then failure ("Wrong number of arguments\n") fi
      esac
    }

    inner (0, values)
  }

  fun jmpCompare (c, v) {
    case c of
      "z"  -> v == 0
    | "nz" -> v != 0
    esac
  }

  fun emptyStackError (op) {
    failure ("Not enough values on the stack for %s\n", op)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cst, st, w], insns) {
    case insns of
      {}         -> c
    | ins : tail ->
      case ins of
        READ             -> case readWorld (w) of [n, newW] -> eval ([n : stack, cst, st, newW], tail) esac
      | WRITE            ->
        case stack of
          v : stack -> eval ([stack, cst, st, writeWorld (v, w)], tail)
        | _         -> emptyStackError ("WRITE")
        esac
      | BINOP (op)       ->
        case stack of
          r : l : stack -> eval ([evalOp (op, l, r) : stack, cst, st, w], tail)
        | _             -> emptyStackError ("BINOP")
        esac
      | LD    (x)        -> eval ([lookup (st, x) : stack, cst, st, w], tail)
      | LDA   (x)        -> eval ([x : stack, cst, st, w], tail)
      | ST    (x)        ->
        case stack of
          stack@(v : _) -> assign (st, x, v); eval (c, tail)
        | _             -> emptyStackError ("ST")
        esac
      | STI              ->
        case stack of
          v : x : stack -> assign (st, x, v); eval ([v : stack, cst, st, w], tail)
        | _             -> emptyStackError ("DROP")
        esac
      | CONST  (x)       -> eval ([x : stack, cst, st, w], tail)
      | LABEL  (_)       -> eval (c, tail)
      | JMP    (l)       -> eval (c, fromLabel (env, l))
      | CJMP   (c, l)    ->
        case stack of
          v : stack -> eval ([stack, cst, st, w], if jmpCompare (c, v) then fromLabel (env, l) else tail fi)
        | _         -> emptyStackError ("CJMP")
        esac
      | CALL   (f, n)    -> eval ([stack, [st, tail] : cst, st, w], fromLabel (env, f))
      | BEGIN  (f, a, l) ->
        case makeState (a, l) of
          st -> case take (stack, a) of
            [stack, args] -> setArgs(st, args); eval ([stack, cst, st, w], tail)
          esac
        esac
      | GLOBAL (_)       -> eval (c, tail)
      | END              ->
        case cst of
          [st, tail] : cst -> eval ([stack, cst, st, w], tail)
        | _        -> c
        esac
      | DROP             ->
        case stack of
          _ : stack -> eval ([stack, cst, st, w], tail)
        | _           -> emptyStackError ("DROP")
        esac
      | _                -> failure ("Unknown SM instruction: %s\n", ins.string)
      esac
    esac
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

fun addDefs (env, ds) {
  foldl (fun ([e, vars], d) {
    case d of 
      Var (names)            -> [addVars (e, names), vars +++ names]
    | Fun (name, args, body) -> 
        case genFunLabel (e, name) of
          [lab, e] -> [addFun (e, name, lab, size (args)), vars]
        esac
    | _                      -> failure ("Uknown definition: %s\n", d.string)
    esac
  }, [env, {}], ds)
}

fun rememberFuns (env, ds) {
  foldl (fun (e, d) {
    case d of
      Fun (name, args, body) -> case lookupFun (env, name) of
                                  Fun (fLabel, _) -> rememberFun (e, fLabel, args, body)
                                esac
    | _                      -> e
    esac
  }, env, ds)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (expr) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun wrapScope (expr) {
    case expr of
      Scope (_, _) -> expr
    | _            -> Scope ({}, expr)
    esac
  }

  fun compileFun (fLabel, nargs, env, expr, main) {
    -- compare (env.currentFunction, "main") == 0
    compileFuns (
      case wrapScope (expr) of
        Scope (defs, expr) -> case addDefs (beginScope (env), defs) of
          [env, vars] -> case genLabel (rememberFuns (env, defs)) of
            [lab, env] -> case compile (lab, env, expr) of
              [labUsed, env, code] ->
                [endScope (env), if main then listBuffer (map (fun (v) { GLOBAL (v) }, vars)) else emptyBuffer () fi
                              <+ LABEL (fLabel) <+ BEGIN (fLabel, nargs, getLocals (env)) <+> code <+> label (lab, labUsed) <+ END]
            esac
          esac
        esac
      esac
    )
  }

  fun compileFuns ([env, code]) {
    case getFuns (env) of
      [{},        env] -> [env, code]
    | [functions, env] ->
      compileFuns (
        foldl (fun ([env, code], Fun (fLabel, args, body, state)) {
                 case compileFun (fLabel, size (args), addArgs (beginFun (env, state), args), body, false) of
                   [env, funCode] -> [env, code <+> funCode]
                 esac
               }, [env, code], functions))
    esac
  }

  fun compile (lab, env, expr) {
    case expr of
      Skip                         -> [false, env, emptyBuffer ()]
    | Var     (x)                  -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref     (x)                  -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const   (n)                  -> [false, env, singletonBuffer (CONST (n))]
    | Assn    (x, e)               ->
        case x of
          Ref (x) -> case genLabel (env) of
            [eLab, env] -> case compile (eLab, env, e) of
              [eLabUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eLabUsed) <+ ST (lookupVar (env, x))]
            esac
          esac
        | _       -> case genLabel (env) of
            [xLab, env] -> case genLabel (env) of
              [eLab, env] -> case compile (xLab, env, x) of
                [xLabUsed, env, xCode] -> case compile (eLab, env, e) of
                  [eLabUsed, env, eCode] -> [false, env, xCode <+> label (xLab, xLabUsed)
                                                    <+> eCode <+> label (eLab, eLabUsed) <+ STI]
                esac
              esac
            esac
          esac
        esac
    | Seq     (s1, s2)             ->
        case genLabel (env) of
          [s2Lab, env] -> case compile (s2Lab, env, s1) of
            [s2LabUsed, env, s1Code] -> case compile (lab, env, s2) of
                [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
              esac
            esac
        esac
    | Read    (x)                  -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, x)) <+ DROP]
    | Write   (e)                  ->
        case genLabel (env) of
          [lab, env] -> case compile (lab, env, e) of
            [labUsed, env, exprCode] -> [false, env, exprCode <+> label (lab, labUsed) <+ WRITE]
          esac
        esac
    | If      (cond, tBody, eBody) ->
        case genLabel (env) of
          [jmpLab, env] -> case genLabel (env) of
            [elseLab, env] -> case compile (jmpLab, env, cond) of
              [jmpLabUsed, env, condCode] -> case compile (lab, env, tBody) of
                [_, env, thenCode] ->  case compile (lab, env, eBody) of
                  [_, env, elseCode] ->
                      [true, env, condCode <+> label (jmpLab, jmpLabUsed) <+ CJMP ("z", elseLab) <+> thenCode <+ JMP (lab)
                                                                              <+ LABEL (elseLab) <+> elseCode <+ JMP (lab)]
                esac
              esac
            esac
          esac
        esac
    | While (cond, body)         ->
        case genLabel (env) of
          [startLab, env] -> case genLabel (env) of
            [condLab, env] -> case genLabel (env) of
              [jmpLab, env] -> case compile (condLab, env, body) of
                [condLabUsed, env, bodyCode] -> case compile (jmpLab, env, cond) of
                  [jmpLabUsed, env, condCode] ->
                      [false, env, singletonBuffer (JMP (condLab)) <+ LABEL (startLab) <+> bodyCode
                               <+ LABEL (condLab) <+> condCode <+> label (jmpLab, jmpLabUsed) <+ CJMP ("nz", startLab)]
                esac
              esac
            esac
          esac
        esac
    | DoWhile (body, cond)         ->
        case genLabel (env) of
          [startLab, env] -> case genLabel (env) of
            [condLab, env] -> case genLabel (env) of
              [jmpLab, env] -> case compile (condLab, env, body) of
                [condLabUsed, env, bodyCode] -> case compile (jmpLab, env, cond) of
                  [jmpLabUsed, env, condCode] ->
                      [false, env, singletonBuffer (LABEL (startLab)) <+> bodyCode
                               <+> label (condLab, condLabUsed) <+> condCode <+> label (jmpLab, jmpLabUsed) <+ CJMP ("nz", startLab)]
                esac
              esac
            esac
          esac
        esac
    | Binop   (op, left, right)    ->
        case genLabel (env) of
          [leftLab, env] -> case genLabel (env) of
            [rightLab, env] ->  case compile (leftLab, env, left) of
              [leftLabUsed, env, leftCode] -> case compile (rightLab, env, right) of
                [rightLabUsed, env, rightCode] ->
                    [false, env, leftCode <+> label (leftLab, leftLabUsed) <+> rightCode <+> label (rightLab, rightLabUsed) <+ BINOP (op)]
              esac
            esac
          esac
        esac
    | Call    (name, args)         ->
        case lookupFun (env, name) of
          Fun (fLabel, nargs) -> 
            if nargs == size (args)
            then case foldl (fun ([env, code], arg) {
                              case genLabel (env) of
                                [lab, env] -> case compile (lab, env, arg) of
                                  [labUsed, env, argCode] -> [env, code <+> argCode <+> label (lab, labUsed)]
                                esac
                              esac
                            }, [env, emptyBuffer ()], args) of
                [env, code] -> [false, env, code <+ CALL (fLabel, size (args))]
              esac
            else error (sprintf ("wrong number of arguments for ""%s"", extected %d, found %d", name, nargs, size (args)), getLoc (name))
            fi
        esac
    | Scope   (defs, expr)         ->
        case addDefs (beginScope (env), defs) of
          [env, _] -> case rememberFuns (env, defs) of
            env -> case compile (lab, env, expr) of
              [labUsed, env, code] -> [labUsed, endScope (env), code]
            esac
          esac
        esac
    | Ignore  (e)                  ->
        case genLabel (env) of
          [dropLab, env] -> case compile (dropLab, env, e) of
            [dropLabUsed, env, exprCode] -> [false, env, exprCode <+> label (dropLab, dropLabUsed) <+ DROP]
          esac
        esac
    | _  -> failure ("Unknown expression: %s\n", expr.string)
    esac
  }

  case compileFun ("main", 0, initCompEnv (), expr, true) of
    [_, code] -> getBuffer (code)
  esac
}
