-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
    var state = c.fst, world = c.snd;
    case stmt of
         Assn (x, e) -> [state <- [x, evalExpr(state, e)], world]
       | Seq (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
       | Skip -> c
       | Read (x) ->
           var cc = readWorld (world), z = cc.fst, ww = cc.snd;
           [state <- [x, z], ww]
       | Write (e) -> [state, writeWorld (evalExpr (state, e), world)]
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
