-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval ([s, w], stmt) {
  case stmt of 
    Assn (varname, expr) -> [s <- [varname, evalExpr(s, expr)], w]
  | Seq (s1, s2)         -> eval(eval([s, w], s1), s2)
  | Skip                 -> [s, w]
  | Read (varname)       -> case readWorld(w) of [v, newWorld] -> [s <- [varname, v], newWorld] esac
  | Write (expr)         -> [s, writeWorld(evalExpr(s, expr), w)]
  | If (expr, tru, fls)  -> if evalExpr(s, expr) == 1 then eval([s, w], tru) else eval([s, w], fls) fi
  | While (expr, body)   -> if evalExpr(s, expr) == 1 then eval(eval([s, w], body), stmt) else [s, w] fi
  | DoWhile (body, expr) -> case eval([s, w], body) of [ns, nw] -> if evalExpr(ns, expr) == 1 then eval([ns, nw], stmt) else [ns, nw] fi esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
