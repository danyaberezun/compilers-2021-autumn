-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (cfg@[state, world], stmt) {
  case stmt of
    Assn (string, expr) -> [state <- [string, evalExpr(state, expr)], world]
  | Seq (leftStmt, rightStmt) -> eval(eval(cfg, leftStmt), rightStmt)
  | Skip -> cfg
  | Read (string) ->  case readWorld(world) of [res, newWorld] -> 
    [state <- [string, res], newWorld] esac 
  | Write (expr) -> [state, writeWorld(evalExpr(state, expr), world)]
  | While(expr, innerStmt) -> case evalExpr(state, expr) of
      0 -> cfg
    | _ -> eval(eval(cfg, innerStmt), stmt) esac
  | DoWhile(expr, innerStmt) -> eval(eval(cfg, innerStmt), While(expr, innerStmt))
  | If (expr, thenStmt, elseStmt) -> case evalExpr(state, expr) of 
      0 -> eval(cfg, elseStmt)
    | _ -> eval(cfg, thenStmt) esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
