-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
    Assn (x, e)        -> [state <- [x, evalExpr(state, e)], world]
  | Seq (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
  | Skip               -> c
  | Read (x)           -> var cc = readWorld (world), z = cc.fst, ww = cc.snd;
                          [state <- [x, z], ww]
  | Write (e)          -> [state, writeWorld (evalExpr (state, e), world)]
  | While (e, s)       -> if evalExpr (state, e) != 0 then eval (eval (c, s), While (e, s)) else c fi
  | DoWhile (s, e)     ->
      case eval (c, s) of
        [state0, world0] -> if evalExpr (state0, e) != 0 then eval ([state0, world0], DoWhile (s, e)) else [state0, world0] fi
      esac
  | If (e, s1, s2)     -> if evalExpr (state, e) != 0 then eval (c, s1) else eval (c, s2) fi
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
