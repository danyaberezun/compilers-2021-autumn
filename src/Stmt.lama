-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  -- c = [ state, world ], where state = [ x, val ] (mapping between names and values)
  case stmt of
    Assn (x, expr) -> [c.fst <- [x, evalExpr(c.fst, expr)], c.snd]
  | Seq  (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2)
  | Skip -> c
  | Read (x) ->
    case readWorld(c.snd) of
      [v, w] -> [c.fst <- [x, v], w]
    esac
  | Write (expr) -> [c.fst, writeWorld(evalExpr(c.fst, expr), c.snd)]
  | If (expr, s1, s2) ->
      case evalExpr(c.fst, expr) of
        0 -> eval(c, s2)
      | _ -> eval(c, s1)
      esac
  | While (expr, s) ->
      case evalExpr(c.fst, expr) of
        0 -> [ c.fst, c.snd ]
      | _ -> eval(eval(c, s), stmt)
      esac
  | DoWhile (s, expr) ->
      case eval(c, s) of
        c -> eval(c, While (expr, s))
      esac
  | _ -> failure("Stmt eval not implemented for '%s'\n", stmt.string)
  esac

  -- failure ("Stmt eval not implemented\n")
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  -- printf("Statement: %s, %s\n", compare (input.fst.string, ""), stmt.string);
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
