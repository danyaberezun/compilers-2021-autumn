-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[st, w], stmt) {
  case stmt of
    Assn (name, expr) -> [st <- [name, evalExpr (st, expr)], w]
  | Seq (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2)
  | Skip -> c
  | Read (name) -> case readWorld (w) of [n, newW] -> [st <- [name, n], newW] esac
  | Write (expr) -> [st, writeWorld (evalExpr (st, expr) , w)]
  | If (expr, stmt1, stmt2) -> 
    case evalExpr(st, expr) of
      0 -> eval(c, stmt2)
      | _ -> eval(c, stmt1)
    esac
  | While (expr, body) ->
    case evalExpr(st, expr) of
      0 -> c
      | _ -> eval(eval (c, body), While(expr, body))
    esac
  | DoWhile (body, expr) -> eval (eval (c, body), While (expr, body))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
