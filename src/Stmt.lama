-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of 
    Assn  (name, expr)         -> [state <- [name, evalExpr (state, expr)], world]
  | Seq   (stmt1, stmt2)       -> eval (eval (c, stmt1), stmt2)
  | Skip                       -> c
  | Read  (name)               -> case readWorld (world) of [value, newWorld] -> [state <- [name, value], newWorld] esac
  | Write (expr)               -> [state, writeWorld (evalExpr (state, expr), world)]
  | If    (expr, sThen, sElse) -> if evalExpr (state, expr) then eval (c, sThen) else eval (c, sElse) fi
  | While (expr, sLoop)        -> eval (c, If (expr, Seq (sLoop, stmt), Skip))
  | DoWhile (sLoop, expr)      -> eval (c, Seq (sLoop, While (expr, sLoop)))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
