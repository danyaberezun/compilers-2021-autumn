-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[st, w@[i, o]], stmt) {
  case stmt of
    Assn (v, e) -> [st <- [v, evalExpr(st, e)], w]
  | Seq (st1, st2) -> eval(eval(c, st1), st2)
  | Skip -> c
  | Read (v) -> [st <- [v, hd(i)], [tl(i), o]]
  | Write (expr) -> [st, [i, evalExpr(st, expr):o]]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
