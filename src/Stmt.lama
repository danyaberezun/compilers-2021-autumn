-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case stmt of
    Assn (s, e) ->
      var
        v = evalExpr(c[0], e);
      [updState(s, v, c[0]), c[1]]
  | Seq (s1, s2) -> eval(eval(c, s1), s2)
  | While (e, s) ->
      while evalExpr(c[0], e) do
        c := eval(c, s)
      od;
      c
  | DoWhile (s, e) ->
      do
        c := eval(c, s)
      while evalExpr(c[0], e) od;
      c
  | If (e, t, f) ->
      if evalExpr(c[0], e)
      then eval(c, t)
      else case f of
          Some (f) -> eval(c, f)
        | None     -> c
        esac
      fi
  | Skip -> c
  | Read (s) ->
      var
        rd_nw = readWorld(c[1]);
      [updState(s, rd_nw[0], c[0]), rd_nw[1]]
  | Write (e) ->
      [c[0], writeWorld(evalExpr(c[0], e), c[1])]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
