-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |



fun evalSt (c@[st, world], stmt) {
  case stmt of
    Assn (x, expr) -> [st <- [x, evalExpr(st, expr)], world]
  | Seq (stmt1, stmt2) -> evalSt(evalSt(c, stmt1), stmt2)
  | Skip -> c
  | Read (x) -> (
      var next_world = readWorld(world);
      [st <- [x, next_world.fst], next_world.snd]
    ) 
  | Write (expr) -> [st, writeWorld(evalExpr(st, expr), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  evalSt ([emptyState, createWorld (input)], stmt).snd.getOutput
}