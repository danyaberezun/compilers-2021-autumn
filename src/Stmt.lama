-- Statement evaluator.

import State;
import Expr;
import World;
import List;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval ([st, wd], stmt) {
  -- Do not use dot notation, as it will complicate parsing

  case stmt of
    Skip             -> [st, wd]
  | Assn  (vn, expr) -> [st <- [vn, evalExpr (st, expr)], wd]
  | Read  (vn)       ->
      var read = readWorld (wd);
      [st <- [vn, read[0]], read[1]]
  | Write (expr)     -> [st, writeWorld (evalExpr (st, expr), wd)]
  | Seq   (l, r)     -> foldl (eval, [st, wd], {l, r})
  -- A04
  | If (expr, tstmt, estmt) ->
      if evalExpr (st, expr) != 0
      then eval ([st, wd], tstmt)
      else eval ([st, wd], estmt) fi
  | While (expr, stmt) ->
      if evalExpr (st, expr) != 0
      then foldl (eval, [st, wd], {stmt, While (expr, stmt)})
      else [st, wd] fi
  | DoWhile (stmt, expr) ->
      foldl (eval, [st, wd], {stmt, While (expr, stmt)})
  -- END A04
  | _  -> failure ("Invalid statement: " ++ string(stmt) ++ "\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
