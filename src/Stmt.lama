-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)       |
--        For (init, cond, step, body)

fun eval (config, stmt) {
  case config of [state, world] ->
    case stmt of
      Assn (varName, expr) ->
        [state <- [varName, evalExpr (state, expr)], world]
    | Seq (first, tail) ->
        eval(eval (config, first), tail)
    | Skip ->
        config
    | Read (varName) ->
        case readWorld (world) of [value, newWorld] ->
          [state <- [varName, value], newWorld]
        esac
    | Write (expr) ->
        [state, writeWorld (evalExpr (state, expr), world)]
    | If (cond, thenStmt, elseStmt) -> 
        if evalExpr (state, cond)
          then eval (config, thenStmt)
          else eval (config, elseStmt)
        fi
    | While (cond, body) ->
        var currentConfig = config;
        while evalExpr (currentConfig[0], cond) do
          currentConfig := eval (currentConfig, body)
        od;
        currentConfig
    | DoWhile (body, cond) ->
        var currentConfig = config;
        do
          currentConfig := eval (currentConfig, body)
        while evalExpr (currentConfig[0], cond)
        od;
        currentConfig
    | For (init, cond, step, body) ->
        case eval (config, init) of config ->
          var currentConfig = config;
          while evalExpr (currentConfig[0], cond) do
            currentConfig := eval (currentConfig, Seq (body, step))
          od;
          currentConfig
        esac
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  getOutput (snd (eval ([emptyState, createWorld (input)], stmt)))
}

public fun stmtOrSkip (maybeStmt) {
  case maybeStmt of
    Some (stmt) -> stmt
  | None -> Skip
  esac
}
