-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[st, world], stmt) {
  -- printf("Called eval!\n");
  case stmt of 
    Assn (string, expr) ->
      var exprValue = evalExpr(st, expr);
      [st <- [string, exprValue], world]
    | Seq(stmt1, stmt2) ->
      eval(eval(c, stmt1), stmt2)
    | Skip -> c
    | Read(string) -> case readWorld(world) of
      [readValue, newWorld] ->
        [st <- [string, readValue], newWorld]
      esac
    | Write(expr) ->
      var exprValue = evalExpr(st, expr);
      [st, writeWorld(exprValue, world)]
    | If(cond, body, else_body) -> if evalExpr(st, cond) then eval(c, body) else eval (c, else_body) fi
    | While(cond, body) -> while evalExpr(c[0], cond) do c := eval(c, body) od; c
    | DoWhile(cond, body) -> do c := eval(c, body) while evalExpr(c[0], cond) od; c 
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  -- printf("Called evalStmt!\n");
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
