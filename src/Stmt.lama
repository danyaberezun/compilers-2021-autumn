-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {

  fun applyAssn([st, world], name, expr) {
    [st <- [name, evalExpr(st, expr)], world]
  }

  fun applySeq(c, first, second) {
    var intermediate = eval(c, first);
    eval (intermediate, second)
  }

  fun applyRead([st, world], name) {
    case readWorld(world) of 
      [value, newWorld] ->  [st <- [name, value], newWorld]
    esac 
  }

  fun applyWrite([st, world], expr) {
    [st, writeWorld(evalExpr(st, expr), world)]
  }

  case stmt of 
      Assn (name, expr) -> applyAssn(c, name, expr)
    | Seq (first, second) -> applySeq(c, first, second)
    | Skip -> c 
    | Read (name) -> applyRead(c, name) 
    | Write (expr) -> applyWrite(c, expr)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
