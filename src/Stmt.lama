-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[s, w], stmt) {
  case stmt of
    Assn(string, expression) -> [s <- [string, evalExpr(s, expression)], w]
    | Seq(firstStatement, secondStatement) -> eval(eval(c, firstStatement), secondStatement)
    | Skip -> c
    | Read(string) -> 
      case readWorld(w) of [n, newWorld] -> 
        [s <- [string, n], newWorld] 
      esac
    | Write(expr) -> [s, writeWorld(evalExpr(s, expr) , w)]
    | If (expr, thn, post) ->
      case evalExpr (s, expr) of 
        0 -> eval (c, post)
        | _ -> eval (c, thn)
      esac
    | While (expr, body) ->
      case evalExpr (s, expr) of
        0 -> c
        | _ -> eval (eval (c, body), While (expr, body))
      esac
    | DoWhile (body, expr) -> eval (eval (c, body), While (expr, body))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
