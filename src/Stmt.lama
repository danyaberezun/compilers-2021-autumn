-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

-- lama pair is []
fun eval (c, stmt) {
  case stmt of
    Assn (string, expr) ->
        var newP = [string, evalExpr(c.fst, expr)];
        [c.fst <- newP, c.snd]
  | Seq (st, stR) -> eval(eval(c, st), stR)
  | Skip -> c
  | Write (expr) -> [c.fst, writeWorld(evalExpr(c.fst, expr), c.snd)]
  | Read (expr) ->
--        var outR = readWorld(snd(c));
        var outR = readWorld(c.snd);
        var newC = [expr, outR.fst];
--        printf("%s %s", outR.string, newC.string);
        [c.fst <- newC, outR.snd]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
