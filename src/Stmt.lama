-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval(c@[s, w], stmt) {
  case (stmt) of
    Skip                             -> c
    | Write (expr)                   -> (
      var newWorld = writeWorld(evalExpr(s, expr), w);
      [s, newWorld]
    )
    | Read (string)                  -> (
      var readResult = readWorld(w);
      var value = readResult.fst;
      var newWorld = readResult.snd;
      [s <- [string, value], newWorld]
    )
    | Assn (string, expr)            -> [s <- [string, evalExpr(s, expr)], w]
    | Seq (stmt1, stmt2)             -> eval((eval(c, stmt1)), stmt2)
    | If (condExpr, ifTrue, ifFalse) -> eval(c, if evalExpr(s, condExpr) then ifTrue else ifFalse fi)
    | While(condExpr, stmt)          ->
      var cur = c;
      while evalExpr(cur[0], condExpr) do
        cur := eval(cur, stmt)
      od;
      cur
    | DoWhile(stmt, condExpr)        ->
      var cur = c;
      do
        cur := eval(cur, stmt)
      while evalExpr(cur[0], condExpr) od;
      cur
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, stmt) {
  eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
