-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             | 

fun eval (c@[st, w], stmt) {
  case stmt of
     Assn (x, ex) -> [st <- [x, evalExpr(st, ex)], w]
  |  Seq (fs, sn) -> eval(eval(c, fs), sn)
  |  Skip -> c
  |  Read (s) -> case readWorld(w) of
                    [x, w] -> [st <- [s, x], w]
                 esac
  |  Write (ex) -> [st, writeWorld(evalExpr(st, ex), w)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
