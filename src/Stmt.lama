-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case c of
    [state, world] ->
      case stmt of
          Assn (x, e) -> [state <- [x, evalExpr (state, e)], world]
        | Seq (s1, s2) -> case eval (c, s1) of
            c1 -> eval (c1, s2)
          esac
        | Skip -> [state, world]
        | Read (x) -> case world of
            [v : i, o] -> [state <- [x, v], [i, o]]
          esac
        | Write (e) -> case world of
            [i, o] -> [state, [i, evalExpr (state, e) : o]]
          esac
        | While (e, stmt) -> case evalExpr (state, e) of
              0 -> c
            | _ -> eval (eval (c, stmt), While(e, stmt))  
          esac
        | If (e, s1, s2) -> case evalExpr (state, e) of
              0 -> eval (c, s2)
            | _ -> eval (c, s1)
          esac
        | DoWhile (stmt, e) -> eval (eval (c, stmt), While(e, stmt))
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
