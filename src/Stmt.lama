-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  var st = c[0];
  var w  = c[1];

  case stmt of
  Assn (varName, expr) -> (
    var varValue = evalExpr(st, expr);
    [st <- [varName, varValue], w]
  )

  | Seq (fst, snd) -> eval(eval(c, fst), snd)

  | Skip -> c

  | Read (varName) -> (
    var rw       = readWorld(w);
    var varValue = rw[0];
    var updw     = rw[1];
    [st <- [varName, varValue], updw]
  )

  | Write (expr) -> (
    var exprValue = evalExpr(st, expr);
    [st, writeWorld(exprValue, w)]
  )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
