-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[s, w], stmt) {
  --- var s, w = c;
  (* printf ("stmt: %s\n", stmt.string);
  printf ("eval s: %s\nw: %s\n", s.string, w.string); *)
  case stmt of 
    Assn (x, e)    -> [s <- [x, evalExpr (s, e)], w]
  | Seq (lhs, rhs) -> (
      eval (eval (c, lhs), rhs)
    )
  | Skip           -> c
  | Read (x)       -> (
      var newWorld = readWorld (w);
      (*printf ("value: %s\n", newWorld.fst.string);
      printf ("newWorld: %s\n", newWorld.snd.string);*)
      [s <- [x, newWorld.fst], newWorld.snd]
    ) 
  | Write (e)      -> (
      [s, writeWorld (evalExpr (s, e), w)]
    )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  (*printf ("evalStmt %s %s\n\n", input.string, stmt.string);*) 
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
