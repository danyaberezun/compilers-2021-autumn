-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
    Assn (name, expr) -> [state <- [name, evalExpr (state, expr)], world]
    | Seq (a, b) -> eval (eval (c, a), b)
    | Skip -> c
    | Read (name) ->
        case readWorld (world) of
          [value, new_world] -> [state <- [name, value], new_world]
        esac
    | Write (expr) -> [state, writeWorld (evalExpr (state, expr), world)]
    | While (expr, a) ->
        while
          case c of [state, world] ->
            evalExpr (state, expr)
          esac
          do
            c := eval (c, a)
          od;
        c
    | DoWhile (a, expr) ->
      do
          c := eval (c, a)
        while
          case c of [state, world] ->
            evalExpr (state, expr)
          esac
      od;
      c
    | If (expr, a, b) ->
      if evalExpr (state, expr) then
        eval (c, a)
      else
        eval (c, b)
      fi
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
