-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval(c@[s, w], stmt) {
  case stmt of
      Assn (v, e)       -> [s <- [v, s.evalExpr (e)], w]
    | Seq (l, r)        -> c.eval (l).eval (r)
    | Skip              -> c
    | Read (v)          -> case w.readWorld of [n, w] -> [s <- [v, n], w] esac
    | Write (e)         -> [s, writeWorld (s.evalExpr (e), w)]
    | If (e, s1, s2)    -> if s.evalExpr (e) then c.eval (s1) else c.eval (s2) fi
    | While (e, stmt)   -> while c.fst.evalExpr (e) do c := c.eval (stmt) od; c
    | DoWhile (stmt, e) -> do c := c.eval (stmt) while c.fst.evalExpr (e) od; c
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
