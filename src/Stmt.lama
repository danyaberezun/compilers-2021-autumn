-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval ([st, w], stmt) {
  case stmt of
    Skip -> [st, w]
    | Assn (string, expr) -> [st <- [string, evalExpr(st, expr)], w]
    | Read (string)       -> case readWorld(w) of [n, wnew] -> [st <- [string, n], wnew] esac
    | Write (expr)        -> [st, writeWorld(evalExpr(st, expr), w)]
    | Seq (lStmt, rStmt)  -> eval(eval([st, w], lStmt), rStmt)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
