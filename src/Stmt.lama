-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)


fun eval (c, stmt) {
  case stmt of
    Skip -> c
  | Assn (v, e) -> (
      var res = evalExpr (c.fst, e);
      var ns = c.fst <- [v, res];
      [ns, c.snd]
    )
  | Seq (f, s) -> (
      var res = eval (c, f);
      eval (res, s)
    )
  | Read (v) -> (
      var res = readWorld (c.snd);
      var ns = c.fst <- [v, res.fst];
      [ns, res.snd]
    )
  | Write (e) -> (
      var res = evalExpr (c.fst, e);
      var nw = writeWorld (res, c.snd);
      [c.fst, nw]
    )
  | While (cond, body) -> (
      eval (c, If (cond, Seq (body, stmt), Skip))
    )
  | DoWhile (body, cond) -> (
      eval (c, Seq (body, If (cond, stmt, Skip)))
    )
  | If (cond, th, el) -> (
      var b = evalExpr (c.fst, cond);
      var e = if b then th else el fi;
      eval (c, e)
    )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
