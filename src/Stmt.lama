-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)  

fun eval (c@[s, w], stmt) {
  case stmt of  
      Assn(x, e)          -> [s <- [x, evalExpr(s, e)], w]
    | Seq(stmt1, stmt2)   -> eval(eval([s, w], stmt1), stmt2)
    | Skip                -> [s, w]
    | Read(x)             -> case readWorld(w) of [n, wr] -> [s <- [x, n], wr] esac
    | Write(e)            -> [s, writeWorld(evalExpr(s, e), w)]
    | If(e, stmt1, stmt2) -> if evalExpr(s, e) != 0
                             then eval(c, stmt1)
                             else eval(c, stmt2) fi
    | While(e, stmt1)     -> if evalExpr(s, e) != 0
                             then eval(c, Seq(stmt1, While(e, stmt1)))
                             else c fi
    | DoWhile(stmt1, e)   -> eval(c, Seq(stmt1, While(e, stmt1)))
    esac
  -- failure ("Stmt eval not implemented\n")
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
