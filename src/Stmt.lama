-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "statement" in a configuration "configuration".
-- A configuration is a pair of a state and a world.
-- Returns a final configuration (if any).
fun eval(configuration@[state, world], statement) {
  case statement of
    Skip -> configuration
  | Seq(l, r) -> eval(eval(configuration, l), r)
  | Assn(variableName, expression) -> (
      var valueName = evalExpr(state, expression);
      var newState = state <- [variableName, valueName];
      [newState, world]
    )
  | Read(variableName) -> (
    var currentWorld = readWorld(world);
    var valueName = currentWorld.fst;
    var newWorld = currentWorld.snd;
    [state <- [variableName, valueName], newWorld]
  )
  | Write(expression) -> [state, writeWorld(evalExpr(state, expression), world)]
  | If (condition, thenBody, elseBody) ->
      eval(
        configuration,
        if evalExpr(state, condition)
        then thenBody
        else elseBody
        fi
      )
  | While(condition, body) ->
    var newConfiguration = configuration;
    while evalExpr(newConfiguration[0], condition) do
      newConfiguration := eval(newConfiguration, body)
    od;
    newConfiguration
  | DoWhile(body, condition) ->
    var newConfiguration = configuration;
    do
      newConfiguration := eval(newConfiguration, body)
    while evalExpr(newConfiguration[0], condition) od;
    newConfiguration
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, statement) {
  eval([emptyState, createWorld(input)], statement).snd.getOutput
}
