-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval ([st, world], stmt) {
  case stmt of 
    Assn  (variable, expr)              -> [st <- [variable, evalExpr(st, expr)], world]
  | Seq   (leftSubtree, rightSubtree)   -> eval(eval([st, world], leftSubtree), rightSubtree)
  | Skip                                -> [st, world]
  | Read  (variable)                    ->
      var readResult = readWorld(world); 
      [st <- [variable, readResult.fst], readResult.snd] 
  | Write (expr)                        -> [st, writeWorld(evalExpr(st, expr), world)]  
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
