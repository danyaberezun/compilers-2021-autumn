-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[s, w], stmt) {
  case stmt of 
    Assn (x, e)    -> [s <- [x, evalExpr (s, e)], w]
  | Seq (lhs, rhs) -> eval (eval (c, lhs), rhs)
  | Skip           -> c
  | Read (x)       -> (
      case readWorld (w) of 
        [value, newWorld] -> [s <- [x, value], newWorld]
      esac
    )
  | Write (e)      ->  [s, writeWorld (evalExpr (s, e), w)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
