-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |


fun readStmt ([state, world], name) {
  case readWorld(world) of
    [v, newWorld]-> [state <- [name, v], newWorld]
  esac
}

fun eval ([state, world], stmt) {
  case stmt of
    Assn (name, expr) -> [state <- [name, evalExpr(state, expr)], world]   |
    Seq  (a, b) -> eval(eval([state, world], a), b)                 |
    Skip -> [state, world]                                          |
    Read (s) -> readStmt([state, world], s)                         |
    Write (expr) -> [state, writeWorld(evalExpr(state, expr), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
