-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of 
      Skip             -> c
    | Assn (v, expr) -> [c.fst <- [v, evalExpr(c.fst, expr)], c.snd]
    | Write (expr)     -> case c of [st, rw] -> [st, writeWorld(evalExpr(st, expr), rw)] esac
    | Read (v)       -> 
      case c of [st, rw] -> 
        case readWorld(rw) of [va, nrw] ->
          [st <- [v, va], nrw]
        esac
      esac
    | Seq (l, r) -> 
      ( 
        var c1;
        c1 := eval (c, l);
        eval (c1, r)
      ) 
  esac
  -- failure ("Stmt eval not implemented\n")
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}