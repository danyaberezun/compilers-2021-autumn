-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval(cond@[st, world], stmt) {
  case stmt of
      Skip              -> cond
    | Assn(ident, expr) -> [st <- [ident, evalExpr(st, expr)], world]
    | Read(ident)       -> (
      var readRes = readWorld(world);
      [st <- [ident, readRes.fst], readRes.snd]
    )
    | Write(expr)       -> [st, writeWorld(evalExpr(st, expr), world)]
    | Seq(stmt1, stmt2) -> eval(eval(cond, stmt1), stmt2)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, stmt) {
  eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
