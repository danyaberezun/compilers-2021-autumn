-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[st, w], stmt) {
  case stmt of
    Assn (v, e) -> [st <- [v, evalExpr (st, e)], w]
  | Seq (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
  | Skip -> c
  | Read (v) -> [st <- [v, readWorld (w).fst], readWorld (w).snd]
  | Write (e) -> [st, writeWorld (evalExpr (st, e), w)]
  | If (p, pb, nb) -> if evalExpr (st, p) != 0 then eval (c, pb) else eval (c, nb) fi
  | While (p, b) -> if evalExpr (st, p) == 0 then c else eval (eval (c, b), While (p, b)) fi
  | DoWhile (b, p) -> eval (eval (c, b), While (p, b))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
