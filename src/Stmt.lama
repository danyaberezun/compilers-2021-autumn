-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case stmt of
    Assn (x, expr) -> 
      (var r = evalExpr (c.fst, expr);
      [c.fst <- [x, r], c.snd]
      )
  | Seq (stmt1, stmt2) ->
      eval (eval (c, stmt1), stmt2)
  | Skip -> c
  | Read (x) ->
      (var y = readWorld (c.snd);
      [c.fst <- [x, y.fst], y.snd]
      )
  | Write (expr) ->
      (var x = evalExpr (c.fst, expr);
      [c.fst, writeWorld (x, c.snd)]
      )
  | If (expr, stmt1, stmt2) ->
      var cond = evalExpr (c.fst, expr);
      if cond then eval (c, stmt1) else eval (c, stmt2) fi
  | While (expr, stmt1) ->
      var conf = c;
      while evalExpr (conf.fst, expr) do conf := eval (conf, stmt1) od;
      conf
  | DoWhile (stmt1, expr) ->
      var conf = eval (c, stmt1);
      while evalExpr (conf.fst, expr) do conf := eval (conf, stmt1) od;
      conf
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
