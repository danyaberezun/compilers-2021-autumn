-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a2 configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[st, world], stmt) {
  case stmt of
      Assn (name, expr) -> [st <- [name, evalExpr(st, expr)], world]
    | Seq (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2)
    | Skip -> c
    | Read (variable) -> case readWorld(world) of
      [n, newWorld] ->  [st <- [variable, n], newWorld]
    esac
    | Write (expr) -> [st, writeWorld(evalExpr(st, expr), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}