-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

-- fun evalRead(c@[n, arg], str) {
--   [arg.fst <- [str, n], arg.snd] 
-- }

fun eval (c@[stack, world], stmt) {
  case stmt of 
      Skip -> c
    | Assn (x, expr) -> [stack <- [x, evalExpr(stack, expr)], world]
    | Seq (stmt1, stmt2) -> eval (eval(c, stmt1), stmt2)
    | Read (x) -> case readWorld(world) of
        [n, w] -> [stack <- [x, n], w]
      esac
    | Write (expr)       -> [stack, writeWorld(evalExpr(stack, expr), world)]
    | _                  -> failure("No statement")
    esac 
}


-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
