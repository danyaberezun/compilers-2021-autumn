-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "statement" in a configuration "configuration".
-- A configuration is a pair of a state and a world.
-- Returns a final configuration (if any).
fun eval(configuration, statement) {
  var state = configuration.fst;
  var world = configuration.snd;

  case statement of
    Skip -> configuration
  | Seq(l, r) -> eval(eval(configuration, l), r)
  | Assn(variableName, expression) -> (
      var valueName = evalExpr(state, expression);
      var newState = state <- [variableName, valueName];
      [newState, world]
    )
  | Read(variableName) -> (
    var currentWorld = readWorld(world);
    var valueName = currentWorld.fst;
    var newWorld = currentWorld.snd;
    [state <- [variableName, valueName], newWorld]
  )
  | Write(expression) -> [state, writeWorld(evalExpr(state, expression), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, statement) {
  eval ([emptyState, createWorld(input)], statement).snd.getOutput
}
