-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[st, world], stmt) {
	case stmt of 
		Assn (varName, expr) -> [st <- [varName, evalExpr(st, expr)], world]
		| Seq (s1, s2) -> eval (eval (c, s1), s2)
		| Skip -> c
		| Read (varName) -> case readWorld (world) of 
			[n, newWorld] -> [st <- [varName, n], newWorld]
		esac
		| Write (expr) -> [st, writeWorld (evalExpr (st, expr), world)]
	esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
