-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)


fun eval (c @ [st, w], stmt) {
  case stmt of 
    Assn  (s, e)     -> [st <- [s, evalExpr(st, e)], w]
  | Seq   (st1, st2) -> eval (eval (c, st1), st2)
  | Skip             -> c
  | Read  (s)        -> 
      case readWorld(w) of
        [n, w2] -> [st <- [s, n], w2]
      esac
  | Write (e)        -> [st, writeWorld(evalExpr(st, e), w)]
  | If (e, s1, s2)   -> 
      case evalExpr(st, e) of
        1 -> eval (c, s1) |
        0 -> eval (c, s2) |
        _ -> failure("Unexcepted expression in IF statement\nValue must be 0 or 1")
      esac
  | While(e, body)   -> 
      case evalExpr(st, e) of
        1 -> eval(eval(c, body), stmt)
        0 -> c
        _ -> failure("Unexcepted expression in WHILE statement\nValue must be 0 or 1")
      esac
  | DoWhile(body, e) -> eval(eval(c, body), While(e, body))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}