-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval ([s, w], stmt) {
  case stmt of
    Assn (v, e) -> [s <- [v, s.evalExpr(e)], w]
  | Seq (l, r) -> eval (eval ([s, w], l), r)
  | Skip -> [s, w]
  | Read (v) -> (
    var read = w.readWorld;
    [s <- [v, read.fst], read.snd]
  )
  | Write (e) -> [s, writeWorld (s.evalExpr(e), w)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
