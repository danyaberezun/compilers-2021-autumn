-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun doWhile(stt, cond, c@[state, _]) {
   var condR = evalExpr(state, cond);
   if condR
   then doWhile(stt, cond, eval(c, stt) )
   else c
   fi
}

-- lama pair is []
fun eval (c@[state, world], stmt) {
  case stmt of
    Write (expr) -> [state, writeWorld(evalExpr(state, expr), world) ]
  | Read (expr) ->
          var outR = readWorld(world);
          var newC = [expr, outR.fst];
  --        printf("%s %s", outR.string, newC.string);
          [state <- newC, outR.snd]
  | Assn (string, expr) ->
        var newP = [string, evalExpr(state, expr)];
        [state <- newP, world]
  | Seq (st, stR) -> eval(eval(c, st), stR)
  | Skip -> c
  | If (cond, tb, fb) -> (
    -- well, I've used if
     var condR = evalExpr(state, cond);
     if condR
     then eval(c, tb)
     else eval(c, fb)
     fi
  )
  | While (cond, stt) -> (
      var condR = evalExpr(state, cond);
      if condR
      then eval(eval(c, stt), stmt)
      else c
      fi
  )
  | DoWhile (stt, expr) -> doWhile(stt, expr, eval(c, stt) )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
