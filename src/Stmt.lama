-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "st" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- istmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)        |
--        Skip                       |
--        Read   (string)            |
--        Write  (expr)              |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[st, w], stmt) {
  case stmt of
    Skip         -> c
  | Write (e)    -> [st, writeWorld (evalExpr (st, e), w)]
  | Read (x)     ->
      case readWorld (w) of
        [v, new_w] -> [st <- [x, v], new_w]
      esac
  | Seq (s1, s2) -> eval (eval (c, s1), s2)
  | Assn (x, e)  -> [st <- [x, evalExpr (st, e)], w]
  | If (e, s1, s2) -> if evalExpr (st, e) == 0 then eval (c, s2) else eval (c, s1) fi
  | While (e, s) -> if evalExpr (st, e) == 0 then c else eval (eval (c, s), While (e, s)) fi
  | DoWhile (s, e) -> eval (eval (c, s), While (e, s))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
