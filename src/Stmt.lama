-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case c of 
    [s, w] -> case stmt of
      Assn(x, expr) -> [s <- [x, evalExpr(s, expr)], w]
    | Seq(l, r)     -> eval(eval([s, w], l), r)
    | Skip          -> [s, w]
    | Read(x)       -> case readWorld(w) of
                          [v, new_w] -> [s <- [x, v], new_w]
                        esac
    | Write(expr)   -> [s, writeWorld(evalExpr(s, expr), w)]
    | If(expr, stmt1, stmt2) -> 
        if evalExpr(s, expr) then
          eval(c, stmt1)
        else 
          eval(c, stmt2)
        fi
    | While(expr, stmt1) -> 
      if evalExpr(s, expr) then
        eval(eval(c, stmt1), While(expr, stmt1))
      else 
        c
      fi
    | DoWhile(stmt1, expr) -> eval(eval(c, stmt1), While(expr, stmt1))
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
