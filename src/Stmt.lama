-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
    Assn(name, expr) ->
      case c of
        [st, w] -> [st <- [name, evalExpr(st, expr)], w]
      esac                                                | 
    Seq(l, r)   -> eval(eval(c, l), r)                    |
    Skip        -> c                                      |
    Read (name) ->
      case c of
        [st, w] ->
          case readWorld(w) of
            [rSt, rw] -> [st <- [name, rSt], rw]
          esac
      esac                                                |
    Write (expr) ->
      case c of
        [st, w] -> [st, writeWorld(evalExpr(st, expr), w)] 
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}