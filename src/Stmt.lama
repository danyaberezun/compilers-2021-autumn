-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval ([state, world], stmt) {
  var cfg = [state, world];
  case stmt of
    Assn (varName, expr) -> [state <- [varName, evalExpr(state, expr)], world]
  | Seq (leftStmt, rightStmt) -> eval(eval(cfg, leftStmt), rightStmt)
  | Skip -> cfg

  | Read (varName) -> case readWorld(world) of 
      [value, world] -> [state <- [varName, value], world] 
    | _ -> failure("Error in evalStmt: cant read from world") esac 

  | Write (expr) -> [state, writeWorld(evalExpr(state, expr), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
