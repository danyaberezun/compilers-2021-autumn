-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case c of
    [st, world] -> case stmt of 
      Assn (name, expr) -> [st <- [name, evalExpr (st, expr)], world]
    | Seq (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
    | Skip -> c
    | Read (s) -> case (world.readWorld) of 
        [value, new_world] -> [(st <- [s, value]), new_world]
      esac
    | Write (expr) -> [st, writeWorld (evalExpr (st, expr), world)]
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
