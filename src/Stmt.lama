-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  var state = c.fst;
  var world = c.snd;
  case stmt of
    Assn (s, e)     -> [state <- [s, evalExpr (state, e)], world]
  | Seq (st1, st2)  -> eval (eval (c, st1), st2)
  | Skip            -> c
  | Read (s)        -> (
			var readResult = readWorld (world);
			[state <- [s, readResult.fst], readResult.snd]
		)
  | Write (e)       -> [state, writeWorld (evalExpr (state, e), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
