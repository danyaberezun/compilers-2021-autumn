-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c @ [state, world], stmt) {
  case stmt of
    Assn (v, e) -> [state <- [v, evalExpr(state, e)], world]               |
    Seq  (a, b) -> eval(eval(c, a), b)                                     |
    Skip        -> c                                                       |
    Read (v   ) -> fun([x, w]) { [state <- [v,x], w] } (readWorld(world))  |
    Write(e   ) -> [state, writeWorld(evalExpr(state, e),world)]           |
    If (e, s1, s2) -> case evalExpr(state, e) of
                        0 -> eval(c, s2) |
                        _ -> eval(c, s1)
                      esac                                                 |
    While (e, s) -> case evalExpr(state, e) of
                      0 -> c                        |
                      _ -> eval(eval(c, s), stmt)
                    esac                                                   |
    DoWhile (s, e) -> fun(nc @ [nstate, nworld]) {
                        case evalExpr(nstate, e) of
                          0 -> [nstate, nworld]     |
                          _ -> eval(nc, stmt)
                        esac
                      } (eval(c, s))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}