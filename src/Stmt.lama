-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval ([state, world], stmt) {
  case stmt of
      Assn (varName, expr) -> [state <- [varName, evalExpr (state, expr)], world]
    | Seq (l, r) -> case eval ([state, world], l) of 
	    [state1, world1] -> eval([state1, world1], r)
	  esac
	| Skip -> [state, world]
	| Read (varName) -> case readWorld (world) of
	    [value, world2] -> [state <- [varName, value], world2]
	  esac
	| Write (expr) -> [state, writeWorld (evalExpr (state, expr), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
