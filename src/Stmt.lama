-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)
fun eval (c@[state, world], stmt) {
   case stmt of
     Skip                -> c
   | Seq(stmt, rest)     -> eval(eval(c, stmt), rest)
   | Assn(name, expr)    -> [state <- [name, evalExpr(state, expr)], world]
   | Read(name)          -> (var res = readWorld(world); [state <- [name, res[0]], res[1]])
   | Write(expr)         -> [state, writeWorld(evalExpr(state, expr), world)]
   | If(cond, th, br)    -> if evalExpr(state, cond) != 0 then eval(c, th) else eval(c, br) fi
   | While(cond, body)   -> if evalExpr(state, cond) != 0 then eval(c, DoWhile(body, cond)) else c fi
   | DoWhile(body, cond) -> eval(eval(c, body), While(cond, body))
   esac
}
-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}