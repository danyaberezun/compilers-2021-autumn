-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval ([st, world], stmt) {
  case stmt of
    Assn  (v, e) -> [st <- [v, evalExpr (st, e)], world]
  | Seq   (l, r) -> eval (eval ([st, world], l), r)
  | Skip         -> [st, world]
  | Read  (v)    ->
    case readWorld (world) of
      [value, nextWorld] -> [st <- [v, value], nextWorld]
    esac
  | Write (e)    -> [st, writeWorld (evalExpr (st, e), world)]
  | If      (expr, st1, st2) -> eval ([st, world], if evalExpr (st, expr) then st1 else st2 fi)
  | While   (cond, body)     -> if evalExpr (st, cond) then eval (eval ([st, world], body), While (cond, body)) else [st, world] fi
  | DoWhile (body, cond)     -> eval (eval ([st, world], body), While (cond, body))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
