-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[state, world], stmt) {
  case stmt of 
    Assn (variable, expression) -> [state <- [variable, evalExpr(state, expression)], world]
  | Seq (leftStmt, rightStmt) -> eval(eval(c, leftStmt), rightStmt)
  | Skip -> c
  | Read (variable) -> case readWorld(world) of [value, updatedWorld] -> [state <- [variable, value], updatedWorld] esac
  | Write (expression) -> [state, writeWorld(evalExpr(state, expression), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
