-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval ([states, world], stmt) {
  case stmt of
    Skip -> [states, world]
  | Read (x) -> case readWorld(world) of
                  [value, new_world] -> [states <- [x,  value], new_world]
                esac
  | Seq (l, r) -> eval (eval ([states, world], l), r)
  | Assn (x, e) -> [states <- [x, evalExpr(states, e)], world]
  | Write (expr) -> [states, writeWorld(evalExpr (states, expr), world) ]
  | While (e, s) ->
  if evalExpr(states, e) then
    eval (eval ([states, world], s), While(e, s))
  else [states, world]
    fi
  | If (e, s1, s2) ->
  if evalExpr(states, e) then
    eval ([states, world], s1)
  else
    eval ([states, world], s2)
  fi
  | DoWhile (s, e) -> eval(eval([states, world], s), While(e, s))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
