-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[st, w], stmt) {
  case stmt of
    Skip        -> c
  | Assn (v, e) -> [st <- [v, evalExpr (st, e)], w]
  | Read (v)    ->
      case readWorld (w) of [x, nw] -> [st <- [v, x], nw] esac
  | Write (e)   -> [st, writeWorld (evalExpr (st, e), w)]
  | Seq (f, s)  -> eval (eval (c, f), s)
  | If (cond, t, f) ->
      if evalExpr (st, cond) then eval (c, t) else eval (c, f) fi
  | While (cond, b) ->
      while case c of [st, _] -> evalExpr (st, cond) esac do
         c := eval (c, b)
      od;
      c
  | DoWhile (b, cond) ->
      do
        c := eval (c, b)
      while case c of [st, _] -> evalExpr (st, cond) esac od;
      c
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
