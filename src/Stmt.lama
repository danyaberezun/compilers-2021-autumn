-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun ok() {
  printf("here!")
}

fun eval (c@[st, world], stmt) {
  -- printf("Called eval on %s!\n", world.fst.string());
  case stmt of 
    Assn (string, expr) ->
      -- printf("Ass%d\n", 5);
      var exprValue = evalExpr(st, expr);
      -- printf("Assn to %s\n", string);     
      [st <- [string, exprValue], world]
    | Seq(stmt1, stmt2) ->
      -- printf("Seq to %s\n", string);
      eval(eval(c, stmt1), stmt2)
    | Skip -> c
    | Read(string) -> case readWorld(world) of
      [readValue, newWorld] ->
        -- printf("Read %d into %s!\n", readValue, string);
        [st <- [string, readValue], newWorld]
      esac
    | Write(expr) ->
      var exprValue = evalExpr(st, expr);
      [st, writeWorld(exprValue, world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
