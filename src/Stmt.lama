-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval ([state, world], stmt) {
  case stmt of
    Assn (x, expr) -> [state <- [x, evalExpr (state, expr)], world]
  | Skip           -> [state, world]
  | Read (x)       ->
    (var rvl = readWorld (world);
     [state <- [x, rvl.fst], rvl.snd])
  | Write (expr)   -> [state, writeWorld (evalExpr (state, expr), world)]
  | Seq (lhs, rhs) -> eval (eval ([state, world], lhs), rhs)
  | If (e, t, f)   ->
    if evalExpr (state, e)
    then eval ([state, world], t)
    else eval ([state, world], f)
    fi
  | While (e, s)   ->
    if evalExpr (state, e)
    then eval (eval ([state, world], s), While (e, s))
    else [state, world]
    fi
  | DoWhile (s, e) ->
    eval (eval ([state, world], s), While (e, s))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
