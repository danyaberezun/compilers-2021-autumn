-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
    Assn (val_name, ex)   -> 
      case c of
        [st, w] -> [st <- [val_name, evalExpr(st, ex)], w]
      esac
  | Seq (stmt1, stmt2)  -> eval(eval(c, stmt1), stmt2)
  | Skip                -> c
  | Read (name)         -> 
      case c of
        [st, [v : pi, o]] -> [st <- [name, v], [pi, o]]
      esac
  | Write (ex)        -> 
      case c of
        [st, [i, o]] -> [st, [i, evalExpr(st, ex) : o]]
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
