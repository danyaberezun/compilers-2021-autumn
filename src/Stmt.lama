-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[st, w], stmt) {
  case stmt of
      Assn (v, e) -> [st <- [v, evalExpr(st, e)], w]
    | Skip -> c
    | Seq (st1, st2) -> eval(eval(c, st1), st2)
    | Read (v) -> (
        var new_world = readWorld(w);
        [st <- [v, new_world.fst], new_world.snd]
      )
    | Write (e) ->  [st,  writeWorld(evalExpr(st, e), w)]
    | While (e, stmt) -> eval (c, If(e, Seq(stmt, While(e, stmt)), Skip))
    | DoWhile (stmt, expr) -> eval(eval(c, stmt), While(expr, stmt))
    | If (expr, st1, st2) -> if evalExpr(st, expr) then eval(c, st1) else eval(c, st2) fi
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}