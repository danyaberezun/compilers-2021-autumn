-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  var state = c.fst;
  var world = c.snd;

  case stmt of
      Assn (vr, e) -> [state <- [vr, evalExpr(state, e)], world]
    | Skip -> c
    | Seq (s1, s2) -> eval(eval(c, s1), s2)
    | Read (s) -> (
      var new_world = readWorld(world);
      var new_value = new_world.fst;
      [state <- [s, new_value], new_world.snd]
    )
    | Write (e) -> [state, writeWorld(evalExpr(state, e), world)]
    | If(e, s1, s2) -> (
      case evalExpr(state, e) of
          1 -> eval(c, s1)
        | 0 -> eval(c, s2)
        | _ -> failure("result of expression in if must be 1 or 0")
      esac
    )
    | While(e, s) -> (
      case evalExpr(state, e) of
          1 -> (
            eval(eval(c, s), stmt)
          )
        | 0 -> c
        | _ -> failure("result of expression in while must be 1 or 0")
      esac
    )
    | DoWhile(e, s) -> (
      case eval(c, s) of
        c -> eval(c, While(e, s))
      esac
    )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}