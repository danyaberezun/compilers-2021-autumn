-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[s, w], stmt) {
    case stmt of 
    Assn (x, e) -> 
        [s <- [x, evalExpr(s, e)], w]
    | Seq (s1, s2) -> 
        eval(eval(c, s1), s2)
    | Skip -> 
        c
    | Read (v) ->
        case readWorld(w) of
            [n, w] -> [s <- [v, n], w]
        esac
    | Write (e) ->
        [s, writeWorld(evalExpr(s, e), w)]
    | If (action, bef, post) ->
      case evalExpr (s, action) of 
        0 -> eval (c, post)
        | _ -> eval (c, bef)
      esac
    | While (action, body) ->
      case evalExpr (s, action) of
        0 -> c
        | _ -> eval (eval (c, body), While (action, body))
      esac
    | DoWhile (body, action) -> eval (eval (c, body), While (action, body))
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
