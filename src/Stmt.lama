-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[s, w], stmt) {
    case stmt of
      Skip                 -> c
    | Assn  (x, e)         -> [s <- [x, evalExpr (s, e)], w]

    | Read  (x)            -> var readed = readWorld (w);
                              [s <- [x, readed.fst], readed.snd]

    | Write (e)            -> [s, writeWorld (evalExpr (s, e), w)]
    | Seq   (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)

    | wh@(While (expr, stmt)) ->
        if evalExpr (s, expr) != 0
        then eval (eval (c, stmt), wh)
        else c
        fi
    | If (expr, stmt1, stmt2) ->
        if evalExpr (s, expr) != 0
        then eval (c, stmt1)
        else eval (c, stmt2)
        fi
    | DoWhile (stmt, expr) -> eval (eval (c, stmt), While (expr, stmt))
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
