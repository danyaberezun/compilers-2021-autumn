-- X86 codegeneration interface
-- We use stack machine programs as intermediate representation
import Fun;
import SM;
import Collection;
import List;
import Manifest;
import Buffer;

-- Assembler language interface
-- The registers: 
var regs = ["%ebx", "%ecx", "%esi", "%edi", "%eax", "%edx", "%ebp", "%esp"];

-- We can not freely operate with all register; only with 4 by now
var nRegs = regs.length - 5;

-- For convenience we define the following synonyms for the registers: 
var ebx = R (0),
    ecx = R (1),
    esi = R (2),
    edi = R (3),
    eax = R (4),
    edx = R (5),
    ebp = R (6),
    esp = R (7);

-- We need to know the word size to calculate offsets correctly
var wordSize = 4;

-- We need to distinguish the following operand types: 
--    R (int)       -- hard register                    
--    S (int)       -- a position on the hardware stack 
--    M (string)    -- a named memory location          
--    L (int)       -- an immediate operand
--    I (int, opnd) -- an indirect operand with offset

-- Some x86 instruction (we do not need all of them):
--   Mov   (opnd, opnd)         -- copies a value from the first to the second operand  
--   Lea   (opnd, opnd)         -- loads an address of the first operand into the second
--   Binop (string, opnd, opnd) -- makes a binary operation; note, the first operand   
--                                 designates x86 operator, not the source language one
--   IDiv  (opnd)               -- x86 integer division, see instruction set reference 
--   Cltd                       -- see instruction set reference           
--   Set   (string, string)     -- sets a value from flags; the first operand is the   
--                                 suffix, which determines the value being set, the
--                                 the second --- (sub)register name
--   Jmp   (string)             -- unconditional jump to a label
--   CJmp  (string, string)     -- conditional jump to a label
--   Label (string)             -- a label
--   Push  (opnd)               -- pushes the operand on the hardware stack
--   Pop   (opnd)               -- pops from the hardware stack to the operand
--   Call  (string)             -- calls a function by its name 
--   Ret                        -- returns from a function
--   Meta  (string)             -- metainformation (declarations, etc.)
--
--   Dec   (opnd)               -- arithmetic correction: decrement  
--   Or1   (opnd)               -- arithmetic correction: or 0x0001                     
--   Sal1  (opnd)               -- arithmetic correction: shl 1           
--   Sar1  (opnd)               -- arithmetic correction: shr 1

-- Machine instruction printer
fun insnString (insn) {
  
  fun binopString (op) {
    case op of
      "+"   -> "addl"
    | "-"   -> "subl"
    | "*"   -> "imull"
    | "&&"  -> "andl"
    | "!!"  -> "orl" 
    | "^"   -> "xorl"
    | "cmp" -> "cmpl"
    esac
  }

  fun opndString (opnd) {
    case opnd of
      R (i)    -> regs [i]
    | S (i)    ->  if i >= 0
                   then sprintf ("-%d(%%ebp)", (i+1) * wordSize)
                   else sprintf ("%d(%%ebp)", 8 + (-1-i) * wordSize)
                   fi

    | M (x)    -> x
    | L (i)    -> sprintf ("$%d", i)
    | I (0, x) -> sprintf ("(%s)", opndString (x))
    | I (n, x) -> sprintf ("%d(%s)", n, opndString (x))
    esac
  }

  case insn of
    Cltd               -> "\tcltd\n"
  | Set   (suf, s)     -> sprintf ("\tset%s\t%s\n", suf, s)
  | IDiv  (s1)         -> sprintf ("\tidivl\t%s\n", opndString (s1))
  | Binop (op, s1, s2) -> sprintf ("\t%s\t%s,\t%s\n", binopString (op), opndString (s1), opndString (s2))
  | Lea   (s1, s2)     -> sprintf ("\tleal\t%s,\t%s\n", opndString (s1), opndString (s2))
  | Mov   (s1, s2)     -> sprintf ("\tmovl\t%s,\t%s\n", opndString (s1), opndString (s2))
  | Push  (s)          -> sprintf ("\tpushl\t%s\n", opndString (s))
  | Pop   (s)          -> sprintf ("\tpopl\t%s\n", opndString (s))
  | Ret                -> "\tret\n"
  | Call  (p)          -> sprintf ("\tcall\t%s\n", p)
  | Label (l)          -> sprintf ("%s:\n", l)
  | Jmp   (l)          -> sprintf ("\tjmp\t%s\n", l)
  | CJmp  (c, l)       -> sprintf ("\tj%s\t%s\n", c, l)
  | Meta  (m)          -> m
  | Dec   (s)          -> sprintf ("\tdecl\t%s\n", opndString (s))
  | Or1   (s)          -> sprintf ("\torl\t$0x0001,\t%s\n", opndString (s))
  | Sal1  (s)          -> sprintf ("\tsall\t%s\n", opndString (s))
  | Sar1  (s)          -> sprintf ("\tsarl\t%s\n", opndString (s))  
  esac
}

-- Environment for symbolic interpreter
-- An environment holds
--    a symbolic stack
--    a maximal stack depth reached so far
--    a set of global variable names
--    a barrier condition (set up right after an unconditional jump is interpreter)
--    a stack map which maps labels to symbolic stacks

fun makeEnv (stack, stackSlots, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals) {
  -- Returns an internal name for a global variable
  fun globalName (name) {
    "global_" ++ name
  }

  -- Returns a string representation of the environment
  fun envString () {
    sprintf ("Stack     : %s\nStackSlots: %d\nGlobals   : %s\n", stack.string, stackSlots, elements (globals).string)
  }
  
  -- Allocates a new position on the symbolic stack;
  -- returns a pair: a location for allocated item and
  -- an updated environment
  fun allocate () {
    case 
      case stack of
        {}        -> [ebx, 0]
      | S (n) : _ -> [S (n+1), n+2]
      | R (n) : _ -> if n < nRegs then [R (n+1), stackSlots] else [S (nLocals), nLocals + 1] fi
      | _         -> [S (nLocals), nLocals + 1]
      esac
    of [x, n] -> [x, makeEnv (x : stack, if n > stackSlots then n else stackSlots fi, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals)]esac
  }

  -- Pushes an item on the symbolic state; returns an updated envirtonment
  fun push (y) {
    makeEnv (y : stack, stackSlots, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals)
  }

  -- Pops one item from the symbolic stack; returns a pair: a popped
  -- item and an updated environment
  fun pop () {
    case stack of
      x : stack -> [x, makeEnv (stack, stackSlots, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals)]
    esac
  }

  -- Pops two items from the symbolic stack; returns a triple:
  -- popped items and an undated environment
  fun pop2 () {
    case stack of
      x : y : stack -> [x, y, makeEnv (stack, stackSlots, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals)]
    esac
  }

  -- Peeks the top of the symbolic stack
  fun peek () {
    stack.fst
  }
  
  -- Adds a global variable; returns an updated environment
  fun addGlobal (name) {
    makeEnv (stack, stackSlots, addSet (globals, globalName (name)), strings, stringIndex, barrier, stackMap, fLabel, nLocals)
  }

  -- References an allocation
  fun loc (alloc) {
    case alloc of
      Glb (x) -> M (globalName (x))
    | Arg (i) -> S (-1-i)
    | Loc (i) -> S (i)
    esac
  }
  
  -- Gets a list of global variables from the environment
  fun getGlobals () {
    globals.elements
  }

  -- Gets a maximal stack size from the environment
  fun getStackSize () {
    stackSlots
  }

  -- Gets barrier condition
  fun isBarrier () {
    barrier
  }

  -- Sets barrier condition
  fun setBarrier () {
    makeEnv (stack, stackSlots, globals, strings, stringIndex, true, stackMap, fLabel, nLocals)
  }

  -- Associates the current symbolic state with a label
  fun setStack (l) {
    makeEnv (stack, stackSlots, globals, strings, stringIndex, false, case findMap(stackMap, l) of None -> addMap (stackMap, l, stack) | _ -> stackMap esac, fLabel, nLocals)
  }

  -- Retrieves a stack for a label
  fun retrieveStack (l) {
    case findMap (stackMap, l) of
      None         -> makeEnv (stack, stackSlots, globals, strings, stringIndex, false, stackMap, fLabel, nLocals)
    | Some (stack) -> makeEnv (stack, stackSlots, globals, strings, stringIndex, false, stackMap, fLabel, nLocals)
    esac
  }

  -- Drops a barrier
  fun dropBarrier () {
    makeEnv (stack, stackSlots, globals, strings, stringIndex, false, stackMap, fLabel, nLocals)
  }
  
  -- Checks if a stack is set for a label
  fun hasStack (l) {
    compare (findMap (stackMap, l), None) != 0
  }
  
  -- Sets the label of current function
  fun enterFunction (fLabel, nL) {
    makeEnv (stack, stackSlots, globals, strings, stringIndex, false, stackMap, fLabel, nL)
  }

  -- Gets the label of current function
  fun currentFunction () {
    fLabel
  }

  -- Gets the list of live registers past given symbolic stack depth
  fun liveRegisters (depth) {
    fun inner (d, acc, st) {
      case st of
        {}             -> acc
      | (r@R (_)) : tl -> inner (d+1, if d >= depth then r : acc else acc fi, tl)
      | _         : tl -> inner (d+1, acc, tl)
      esac
    }

    inner (0, {}, stack)
  }

  -- Registers a string literal and assigns it a name
  fun addString (s) {
    var escaped = makeString ((s.length + 1) * 2), i = 0, j = 0, name = sprintf ("string_%d", stringIndex);

    for skip, i < s.length, i := i+1 do
      case s[i] of
        '"'  -> escaped [j] :='"'; escaped [j+1] := '"'; j := j+2
      | '\n' -> escaped [j] :='\'; escaped [j+1] := 'n'; j := j+2
      | '\t' -> escaped [j] :='\'; escaped [j+1] := 't'; j := j+2
      | c    -> escaped [j] := c; j := j+1
      esac
    od;
    
    [makeEnv (stack, stackSlots, globals, addSet (strings, [name, substring (escaped, 0, j)]), stringIndex+1, false, stackMap, fLabel, nLocals),
     name]
  }

  -- Gets a list of all string literals and their names
  fun getStrings () {
    elements (strings)
  }

  -- Gets a local static size for the current function
  fun staticSize () {
    nLocals + stackSlots
  }
  
  [envString,
   allocate,
   push,
   pop,
   pop2,
   addGlobal,
   loc,
   getGlobals,
   getStackSize,
   peek,
   isBarrier,
   setBarrier,
   setStack,
   retrieveStack,
   enterFunction,
   currentFunction,
   liveRegisters,
   addString,
   getStrings,
   staticSize,
   hasStack,
   dropBarrier]
}

-- Exported accessors
fun envString (env) {
  env [0] ()
}

fun allocate (env) {
  env [1] ()
}

fun push (env, x) {
  env [2] (x)
}

fun pop (env) {
  env [3] ()
}

fun pop2 (env) {
  env [4] ()
}

fun addGlobal (env, name) {
  env [5] (name)
}

fun loc (env, name) {
  env [6] (name)
}

fun getGlobals (env) {
  env [7] ()
}

fun getStackSize (env) {
  env [8] ()
}

fun peek (env) {
  env [9] ()
}

fun isBarrier (env) {
  env [10] ()
}

fun setBarrier (env) {
  env [11] ()
}

fun setStack (env, l) {
  env [12] (l)
}

fun retrieveStack (env, l) {
  env [13] (l)
}

fun enterFunction (env, fLabel, nA) {
  env [14] (fLabel, nA)
}

fun currentFunction (env) {
  env [15] ()
}

fun liveRegisters (env, depth) {
  env [16] (depth)
}

fun addString (env, s) {
  env [17] (s)
}

fun getStrings (env) {
  env [18] ()
}

fun staticSize (env) {
  env [19] ()
}

fun hasStack (env, l) {
  env [20] (l)
}

fun dropBarrier (env) {
  env [21] ()
}

-- Creates an initial environment
fun initEnv () {
  makeEnv ({}, 0, emptySet (compare), emptySet (compare), 0, false, emptyMap (compare), "", 0)
}

-- Codegeneration helper functions
-- Generates code section
fun codeSection (text) {
  singletonBuffer (Meta ("\t.text\n")) <+> text
}

-- Generates data section
fun dataSection (text) {
  singletonBuffer (Meta ("\t.data\n")) <+> text
}

-- Generates integer definition
fun intDef (name) {
  Meta (sprintf ("%s:\t.int\t1\n", name))
}

-- Generates string definition
fun stringDef ([name, vl]) {
  Meta (sprintf ("%s:\t.string\t""%s""\n", name, vl))
}

-- Generates function prologue
fun prologue (fLabel) {
  singletonBuffer (Push  (ebp)) <+
  Mov   (esp, ebp) <+
  Binop ("-", M (sprintf ("$%s_SIZE", fLabel)), esp)  
}

-- Generates function epilogue
fun epilogue (env) {
  var metaDef = Meta (sprintf ("\t.set\t%s_SIZE,\t%d\n", env.currentFunction, env.staticSize * wordSize));

  if compare (env.currentFunction, "main") == 0
  then [env, singletonBuffer (Mov (ebp, esp)) <+ Pop (ebp) <+ Binop ("^", eax, eax) <+ Ret <+ metaDef]
  else case env.pop of
         [y, env] -> [env, singletonBuffer (Mov (ebp, esp)) <+ Pop (ebp) <+ Mov (y, eax) <+ Ret <+ metaDef]
       esac
  fi
}

-- Checks if an operand resides on a stack
fun stackOpnd (opnd) {
  case opnd of
    S (_) -> true
  | _     -> false
  esac      
}

-- Checks if an operand resides in memory
fun memOpnd (opnd) {
  case opnd of
    S (_) -> true
  | M (_) -> true
  | _     -> false
  esac
}

-- Generates a move between locations, using
-- intermediate register if needed
fun move (from, to) {
  if memOpnd (from) && memOpnd (to)
  then singletonBuffer (Mov (from, eax)) <+ Mov (eax, to)
  else singletonBuffer (Mov (from, to))
  fi
}

-- Gets a suffix for Set instruction from
-- source language comparison operator
fun suffix (op) {
  case op of
    "<"  -> "l"
  | "<=" -> "le"
  | "==" -> "e"
  | "!=" -> "ne"
  | ">=" -> "ge"
  | ">"  -> "g"
  esac
}

fun guardedCmp(lhv, rhv, code) {
  case lhv of
    R (_) -> code <+ Binop("cmp", lhv, rhv)
  | _     ->
      case rhv of
        R (_) -> code <+ Binop("cmp", lhv, rhv)
      | _     -> code <+ Mov(rhv, edx) <+ Binop("cmp", lhv, edx)
      esac
  esac
}

fun guardedBinop(op, lhv, rhv) {
  case rhv of
    R (_) -> singletonBuffer(Binop(op, lhv, rhv))
  | _     -> singletonBuffer(Mov(rhv, eax)) <+ Binop(op, lhv, eax) <+ Mov(eax, rhv)
  esac
}

fun guardedMov(lhv, rhv, code) {
  case lhv of 
    R (_) -> code <+ Mov (lhv, rhv)
  | _     ->
    case rhv of 
      R (_) -> code <+ Mov (lhv, rhv)
    | _     -> code <+ Mov(lhv, eax) <+ Mov(eax, rhv)
    esac
  esac
}


fun popn(env, n) {
  if n == 0 then
    [{}, env]
  else
    case pop(env) of [elem, env] ->
      case popn(env, n - 1) of [st, env] ->
        [elem:st, env]
      esac
    esac
  fi
}

-- Boxes an immediate value
fun makeBox (n) {
  n * 2 + 1
}

-- Generates a fixednum representation
-- conversion
fun toFixedNum (r) {
  singletonBuffer (Sal1 (r)) <+ Or1 (r)
}


-- Compiles stack machine code into a list of x86 instructions. Takes an environment
-- and stack machine code, returns an updated environment and x86 code.
fun compile (args, env, code) {  
  fun compile (env, code) {
    fun genCall(env, fLab, a, notSMArgsPre, notSMArgsPost) {
      case liveRegisters(env, a) of regs -> 
        case foldr(fun(acc, reg) { acc <+ Push (reg) }, emptyBuffer(), regs) of saveRegs ->
          case popn(env, a) of [args, env] ->
            case foldl(fun(acc, x) { acc <+ Push (x) }, emptyBuffer(), notSMArgsPost +++ args +++ notSMArgsPre) of loadArgs ->
              case allocate(env) of [s, env] ->
                case foldr(fun(acc, x) { acc <+ Pop (ebx) }, emptyBuffer(), notSMArgsPost +++ args +++ notSMArgsPre) of unloadArgs ->
                  case foldl(fun(acc, reg) { acc <+ Pop (reg) }, emptyBuffer(), regs) of restoreRegs ->
                    [env, saveRegs <+> loadArgs <+ Call (fLab) <+> unloadArgs <+ Mov (eax, s) <+> restoreRegs]
                  esac
                esac
              esac
            esac
          esac
        esac
      esac
    }

    foldl (
      fun ([env, scode], i) {
        var code = scode <+ Meta ("# " ++ showSMInsn (i) ++ "\n");

        -- printf ("Insn: %s\n", i.string);

        -- This if removes unreachable code; otherwise
        -- the stack invariants for the symbolic interpreter
        -- are violated
        -- if env.isBarrier 
        -- then case i of
        --        LABEL (l, true) -> [env.dropBarrier, code <+ Label (l)]
        --      | LABEL (l, _)    -> if hasStack (env, l)
        --                           then [retrieveStack (env, l), code <+ Label (l)]
        --                           else [env, code]
        --                           fi
        --      | _               -> [env, code]
        --      esac
        -- else
          case i of
           -- Some guidelines for generating function calls:
           --
           -- 1. generate instructions to save live registers on the X86 stack (use
           --    env.liveRegisters (number of arguments);
           -- 2. generate instructions to move actual parameters from the symbolic
           --    stack to the hardware one;
           -- 3. generate the call itself;
           -- 4. discard the actual parameters from the stack;
           -- 5. restore saved live registers.
           --
           -- Some guidelines for generating functions:
           --
           -- 1. generate proper prologue for BEGIN instruction (use "prologue" helper); use
           --    env.enterFunction to create a proper environment;
           -- 2. generate epilogue for END instruction.
            LD(x) ->
              case allocate(env) of
                [s, env] -> [env, guardedMov(loc(env, x), s, code)]
              esac 
          | DUP ->
            case allocate(env) of [n, env2] ->
              case pop(env) of [o, env3] -> 
                [env2, guardedMov(o, n, code)]
              esac
            esac
          | LDA(x) ->
            case allocate(env) of
              [s, env] -> [env, code <+ Lea(loc(env, x), s)]
            esac
          | ST(x) ->
              case pop(env) of
                [s, env] -> [env, guardedMov(s, loc(env, x), code)]
              esac
          -- | STI -> -- UNUSED
          --     case pop2(env) of
          --       [v, refX, env] -> [push(env, refX), guardedMov(v, refX, code <+ Mov(v, eax) <+ Mov(eax, I(0, refX)))]
          --     esac
            | STA -> case genCall(env, "Bsta", 3, {}, {}) of [env, staCode] -> [env, code <+> staCode] esac
            | CONST(n) ->
                case allocate(env) of
                  [s, env] -> [env, code <+ Mov (L(makeBox(n)), s)]
                esac 
            | BINOP(s) ->
                case pop2(env) of [rhv, lhv, env] -> case s of 
                  "/"  -> [env.push(lhv), code <+ Mov(lhv, eax) <+ Sar1(eax) <+ Cltd <+ Sar1(rhv) <+ IDiv(rhv) <+> toFixedNum(eax) <+ Mov(eax, lhv) <+> toFixedNum(rhv)]
                | "%"  -> [env.push(lhv), code <+ Mov(lhv, eax) <+ Sar1(eax) <+ Cltd <+ Sar1(rhv) <+ IDiv(rhv) <+> toFixedNum(edx) <+ Mov(edx, lhv) <+> toFixedNum(rhv)]
                | "&&" -> [env.push(lhv), code <+ Mov(L(0), eax) <+ Mov(L(0), edx) <+ Binop ("cmp", L(1), lhv) <+ Set ("!=".suffix, "%al") <+ Binop ("cmp", L(1), rhv) <+ Set ("!=".suffix, "%dl") <+ Binop("&&", eax, edx) <+ Mov(edx, lhv) <+> toFixedNum(lhv)]
                | "!!" -> [env.push(lhv), code <+ Mov(L(0), eax) <+ Mov(L(0), edx) <+ Binop ("cmp", L(1), lhv) <+ Set ("!=".suffix, "%al") <+ Binop ("cmp", L(1), rhv) <+ Set ("!=".suffix, "%dl") <+ Binop("!!", eax, edx) <+ Mov(edx, lhv) <+> toFixedNum(lhv)]
                | "+"  -> [env.push(lhv), code <+> guardedBinop (s, rhv, lhv) <+ Dec(lhv)]
                | "-"  -> [env.push(lhv), code <+> guardedBinop (s, rhv, lhv) <+ Or1(lhv)]
                | "*"  -> [env.push(lhv), code <+ Dec(lhv) <+ Mov(rhv, eax) <+ Sar1(eax) <+ Binop("*", lhv, eax) <+ Or1(eax) <+ Mov(eax, lhv)]
                | _    -> [env.push(lhv), guardedCmp (rhv, lhv, code <+ Mov(L(0), eax)) <+ Set (s.suffix, "%al") <+> toFixedNum(eax) <+ Mov(eax, lhv)]
                esac esac
            | LABEL (lab, _) -> [if isBarrier(env) then retrieveStack(env, lab) else env fi, code <+ Label(lab)]
            | JMP (lab)      -> [setBarrier(setStack(env, lab)), code <+ Jmp(lab)]
            | CJMP (c, lab)  -> case pop(env) of [n, env] -> [setStack(env, lab), code <+ Binop ("cmp", L(1), n) <+ CJmp(c, lab)] esac
            | DROP           -> case pop(env) of [_, env] -> [env, code] esac
            | GLOBAL (x)     -> [addGlobal(env, x), code]
            | CALL (fLab, a) -> case genCall(env, fLab, a, {}, {}) of [env, callCode] -> [env, code <+> callCode] esac
            | BUILTIN (f, a) -> case genCall(env, sprintf("L%s", f), a, {}, {}) of [env, callCode] -> [env, code <+> callCode] esac
            | STRING (s)     -> 
              case addString(env, s) of [env, name] -> 
                case genCall(env, "Bstring", 0, {M(sprintf("$%s", name))}, {}) of [env, stringCode] ->
                  [env, code <+> stringCode]
                esac
              esac
            | SEXP (s, n)    ->
              case genCall(env, "Bsexp", n, {L(makeBox(n + 1))}, {L(makeBox(tagHash(s)))}) of [env, sexpCode] ->
                [env, code <+> sexpCode]
              esac
            | ARRAY (n)    ->
              case genCall(env, "Barray", n, {L(makeBox(n))}, {}) of [env, arrCode] ->
                [env, code <+> arrCode]
              esac
            | ELEM -> 
                case genCall(env, "Belem", 2, {}, {}) of [env, elemCode] ->
                  [env, code <+> elemCode]
                esac
            | BEGIN (fLab, a, l) ->
              case enterFunction(env, fLab, l) of env ->
                [env, code <+ Label(fLab) <+> prologue(fLab)]
              esac
            | END -> 
              case epilogue(env) of [env, retCode] -> 
                [env, code <+> retCode]
              esac      
            | PATT (p) ->
              case p of
                Array (n) ->
                  case genCall(env, "Barray_pat", 1, {}, {L(makeBox(n))}) of [env, patCode] ->
                    [env, code <+> patCode]
                  esac
              | Tag (t, n) ->
                  case genCall(env, "Btag", 1, {}, {L(makeBox(n)), L(makeBox(tagHash(t)))}) of [env, patCode] ->
                    [env, code <+> patCode]
                  esac
              esac
            | _ -> failure ("codegeneration for instruction %s is not yet implemented\n", i.string)
          esac
        -- fi
      }, [env, emptyBuffer ()], code)
  }

  -- printf ("%s\n", showSM (code));

  compile (env, code) 
}

-- A top-level codegeneration function. Takes a driver's environment and a stack machine program,
-- compiles the program into machine code, and compiles the machine code into an executable
public fun compileX86 (args, code) {
  case compile (args, initEnv (), code) of
    [env, code] ->
       var asmFile = args.getBaseName ++ ".s",
           runtime = case getEnv ("LAMA_RUNTIME") of
                       #val -> "../runtime/"
                     | path -> path
                     esac ++ "/runtime.o";

       fwrite (asmFile,
               map (insnString, 
                    getBuffer $ 
                      singletonBuffer (Meta ("\t.global\tmain\n")) <+>
                      dataSection (listBuffer (map (intDef   , getGlobals (env))) <+>
                                   listBuffer (map (stringDef, getStrings (env)))) <+>
                      codeSection (code)                   
                    ).stringcat);
                    
       system ({"gcc -g -m32 -fno-stack-protector -o ", args.getBaseName, " ", runtime, " ", asmFile}.stringcat)
  esac
}
