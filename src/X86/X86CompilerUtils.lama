import Buffer;
import X86CompilerEnv;

-- Checks if an operand resides on a stack
public fun stackOpnd (opnd) {
  case opnd of
    S (_) -> true
  | _     -> false
  esac      
}

-- Checks if an operand resides in memory
public fun memOpnd (opnd) {
  case opnd of
    S (_) -> true
  | M (_) -> true
  | _     -> false
  esac
}

-- Generates a move between locations, using
-- intermediate register if needed
public fun move (from, to) {
  if memOpnd (from) && memOpnd (to)
  then singletonBuffer (Mov (from, eax)) <+ Mov (eax, to)
  else singletonBuffer (Mov (from, to))
  fi
}

public fun lea (from, to) {
  if memOpnd (to)
  then singletonBuffer (Lea (from, eax)) <+ Mov (eax, to)
  else singletonBuffer (Lea (from, to))
  fi
}

-- Gets a suffix for Set instruction from
-- source language comparison operator
public fun suffix (op) {
  case op of
    "<"  -> "l"
  | "<=" -> "le"
  | "==" -> "e"
  | "!=" -> "ne"
  | ">=" -> "ge"
  | ">"  -> "g"
  esac
}

public fun convertToBool (loc) {
  {
    Binop ("cmp", L (0), loc),
    Mov (L (0), eax),
    Set (suffix ("!="), "%al"),
    Mov (eax, loc)
  }
}
