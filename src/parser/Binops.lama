import Context;
import List;
import Lexer;

fun procBinops (binops) {
  fun makeBinop (l, [loc, op], r) {
    fun (context) {
      var parsed = case op of
        ":=" -> Assn (l (Ref), r (Val))
      | _    -> Binop (op, l (Val), r (Val))
      esac;
      fitVal (context, parsed, loc)
    }
  }

  fun procBinop (op) {
    [syntax (pos s[op]), makeBinop]
  }

  fun procBinopGroup ([assoc, ops]) {
    [assoc, map (procBinop, ops)]
  }

  map (procBinopGroup, binops)
}

public binops = procBinops ({
  [Right, {":="}],
  [Left,  {"!!"}],
  [Left,  {"&&"}],
  [Nona,  {"==", "!=", "<", "<=", ">", ">="}],
  [Left,  {"+", "-"}],
  [Left,  {"*", "/", "%"}]
});
