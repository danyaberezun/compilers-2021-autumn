import Ostap;
import Fun;
import Lexer;
import List;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
public fun inbr (l, p, r) {
  syntax (-l p -r)
}

var lParens = memo $ eta (s ("("));
var rParens = memo $ eta (s (")"));
public fun parens (p) {
  inbr (lParens, p, rParens)
}

var lBrace = memo $ eta (s ("{"));
var rBrace = memo $ eta (s ("}"));
public fun braces (p) {
  inbr (lBrace, p, rBrace)
}

var lBracket = memo $ eta (s ("["));
var rBracket = memo $ eta (s ("]"));
public fun brackets (p) {
  inbr (lBracket, p, rBracket)
}

public eq = memo $ eta (s ("="));
public comma = memo $ eta (s (","));
public semicolon = memo $ eta (s (";"));

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, comma)
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, comma)
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
public fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
public fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}
