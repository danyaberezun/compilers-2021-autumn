import Ostap;
import Fun;
import Lexer;
import List;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
public fun inbr (l, p, r) {
  syntax (-l p -r)
}

var lParens = memo $ eta (s ("("));
var rParens = memo $ eta (s (")"));
public fun parens (p) {
  inbr (lParens, p, rParens)
}

var lBrace = memo $ eta (s ("{"));
var rBrace = memo $ eta (s ("}"));
public fun braces (p) {
  inbr (lBrace, p, rBrace)
}

var lBracket = memo $ eta (s ("["));
var rBracket = memo $ eta (s ("]"));
public fun brackets (p) {
  inbr (lBracket, p, rBracket)
}

public eq = memo $ eta (s ("="));
public comma = memo $ eta (s (","));
public semicolon = memo $ eta (s (";"));
public arrow = memo $ eta (s ("->"));
public vline = memo $ eta (s ("|"));
public botline = memo $ eta (s ("_"));
public dog = memo $ eta (s ("@"));

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, comma)
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, comma)
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
public fun expandScope (defs, expr) {
  fun expandVarDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  fun expandValDefs (defs, expr) {
    foldr (fun ([defs, expr], [ident, value]) {     
             [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
           },
           [{}, expr],
           defs)
  }
  
  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Val (ds) ->
                 case expandValDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             | Var (ds) ->             
                 case expandVarDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
public fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

-- Helper AST function: reifies pattern bindings into scope
-- definitions and assignments; takes an returns lists of
-- pattern-branch pairs
public fun reifyPatternBindings (matched, brs) {
  map (
    fun ([pat, br]) {      
      fun collectBindings (path, p) {
        fun collectList (path, ps) {
          case
            foldl (fun ([acc, i], p) {
                     [collectBindings (i : path, p) : acc, i+1]                      
                   },
                   [{}, 0],
                   ps) of
            [acc, _] -> flatten (acc)
          esac            
        }
        
        case p of
          PSexp  (_, ps)   -> collectList (path, ps)
        | PArray (ps)      -> collectList (path, ps)
        | PNamed (name, p) -> [name, path] : collectBindings (path, p)
        |  _              -> {}
        esac
      }

      case collectBindings ({}, pat) of
        {}       -> [pat, br]
      | bindings ->
           [pat,
             expandScope (
               {Val (map (
                      fun ([name, path]) {
                        [name, foldr (fun (p, i) {Elem (p, Const (i))}, Var (matched), path)]
                      },
                      bindings))},
               br
             )]
      esac
    },
    brs
  )
}
