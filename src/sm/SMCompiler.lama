import SMCompilerEnv;
import SMUtils;
import Buffer;
import Fun;


-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM_ (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
      case stmt of
        Skip -> [false, env, emptyBuffer ()]
      | Read (Ref (x)) -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
      | Read (e) ->
        case env.genLabel of [lab, env] ->
          case compile (lab, env, e) of [labUsed, env, eCode] ->
            [false, env, eCode <+> label (lab, labUsed) <+ READ <+ STI <+ DROP]
          esac
        esac
      | Write (e) -> 
        case env.genLabel of [lab, env] ->
          case compile (lab, env, e) of [labUsed, env, eCode] ->
            [false, env, eCode <+> label (lab, labUsed) <+ WRITE]
          esac
        esac
      | Assn (Ref (x), e) ->
        case env.genLabel of [lab, env] ->
          case compile (lab, env, e) of [labUsed, env, eCode] ->
            [false, env, eCode <+> label (lab, labUsed) <+ ST (x)]
          esac
        esac
      | Assn (x, e) ->
        case env.genLabels (2) of [lab1, lab2, env] ->
          case compile (lab1, env, x) of [lab1Used, env, xCode] ->
            case compile (lab2, env, e) of [lab2Used, env, eCode] ->
              [false, env, xCode <+> label (lab1, lab1Used) <+> eCode <+> label (lab2, lab2Used) <+ STI]
            esac
          esac
        esac
      | Seq (s1, s2) ->
        case env.genLabel of [s2Lab, env] ->
          case compile (s2Lab, env, s1) of [s2LabUsed, env, s1Code] ->
            case compile (lab, env, s2) of [labUsed, env, s2Code] -> 
              [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
            esac
          esac
        esac
      | If (expr, sThen, sElse) ->
        case env.genLabels (2) of [labCond, labMid, env] ->
          case compile (labCond, env, expr) of [labCondUsed, env, cExpr] ->
            case compile (lab, env, sThen) of [_, env, cThen] ->
              case compile (lab, env, sElse) of [_, env, cElse] ->
                [true, env, cExpr <+> label (labCond, labCondUsed) <+ jmpF (labMid) <+> cThen <+ JMP (lab) <+ LABEL (labMid) <+> cElse]
              esac
            esac
          esac
        esac
      | While (expr, stmt) ->
        case env.genLabels (3) of [labCond, lab1, lab2, env] ->
          case compile (labCond, env, expr) of [labCondUsed, env, cExpr] ->
            case compile (lab2, env, stmt) of [_, env, cStmt] ->
              [false, env, singletonBuffer (JMP (lab2)) <+ LABEL (lab1) <+> cStmt <+ LABEL (lab2) <+> cExpr <+> label (labCond, labCondUsed) <+ jmpT (lab1)]
            esac
          esac
        esac
      | DoWhile (stmt, expr) ->
        case env.genLabels (3) of [labCond, lab1, lab2, env] ->
          case compile (labCond, env, expr) of [labCondUsed, env, cExpr] ->
            case compile (lab2, env, stmt) of [used, env, cStmt] ->
              [false, env, singletonBuffer (LABEL (lab1)) <+> cStmt <+> label (lab2, used) <+> cExpr <+> label (labCond, labCondUsed) <+ jmpT (lab1)]
            esac
          esac
        esac
      | Var (name) -> [false, env, singletonBuffer (LD (name))]
      | Const (value) -> [false, env, singletonBuffer (CONST (value))]
      | Binop (op, l, r) ->
        case env.genLabels (2) of [lab1, lab2, env] ->
          case compile (lab1, env, l) of [lab1Used, env, lCode] ->
            case compile (lab2, env, r) of [lab2Used, env, rCode] ->
              [false, env, lCode <+> label (lab1, lab1Used) <+> rCode <+> label (lab2, lab2Used) <+ BINOP (op)]
            esac
          esac
        esac
      | Ignore (e) -> 
        case env.genLabel of [lab, env] ->
          case compile (lab, env, e) of [labUsed, env, eCode] ->
            [false, env, eCode <+> label (lab, labUsed) <+ DROP]
          esac
        esac
      | Ref (x) -> [false, env, singletonBuffer (LDA (x))]
      esac
    }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
       esac
  esac
}
