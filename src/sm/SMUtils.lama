import Buffer;

-- Jump if False
public fun jmpF (label) {
  CJMP ("z", label)
}

-- Jump if True
public fun jmpT (label) {
  CJMP ("nz", label)
}

public fun jmpCond (c) {
  if compare (c, "z") == 0
  then fun (v) {v == 0}
  elif compare (c, "nz") == 0
  then fun (v) {v != 0}
  else failure ("Unknown jump condition")
  fi
}

public fun label (lab, labUsed) {
  if labUsed
  then singletonBuffer (LABEL (lab))
  else emptyBuffer ()
  fi
}

-- Takes n positions from the list, retursn a pair: the remaining list and the taken sublist
public fun take (list, n) {
  fun inner (n, acc, list) {
    if n == 0
    then [list, acc]
    else inner (n-1, list.hd : acc, list.tl)
    fi
  }

  inner (n, {}, list)
}
